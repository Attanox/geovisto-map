{"version":3,"sources":["demo lazy groupOptions: {} namespace object","demo lazy /^.*//static//config//config/.json$/ groupOptions: {} namespace object","demo lazy /^.*//static//geo//map/.json$/ groupOptions: {} namespace object","model/object/abstract/AbstractMapObjectDefaults.js","model/object/abstract/AbstractMapObject.js","model/event/abstract/AbstractEvent.js","model/event/abstract/AbstractObjectEvent.js","model/event/generic/GenericObjectEvent.js","model/event/basic/DataChangeEvent.js","model/object/abstract/AbstractMapObjectState.js","model/tool/abstract/AbstractToolState.js","model/tool/abstract/AbstractToolDefaults.js","model/tool/abstract/AbstractTool.js","model/object/abstract/AbstractMapObjectsManager.js","model/tool/abstract/AbstractToolsManager.js","model/tool/generic/ToolsManager.js","tools/sidebar/SidebarToolDefaults.js","tools/sidebar/SidebarToolState.js","tools/sidebar/SidebarTool.js","util/TabDOMUtil.js","inputs/AbstractSidebarInput.js","inputs/input/AutocompleteSidebarInput.js","inputs/filter/FilterAutocompleteSidebarInput.js","inputs/input/TextSidebarInput.js","inputs/input/LabeledTextAreaSidebarInput.js","inputs/input/LabeledTextSidebarInput.js","inputs/select/SelectSidebarInput.js","inputs/select/LabeledSelectSidebarInput.js","inputs/filter/FilterSelectSidebarInput.js","inputs/SidebarInputFactory.js","tools/sidebar/model/control/AbstractTabControlDefaults.js","tools/filters/sidebar/FiltersToolTabControlDefaults.js","tools/sidebar/model/control/AbstractTabControlState.js","tools/filters/sidebar/FiltersToolTabControlState.js","tools/sidebar/model/control/AbstractTabControl.js","tools/filters/sidebar/FiltersToolTabControl.js","tools/filters/model/abstract/AbstractFilterOperation.js","tools/filters/model/abstract/AbstractFiltersManager.js","tools/filters/model/abstract/AbstractFilterRule.js","tools/filters/model/generic/FilterRule.js","model/data/AbstractMapDataDomain.js","model/data/AbstractMapData.js","tools/filters/model/generic/FiltersManager.js","tools/filters/model/basic/EqFilterOperation.js","tools/filters/model/basic/NeqFilterOperation.js","tools/filters/model/basic/RegFilterOperation.js","tools/filters/FiltersToolDefaults.js","tools/filters/FiltersToolState.js","tools/filters/FiltersTool.js","tools/settings/sidebar/SettingsToolTabControlDefaults.js","tools/settings/sidebar/SettingsToolTabControlState.js","tools/settings/sidebar/SettingsToolTabControl.js","tools/settings/SettingsToolDefaults.js","tools/selection/model/item/generic/MapSelection.js","tools/selection/model/item/abstract/AbstractMapSelection.js","tools/selection/SelectionToolState.js","tools/selection/model/event/SelectionToolEvent.js","tools/sidebar/model/fragment/AbstractTabFragmentState.js","tools/sidebar/model/fragment/AbstractTabFragmentDefaults.js","tools/sidebar/model/fragment/AbstractTabFragment.js","tools/selection/sidebar/SelectionToolTabFragmentDefaults.js","tools/selection/sidebar/SelectionToolTabFragmentState.js","tools/selection/sidebar/SelectionToolTabFragment.js","tools/selection/SelectionTool.js","tools/selection/SelectionToolDefaults.js","tools/settings/SettingsToolState.js","tools/settings/SettingsTool.js","model/config/basic/BasicMapConfig.js","tools/layers/abstract/sidebar/AbstractLayerToolTabControlDefaults.js","tools/layers/abstract/sidebar/AbstractLayerToolTabControlState.js","tools/layers/abstract/sidebar/AbstractLayerToolTabControl.js","tools/layers/abstract/AbstractLayerToolState.js","tools/layers/abstract/AbstractLayerTool.js","tools/layers/abstract/AbstractLayerToolDefaults.js","tools/layers/map/MapLayerToolDefaults.js","tools/layers/map/MapLayerToolState.js","tools/layers/map/sidebar/MapLayerToolTabControlDefaults.js","tools/layers/map/sidebar/MapLayerToolTabControlState.js","tools/layers/map/sidebar/MapLayerToolTabControl.js","tools/themes/model/event/ThemesToolEvent.js","tools/layers/map/MapLayerTool.js","tools/layers/choropleth/ChoroplethLayerToolDefaults.js","tools/layers/choropleth/ChoroplethLayerToolState.js","tools/layers/choropleth/sidebar/ChoroplethLayerToolTabControlDefaults.js","tools/layers/choropleth/sidebar/ChoroplethLayerToolTabControlState.js","tools/layers/choropleth/sidebar/ChoroplethLayerToolTabControl.js","tools/layers/choropleth/ChoroplethLayerTool.js","tools/layers/marker/sidebar/MarkerLayerToolTabControlDefaults.js","tools/layers/marker/sidebar/MarkerLayerToolTabControlState.js","tools/layers/marker/sidebar/MarkerLayerToolTabControl.js","tools/layers/marker/MarkerLayerToolDefaults.js","tools/layers/marker/MarkerLayerToolState.js","tools/layers/marker/MarkerLayerTool.js","tools/layers/connection/sidebar/ConnectionLayerToolTabControlDefaults.js","tools/layers/connection/sidebar/ConnectionLayerToolTabControlState.js","tools/layers/connection/sidebar/ConnectionLayerToolTabControl.js","tools/layers/connection/ConnectionLayerToolDefaults.js","tools/layers/connection/ConnectionLayerToolState.js","tools/layers/connection/util/D3PathForceSimulator.js","tools/layers/connection/util/ProjectionUtil.js","tools/layers/connection/ConnectionLayerTool.js","tools/themes/model/theme/abstract/AbstractTheme.js","tools/themes/model/theme/generic/ThemesManager.js","tools/themes/model/theme/abstract/AbstractThemesManager.js","tools/themes/model/theme/basic/light1/Light1Theme.js","tools/themes/model/theme/basic/light2/Light2Theme.js","tools/themes/model/theme/basic/light3/Light3Theme.js","tools/themes/model/theme/basic/dark1/Dark1Theme.js","tools/themes/model/theme/basic/dark2/Dark2Theme.js","tools/themes/model/theme/basic/dark3/Dark3Theme.js","tools/themes/ThemesToolDefaults.js","tools/themes/ThemesToolState.js","tools/themes/sidebar/ThemesToolTabFragmentDefaults.js","tools/themes/sidebar/ThemesToolTabFragmentState.js","tools/themes/sidebar/ThemesToolTabFragment.js","tools/themes/ThemesTool.js","tools/layers/drawing/components/paintPoly.js","tools/layers/drawing/util/Marker.js","tools/layers/drawing/util/functionUtils.js","tools/layers/drawing/components/inputs.js","tools/layers/drawing/sidebar/DrawingLayerToolTabControlState.js","tools/layers/drawing/components/Knife.js","tools/layers/drawing/components/Edit.js","tools/layers/drawing/util/Poly.js","tools/layers/drawing/DrawingLayerToolState.js","tools/layers/drawing/util/constants.js","tools/layers/drawing/DrawingLayerToolDefaults.js","tools/layers/drawing/sidebar/DrawingLayerToolTabControlDefaults.js","tools/layers/drawing/sidebar/DrawingLayerToolTabControl.js","tools/layers/drawing/components/useDrawingToolbar.js","tools/layers/drawing/DrawingLayerTool.js","map/GeovistoMapDefaults.js","map/GeovistoMapState.js","map/GeovistoMap.js","react/ReactGeovistoMap.js","model/data/basic/FlattenedMapDataDomain.js","model/data/basic/FlattenedMapData.js","demo/Demo.js","index.js"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AbstractMapObjectDefaults","mapObject","this","undefined","getType","AbstractMapObject","props","defaults","createDefaults","console","log","initialize","state","createState","AbstractMapObjectState","getProps","getId","AbstractEvent","AbstractObjectEvent","GenericObjectEvent","type","source","object","DataChangeEvent","data","TYPE","setType","setId","reset","config","AbstractToolState","setEnabled","enabled","isEnabled","resetMapVariables","getMap","getDefaults","map","AbstractToolDefaults","AbstractTool","isSingleton","getState","setMap","deserialize","getConfig","event","AbstractMapObjectsManager","getObjects","length","types","objects","i","push","resultObjects","AbstractToolsManager","AbstractMapManager","ToolsManager","tools","toolsCopy","copy","tool","filter","item","SidebarToolDefaults","SidebarTool","SidebarToolState","tabs","tabsDecriptions","serialize","sidebar","tab","index","array","indexOf","splice","createSidebar","createTabs","L","control","getSidebarStructure","addTo","getLeafletMap","setSidebar","autopan","closeButton","position","getTabs","getTabsDescriptions","tabConfig","tabsConfigs","getTools","getById","createSidebarTab","getSidebarTabControl","sidebarTabControl","getSidebar","create","addTab","TabDOMUtil","label","action","options","div","document","createElement","appendChild","createTextNode","createSelect","className","select","setAttribute","classList","add","onchange","appendOptions","option","innerHTML","size","input","btn","onclick","heading","element","keyArray","valueArray","AbstractSidebarInput","settings","disabled","removeAttribute","value","ID","COMPONENT_COMPLETION_ACTIVE_ITEM_CLASS","AutocompleteSidebarInput","setData","placeholder","inputValue","formDiv","inputDiv","completionListDiv","selectedCompletionItem","newOptions","redrawMenu","matchArray","notMatchArray","String","includes","match","other","createForm","createListeners","labelDiv","setAttributes","_this","addEventListener","createMenu","completionItems","children","remove","keyCode","preventDefault","textContent","dispatchEvent","Event","target","createCompletionItem","completionItemDiv","parentElement","currentOptions","getCurrentOptions","forEach","FilterAutocompleteSidebarInput","dataModel","opModel","ops","valModel","vals","dataInput","opInput","valInput","getValue","op","val","setValue","TextSidebarInput","LabeledTextAreaSidebarInput","LabeledTextSidebarInput","SelectSidebarInput","selected","Boolean","LabeledSelectSidebarInput","FilterSelectSidebarInput","createInputElement","createSelectElement","SidebarInputFactory","AbstractTabControlDefaults","FiltersToolTabControlDefaults","getMapObject","AbstractTabControlState","setTool","setName","name","getName","setIcon","icon","getIcon","setCheckButton","checkButton","getCheckButton","tabControl","deserializeFragments","fragment","fragments","fragmentConfig","getTool","getSidebarTabFragment","isChild","setTabFragments","tabPane","FiltersToolTabControlState","C_sidebar_header_class","C_sidebar_tab_content_class","C_enabled_class","AbstractTabControl","JSON","parse","stringify","addPanel","getTabStructure","postCreate","pane","title","tabElement","getElementById","tabContent","getElementsByClassName","getTabContent","tabFragments","getTabFragments","tabHeader","hasCheckButton","tabEnableBtn","setChecked","checked","insertBefore","firstChild","d3","selectAll","attr","sidebarTab","classed","setTabContentChecked","FiltersToolTabControl","mapData","getMapData","getData","dataDomainLabels","getDataDomainLabels","filterManager","getFiltersManager","operationLabels","getOperationLabels","btnGroup","inputs","counter","createButton","addSelectItem","inputChangedAction","setFilterRules","getFilterRules","filterRules","getDataDomain","filterRule","createRule","container","toString","getFilterOperation","getPattern","getFilterRuleElementClass","minusButton","removeSelectItem","createSidebarInput","closest","dataDomain","setDisabled","values","getValues","changeOptions","currentData","inputItem","AbstractFilterOperation","pattern","AbstractFiltersManager","operations","getOperations","labels","operation","AbstractFilterRule","FilterRule","AbstractMapDataDomain","domainDescription","AbstractMapData","dataDomains","getDataDomains","FiltersManager","filterOperations","getOperation","doFilter","resultData","matchFunctions","patterns","j","getItemValues","EqFilterOperation","NeqFilterOperation","RegFilterOperation","RegExp","FiltersToolDefaults","FiltersTool","FiltersToolState","setFiltersManager","manager","rules","configFilterRule","dimension","domain","createSidebarTabControl","updateData","filterData","SettingsToolTabControlDefaults","SettingsToolTabControlState","SettingsTabControl","SettingsToolDefaults","SettingsTool","MapSelection","srcIds","allIds","x","srcElement","selection","getSrcIds","srcIds2","ids","newIds","SelectionToolState","setSelection","getSelection","SelectionToolEvent","selectionTool","AbstractTabFragmentState","content","AbstractTabFragmentDefaults","AbstractTabFragment","setTabControl","SelectionToolTabFragmentDefaults","SelectionToolTabFragmentState","SelectionToolTabFragment","createTabContent","SelectionTool","tabFragment","SelectionToolDefaults","createSidebarTabFragment","EMPTY_SELECTION","SettingsToolState","SettingsToolTabControl","BasicMapConfig","toolId","Array","isArray","find","mapConfig","AbstractLayerToolTabControlDefaults","getLayerName","getDataMappingModel","AbstractLayerToolTabControlState","AbstractLayerToolTabControl","dataMapping","AbstractLayerToolState","setLayerName","setDataMapping","getDataMapping","layerName","AbstractLayerTool","LayerTool","LayerToolDefaults","LayerToolState","LayerTabControl","showLayerItems","hideLayerItems","layerItems","getLayerItems","postCreateLayerItems","removeLayer","createLayerItems","onlyStyle","redraw","AbstractLayerToolDefaults","MapLayerToolDefaults","MapLayerTool","MapLayerToolState","setBaseMap","baseMap","getBaseMap","layer","MapLayerToolTabControlDefaults","MapLayerToolTabControlState","MapLayerToolTabControl","ThemesToolEvent","themesTool","theme","createTileLayer","setLayer","tileID","tileLayer","attribution","subdomains","maxZoom","minZoom","onThemeChange","getObject","getLayer","_url","INPUT_ID_PREFIX","MAPPING_MODEL","country","aggregation","color","ChoroplethLayerToolDefaults","ChoroplethLayerTool","dataMappingModel","implicitDataDomainLabel","getPolygons","ChoroplethLayerToolState","setZIndex","getZIndex","setPolygons","polygons","popup","hoveredItem","zindex","ChoroplethLayerToolTabControlDefaults","ChoroplethLayerToolTabControlState","ChoropolethLayerToolTabControl","model","inputCountry","inputAggregation","changeDimensionAction","updateDataMapping","getInputValues","elem","setInputValues","COLOR_orange","COLOR_red","COLOR_blue","SCALE","getByType","thousands_separator","num","num_parts","split","replace","join","mouseOver","layerItem","setHoveredItem","feature","updateItemStyle","bindTooltip","sticky","openTooltip","Browser","ie","opera","edge","bringToFront","mouseOut","getLayerPopup","update","bringToBack","click","getSelectionTool","equals","updatePolygons","paneId","createPane","style","zIndex","geoJSON","onEachFeature","on","mouseover","mouseout","layerPopup","onAdd","_div","DomUtil","setLayerPopup","geoCountry","foundCountries","foundValues","getCurrentData","dataLen","countryDataDomain","valueDataDomain","updateStyle","colors","getColors","scale","getScale","getHoveredItem","weight","opacity","dashArray","fillOpacity","fillColor","getIds","computeColor","computeColorClass","selectedIds","_path","computeStyleClasses","eachLayer","MarkerLayerToolTabControlDefaults","MarkerLayerToolTabControlState","MarkerLayerToolTabControl","category","inputCategory","MarkerLayerToolDefaults","MarkerLayerTool","getCentroids","MarkerLayerToolState","setMarkers","setCentroids","centroids","markers","CountryIcon","DivIcon","extend","_LEVEL","_SUFFIX","_COLOR","levels","Infinity","sizeBasic","sizeGroup","sizeDonut","subvalues","active","mitigated","finished","isGroup","useDonut","round","align","Math","formatValue","level","getColor","getLevel","createIcon","oldIcon","tagName","iconSize","iconAnchor","rCircle","center","divContent","svg","append","html","values_ready","d","pie","Object","entries","enter","innerRadius","outerRadius","bgPos","point","backgroundPosition","y","_setIconStyles","markerClusterGroup","iconCreateFunction","cluster","getAllChildMarkers","key","countryName","getMarkers","actResultItem","foundCategories","workData","categoryDataDomain","highlightedIds","createMarker","addLayer","centroid","popupMsg","marker","lat","long","bindPopup","deleteLayerItems","prepareMapData","createMarkers","ConnectionLayerToolTabControlDefaults","ConnectionLayerToolTabControlState","ConnectionLayerToolTabControl","from","inputFrom","to","inputTo","ConnectionLayerToolDefaults","ConnectionLayerTool","ConnectionLayerToolState","D3PathForceSimulator","segmentLength","getDefaultSegmentLength","paths","createPaths","connections","createPath","connection","path","sqrt","numberOfSegments","dx","dy","numberOfPoints","onTickAction","onEndAction","getSimulation","getForceProps","getNodes","force","strength","charge","distanceMin","distanceMax","links","getLinks","link","distance","alphaDecay","forceProps","createDefaultForceProps","nodes","createNodes","node","endNodes","fx","fy","getPaths","createLinks","ProjectionUtil","zoom","coords","project","LatLng","curve","latLngToLayerPoint","unproject","Point","_container","layerElement","childNodes","removeChild","lastChild","geoFrom","geoTo","actFrom","actTo","actConnection","foundFrom","foundTo","projectPoint","getDataProjectionFunction","getProjectionZoom","fromDataDomain","toDataDomain","clone","rfdc","count","setWorkData","g","_map","getPanes","overlayPane","getWorkData","d3ForceSimulator","projectionPathFunction","getPathProjectionFunction","updatePaths","onSelectionUpdate","run","selectionSrcIds","affectedIds","each","addIds","AbstractTheme","ThemesManager","themes","getThemes","Light1Theme","Light2Theme","Light3Theme","Dark1Theme","Dark2Theme","Dark3Theme","ThemesToolDefaults","ThemesTool","getThemesManager","getDefault","ThemesToolState","setThemesManager","setTheme","getTheme","themesManager","ThemesToolTabFragmentDefaults","ThemesToolTabFragmentState","ThemesToolTabFragment","themeInput","getThemeLabels","newTheme","DEFAULT_COLOR","ERASER_COLOR","PaintPoly","getMouseDown","_mouseDown","getBrushSize","_circleRadius","getBrushSizeConstraints","maxBrushSize","_maxCircleRadius","minBrushSize","_minCircleRadius","resizeBrush","_circle","setRadius","stop","_action","_removeMouseListener","startPaint","_addMouseListener","circleMarker","_latlng","window","startErase","clearPaintedPolys","kIdx","_shapeLayers","_accumulatedShapes","clearAllAccumulated","updatePaintedPolys","toGeoJSON","properties","convertOptionsToProperties","_pixelsToMeters","metersPerPixel","abs","cos","PI","pow","getZoom","drawCircle","erase","brushColor","tabState","getSelectedColor","brushStroke","getSelectedStroke","STROKES","turfCircle","circle","lng","steps","units","keyIndex","union","fill","_redrawShapes","selectedLayer","getToolState","simplifyFeature","geometry","coordinates","depth","latlngs","GeoJSON","coordsToLatLngs","styles","highlightStyles","normalStyles","opts","draggable","transform","result","polygon","dragging","disable","_fireCreatedShapes","layerState","found","getLayerByIdx","layerType","fire","Draw","CREATED","_onMouseMove","_onMouseDown","_onMouseUp","off","enable","_setLatLng","latlng","setLatLng","clickDraw","enablePaint","DomEvent","_active","enableErase","isActive","ExtendedMarker","Marker","setIconOptions","iconOpts","iconStarter","shadowUrl","iconOptions","markerCreate","connectClick","additionalOpts","iconUrl","getSelectedIcon","Icon","guideLayers","repeatMode","snapVertices","setEnabledEl","geoSearch","featureGroup","a","query","provider","OpenStreetMapProvider","search","results","isEmpty","obj","getIntervalStep","n","after","allZeros","Number","createIntervalInput","min","max","onChange","step","controlWrapper","display","justifyContent","alignItems","inputWrapper","displayAmount","innerText","createCheck","onCheck","prefix","check","checkLabel","for","ICON_SRCS","COLORS","ADMIN_LEVELS","DrawingLayerToolTabControlState","changeColorAction","selectedEl","_getSelected","setSelectedColor","setStyle","changeIconOpts","iconOpt","enabledEl","_marker","oldIconOptions","newIconOptions","markerIcon","changeIconAction","setSelectedIcon","redrawTabContent","changeDescriptionAction","changeDesc","inputText","modInputText","convertDescToPopText","popup1","getPopup","setContent","closeOnClick","autoClose","popupContent","changeWeightAction","setSelectedStroke","changeIdentifierAction","identifier","popupText","changeWhichIdUseAction","setIdentifierType","searchAction","setSearchOpts","inputSearch","opt","onInputOptClick","searchOpts","connectActivated","latLng","raw","Touch","putMarkerOnMap","applyEventListeners","applyTopologyMarkerListeners","appendToIconSrcs","plotTopology","addIconAction","fetchAreas","countryCode","adminLevel","highQuality","toolState","querySelector","cursor","searchForAreasBtn","fetch","response","json","gJSON","osmtogeojson","selectedColor","features","feat","errorMsg","catch","err","error","finally","searchForAreaAction","setCountryCode","pickAdminLevelAction","setAdminLevel","changeIconAnchor","coordinate","strokes","selectedStroke","iconSrcs","Set","selectedIcon","identifierType","intersectActivated","paintPoly","pather","Pather","strokeWidth","smoothFactor","moduleClass","pathColour","patherActive","countries","require","c","Slice","Polyline","statics","touch","touchIcon","drawError","message","drawLocal","draw","handlers","polyline","Util","Feature","prototype","call","_calculateFinishDistance","potentialLatLng","lastPtDistance","_markers","finishMarker","Polygon","lastMarkerPoint","latLngToContainerPoint","getLatLng","potentialMarker","zIndexOffset","potentialMarkerPint","distanceTo","Edit","ExtendedPoly","Poly","_initHandlers","_verticesHandlers","ReducedPolyVerticesEdit","_poly","poly","PolyVerticesEdit","_initMarkers","_markerGroup","LayerGroup","len","markerLeft","markerRight","_defaultShape","shape","_createMarker","_onMarkerClick","_onContextMenu","_createMiddleMarker","_updatePrevNext","getGeoJSONFeatureFromLayer","geoFeature","getFeatFromLayer","drawnGeoJSON","isFeaturePoly","f","pixels","tolerance","customTolerance","turf","isLayerPoly","morphFeatureToPolygon","simplify","simplified","DrawingLayerToolState","chosenLayersMaxed","chosenLayers","pushChosenLayer","shift","highlightElement","deselectChosenLayers","chosen","normalizeElement","clearChosenLayers","pushJoinedToChosenLayers","joined","isConnectMarker","selectedLayerIsConnectMarker","canPushToChosen","acceptableType","firstChosen","chosenLayersArePolys","chosenLayersAreMarkers","pushVertice","vertice","createdVertices","removeGivenVertice","lId","idsOfVerticesToRemove","removeMappedVertices","v","_leaflet_id","mappedMarkersToVertices","newMapped","vertObj","vert","has","removeMarkersMappedVertices","markerVertices","addMappedVertices","mappedVertices","mappedProperty","initMappedMarkersToVertices","lType","markerId","verticesKeyArr","vertLeafId","mappedVerticeId","verticesObj","vertKey","spreadable","currEl","FeatureGroup","activeIndex","selecting","idx","layersObj","_layers","pop","is","l","geo","geojson","sidebarState","sort","b","sortReverseAlpha","convertPropertiesToOptions","getLeafletTypeFromFeature","featureCoordinates","reverse","featureToLeafletCoordinates","exportSettings","pushPolygon","extra","_latlngs","pushMarker","layerToAdd","idKey","description","strokeThickness","searchForArea","DrawingLayerToolDefaults","DrawingLayerTool","DrawingLayerToolTabControlDefaults","POLYS","DrawingLayerToolTabControl","createBrushSizeControl","brushControl","customToleranceCheck","createCustomToleranceCheck","customToleranceInput","createIdentifierInput","getIdentifierType","idOpts","createPickIdentifier","k","descText","replaceAll","convertDescfromPopText","popText","createConnectCheck","setConnectActivated","createIntersectionCheck","setIntersectActivated","createHighQualityCheck","setHighQuality","createChangeConnectCheck","isConnect","toleranceChange","interval","setGlobalSimplificationTolerance","createIconAnchorSlider","toUpperCase","createXAnchorSlider","createYAnchorSlider","addHeading","headingTag","renderSearchInputs","inputConnect","inputSearchForArea","getSelectCountries","inputAdminLevel","hqCheck","renderDataInputs","disableTextFields","inputPickIdentifier","inputId","inputDesc","getContent","renderPolyInputs","thicknessOpts","inputThickness","inputColor","createColorPicker","renderIconInputs","inputIcon","createIconPalette","inputUrl","changeConnect","activeIdx","changeAction","img","inputPalette","wrapper","gridTemplateColumns","boxSizing","background","backgroundRepeat","backgroundSize","height","border","colorPicker","activeColor","createPalette","iconsSet","activeIcon","iconsArr","paintPolyControl","inputIntersect","useDrawingToolbar","Control","DrawingToolbar","drawingBtns","setOptions","createUi","topContainer","toolContainer","lineBtn","createToolbarBtn","markerBtn","polygonBtn","deselectBtn","transformBtn","editBtn","joinBtn","sliceBtn","connectBtn","searchBtn","paintBtn","eraserBtn","removeBtn","addEventListeners","disableClickPropagation","onRemove","_disableDrawing","stopPropagation","toggle","getEnabledEl","redrawSidebar","_disableTransform","getCurrEl","_enabled","toggleExtra","withExtra","extraBtn","nextSibling","initCreatePolyline","initCreateMarker","initCreatePolygon","initTransform","initNodeEdit","initSlicePoly","deselect","initJoin","initConnect","initSearch","initPainting","initErasing","initRemove","evt","init","initSelecting","removeElement","shapeOptions","polylineCreate","allowIntersection","snapDistance","polygonCreate","patherStatus","setPatherStatus","slicePoly","editing","clearSelectedLayer","setCurrEl","btnContainer","returnBtn","role","el","redrawSidebarTabControl","drawingToolbar","d33","include","Evented","SnapMixin","addInitHook","_snap_initialize","DRAWING_TOOL_LAYER_TYPE","operateOnSelectedAndCurrectLayer","eKeyIndex","selectNew","isFeatPoly","summedFeature","selectedFeatures","selectedFeature","removeSelectedLayer","setSelectedLayer","createdListener","polyIntersect","polyJoin","polyDiff","pushGuideLayer","createdPath","polySlice","removePath","knifeBtn","getSummedFeature","joinChosen","drawObject","chosenFeatures","first","second","resultFeature","initChangeStyle","getSelecting","fgLayers","_","setSelecting","hightlightOnHover","normalizeOnHover","layerFeature","isCurrentLayerPoly","createdIsEraser","replaceLayer","replacement","replacedLayer","replacementCoords","layerIsNotSelected","diffFeature","difference","isMultiPoly","isJustPoly","coord","newLatLngs","lineFeat","offsetLine","polyCoords","thickLineString","thickLinePolygon","current","getLatLngs","layerArr","allConnected","firstMarker","secondMarker","fLat","fLng","sLat","sLng","haveSameVertice","mapMarkersToVertices","mapped","spread","setVerticesToMarker","oldlatlng","markerID","m","setVerticesCoordinates","splitKey","latLngs","LatLngUtil","cloneLatLngs","setLatLngs","oldLatLng","changeVerticesLocation","addControl","getCenter","_icon","addClass","removeClass","rotation","scaling","GeovistoMapDefaults","GeovistoMap","getToolTemplates","FlattenedMapData","countryPolygons","countryCentroids","mapCenter","getMapCenter","mapStructure","getMapStructure","maxBounds","GeovistoMapState","templates","getTemplates","setToolTemplates","setTools","setMapData","globals","getGlobals","setInitialZoom","setInitialMapCenter","setInitialMapStructure","deserializeGeoJSON","t","serializeToGeoJSON","toolTemplates","setCurrentData","mapContainer","setMapConfig","toolsManager","getToolConfig","toolsConfigs","getToolsConfigs","toolConfig","toolTemplatesManager","getMapConfig","export","serializeGeoJSON","createMapContainer","createMap","createTools","getContainerId","getContainerClass","getInitialMapStructure","setView","getInitialMapCenter","getInitialZoom","attributionControl","addAttribution","getMapAttribution","setLeafletMap","handleEvent","ReactGeovistoMap","getDefaultId","getDefaultClass","Component","FlattenedMapDataDomain","flattenedData","createDataDomains","flattenArrays","getDataValues","actResult","processDataDomainDescription","getDomainDescription","actKeys","processDataDomain","actValue","dataDomainCopy","newMapDataDomain","dataDomainLabel","contains","transformObject","transformedChild","transformedChildren","concat","newResults","dataDomainPart","C_ID_select_data","C_ID_check_data","C_ID_input_data","C_ID_check_config","C_ID_input_config","C_ID_check_geojson","C_ID_input_geojson","C_ID_input_import","C_ID_input_export","Demo","exportGeoJSON","encodeURIComponent","body","Polygons","Centroids","jsonData","JsonData","jsonConfig","JsonConfig","geojsonConfig","GeojsonConfig","React","createRef","enableInput","pathSubmitted","file","reader","FileReader","onload","ex","readAsText","files","fileName","lazy","PREFIX","setState","accept","onClick","ref","ReactDOM","render"],"mappings":"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","file":"static/js/main.e295b69b.chunk.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 172;","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 173;","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 174;","/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass AbstractMapObjectDefaults {\n\n    /**\n     * It creates map object defaults.\n     */\n    constructor() {\n    }\n\n    /**\n     * It initializes the map object defaults.\n     * \n     * @param {*} object \n     */\n    initialize(mapObject) {\n        this.mapObject = mapObject;\n    }\n\n    /**\n     * It returns the map object which works with the defaults.\n     */\n    getMapObject() {\n        return this.mapObject;\n    }\n\n    /**\n     * It returns default props if no props are given.\n     */\n    getProps() {\n        return {};\n    }\n\n    /**\n     * It returns a unique type string of the tool.\n     */\n    getType() {\n        return \"geovisto-object-abstract\";\n    }\n\n    /**\n     * It returns identifier which is used when no identifier is specified.\n     */\n    getId() {\n        if(AbstractMapObjectDefaults.id == undefined) {\n            AbstractMapObjectDefaults.id = 0;\n        }\n        AbstractMapObjectDefaults.id++;\n        return this.getType() + \"-\" + AbstractMapObjectDefaults.id;\n    }\n}\nexport default AbstractMapObjectDefaults;","import AbstractMapObjectDefaults from \"./AbstractMapObjectDefaults\";\n\n/**\n * This class provide functions for using map object which can be identified by uniquie string.\n * \n * @author Jiri Hynek\n */\nclass AbstractMapObject {\n\n    /**\n     * It creates a map object.\n     */\n    constructor(props) {\n        // get defaults of the object\n        this.defaults = props != undefined && props.defaults != undefined ? props.defaults : this.createDefaults();\n        console.log(\"new object:\", this.defaults.getType());\n\n        // initialize defaults\n        this.defaults.initialize(this);\n\n        // create state of the object\n        this.state = props != undefined && props.state != undefined ? props.state : this.createState(props, this.defaults);\n\n        // initialize state\n        this.state.initialize(props, this.defaults);\n    }\n\n    /**\n     * It returns default values of the state properties.\n     * \n     * This function should not be overriden.\n     */\n    getDefaults() {\n        return this.defaults;\n    }\n\n    /**\n     * It creates new defaults of the object.\n     * \n     * This function can be overriden.\n     */\n    createDefaults() {\n        return new AbstractMapObjectDefaults();\n    }\n\n    /**\n     * It returns the tool state.\n     * \n     * This function should not be overriden.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /**\n     * It creates new state if the object.\n     * \n     * This function can be overriden.\n     */\n    createState() {\n        return new AbstractMapObjectState();\n    }\n\n    /**\n     * Help function which returns the props given by the programmer.\n     * \n     * This function should not be overriden.\n     */\n    getProps() {\n        return this.state.getProps();\n    }\n\n    /**\n     * Help function which returns the type of the object.\n     */\n    getType() {\n        return this.state.getType();\n    }\n\n    /**\n     * Help function which returns the id of the object.\n     */\n    getId() {\n        return this.state.getId();\n    }\n}\nexport default AbstractMapObject;","/**\n * This class provides abstract event class.\n * \n * @author Jiri Hynek\n */\nclass AbstractEvent {\n\n    /**\n     * It initializes event.\n     */\n    constructor() {\n    }\n\n    /**\n     * Returns string which identifies the event.\n     */\n    getType() {\n        return undefined;\n    }\n\n    /**\n     * Return source object of the event.\n     */\n    getSource() {\n        return undefined;\n    }\n}\nexport default AbstractEvent;","import AbstractEvent from \"./AbstractEvent\";\n\n/**\n * This class provides abstract event class which .\n * \n * @author Jiri Hynek\n */\nclass AbstractObjectEvent extends AbstractEvent {\n\n    /**\n     * It initializes event.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * Return the changed object.\n     */\n    getObject() {\n        return undefined;\n    }\n}\nexport default AbstractObjectEvent;","import AbstractObjectEvent from \"../abstract/AbstractObjectEvent\";\n\n/**\n * This class provides generic event object.\n * \n * @author Jiri Hynek\n */\nclass GenericObjectEvent extends AbstractObjectEvent {\n\n    /**\n     * It initializes event.\n     */\n    constructor(type, source, object) {\n        super(type, source);\n        this.type = type;\n        this.source = source;\n        this.object = object;\n    }\n\n    /**\n     * Returns string which identifies the event.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Return source object of the event.\n     */\n    getSource() {\n        return this.source;\n    }\n\n    /**\n     * Return the changed object.\n     */\n    getObject() {\n        return this.object;\n    }\n}\nexport default GenericObjectEvent;","import GenericObjectEvent from \"../generic/GenericObjectEvent\";\n\n\n/**\n * This class provides the theme change event.\n * \n * @author Jiri Hynek\n */\nclass DataChangeEvent extends GenericObjectEvent {\n\n    /**\n     * It initializes event.\n     */\n    constructor(source, data) {\n        super(DataChangeEvent.TYPE(), source, data);\n    }\n\n    /**\n     * Type of the event.\n     */\n    static TYPE() {\n        return \"data-change-event\";\n    }\n}\nexport default DataChangeEvent;","/**\n * This class manages state of the tool.\n * It wraps the state since the tool can work with state objects which needs to be explicitly serialized.\n * \n * @author Jiri Hynek\n */\nclass AbstractMapObjectState {\n\n    /**\n     * It creates a map object state.\n     */\n    constructor() {\n    }\n\n    /**\n     * It initializes the state using the initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {*} props \n     * @param {*} defaults \n     */\n    initialize(props, defaults) {\n        \n        // get default props if undefined\n        this.props = props != undefined ? props : defaults.getProps();\n        \n        // sets the type of the object (can be set only once in constructor)\n        this.setType(defaults.getType());\n\n        // set the id of the object (can be set only once in constructor)\n        this.setId(this.props.id == undefined && defaults ? defaults.getId() : this.props.id);\n\n        // resets the state\n        this.reset(defaults);\n    }\n\n    /**\n     * It resets the state to the initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {*} defaults \n     */\n    reset(defaults) {\n    }\n\n    /**\n     * It returns the props given by the programmer.\n     * \n     * This function should not be overriden.\n     */\n    getProps() {\n        return this.props;\n    }\n\n    /**\n     * The metod takes config and desrializes the values.\n     * \n     * @param {*} config \n     */\n    deserialize(config) {\n        if(config.id != undefined) this.setId(config.id);\n    }\n\n    /**\n     * The method serializes the tool state. Optionally, a serialed value can be let undefined if it equals the default value.\n     * \n     * @param {*} defaults \n     */\n    serialize(defaults) {\n        return {\n            type: this.getType(),\n            id: this.getId(),\n        }\n    }\n\n    /**\n     * It return props given by the programmer.\n     * \n     * This function should not be overriden.\n     */\n    getProps() {\n        return this.props;\n    }\n\n    /**\n     * It returns the type property of the tool state.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * It sets the type property of the tool state.\n     * It can be set only once.\n     * \n     * @param {*} type \n     */\n    setType(type) {\n       this.type = (this.type == undefined) ? type : this.type;\n    }\n\n    /**\n     * It returns the id property of the tool state.\n     */\n    getId() {\n        return this.id;\n    }\n\n    /**\n     * It sets the id property of the tool state.\n     * It can be set only once.\n     * \n     * @param {*} id \n     */\n    setId(id) {\n       this.id = (this.id == undefined) ? id : this.id;\n    }\n\n}\nexport default AbstractMapObjectState;\n","import AbstractMapObjectState from '../../object/abstract/AbstractMapObjectState';\r\n\r\n/**\r\n * This class manages state of the tool.\r\n * It wraps the state since the tool can work with state objects which needs to be explicitly serialized.\r\n * \r\n * @author Jiri Hynek\r\n */\r\nclass AbstractToolState extends AbstractMapObjectState {\r\n\r\n    /**\r\n     * It creates a map object state.\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Help function which reset state with respect to initial props. Optionally, defaults can be set if property is undefined.\r\n     * \r\n     * @param {*} defaults \r\n     */\r\n    reset(defaults) {\r\n        super.reset(defaults);\r\n\r\n        // set the enabled property \r\n        this.setEnabled(this.getProps().enabled == undefined && defaults ? defaults.isEnabled() : this.getProps().enabled);\r\n\r\n        // if map is set reset map variables \r\n        this.resetMapVariables(this.getMap(), defaults);\r\n    }\r\n\r\n    /**\r\n     * Help function which resets the state properties realated with map if not defined.\r\n     */\r\n    resetMapVariables(defaults) {\r\n    }\r\n\r\n    /**\r\n     * The metod takes config and desrializes the values.\r\n     * \r\n     * @param {*} config \r\n     */\r\n    deserialize(config) {\r\n        super.deserialize(config);\r\n\r\n        // tools properties\r\n        if(config.enabled != undefined) this.setEnabled(config.enabled);\r\n    }\r\n\r\n    /**\r\n     * The method serializes the tool state. Optionally, a serialed value can be let undefined if it equals the default value.\r\n     * \r\n     * @param {*} defaults \r\n     */\r\n    serialize(defaults) {\r\n        let config = super.serialize(defaults);\r\n\r\n        // tools properties\r\n        config.enabled = defaults && this.isEnabled() == this.getDefaults().isEnabled() ? undefined : this.isEnabled();\r\n        \r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * It returns the enabled property of the tool state.\r\n     */\r\n    isEnabled() {\r\n        return this.enabled;\r\n    }\r\n\r\n    /**\r\n     * It sets the enabled property of tool state.\r\n     * \r\n     * @param {*} enabled \r\n     */\r\n    setEnabled(enabled) {\r\n       this.enabled = enabled;\r\n    }\r\n\r\n    /**\r\n     * It returns the map property of the tool state.\r\n     */\r\n    getMap() {\r\n        return this.map;\r\n    }\r\n\r\n    /**\r\n     * It sets the map property of the tool state.\r\n     * The map can be set only once.\r\n     * \r\n     * @param {*} map  \r\n     */\r\n    setMap(map) {\r\n       this.map = (this.map == undefined) ? map : this.map;\r\n    }\r\n}\r\nexport default AbstractToolState;","import AbstractMapObjectDefaults from \"../../object/abstract/AbstractMapObjectDefaults\";\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass AbstractToolDefaults extends AbstractMapObjectDefaults {\n\n    /**\n     * It creates tool defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns a logical value whether the tool type is singleton.\n     */\n    isSingleton() {\n       return false; \n    }\n\n    /**\n     * By default, the tool is enabled.\n     * \n     * @param {boolean} enabled \n     */\n    isEnabled() {\n        return true;\n    }\n\n    /**\n     * It returns default config if no config is given.\n     */\n    getConfig() {\n        return {};\n    }\n}\nexport default AbstractToolDefaults;","import AbstractToolState from \"./AbstractToolState\";\r\nimport AbstractEvent from \"../../event/abstract/AbstractEvent\";\r\nimport AbstractMapObject from \"../../object/abstract/AbstractMapObject\";\r\nimport AbstractToolDefaults from \"./AbstractToolDefaults\";\r\n\r\n/**\r\n * This class provides basic tools API.\r\n * \r\n * @author Jiri Hynek\r\n */\r\nclass AbstractTool extends AbstractMapObject {\r\n\r\n    /**\r\n     * It initializes the tool.\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    /**\r\n     * It creates copy of the uninitialized tool.\r\n     * \r\n     * Override this function.\r\n     */\r\n    copy() {\r\n        return new AbstractTool(this.getProps());\r\n    }\r\n\r\n    /**\r\n     * It creates new defaults of the tool.\r\n     */\r\n    createDefaults() {\r\n        return new AbstractToolDefaults();\r\n    }\r\n\r\n    /**\r\n     * It returns default state of the tool which is used when no state is specified.\r\n     */\r\n    createState() {\r\n        return new AbstractToolState();\r\n    }\r\n\r\n    /**\r\n     * Help getter which returns a logtical value whether the tool type is singleton.\r\n     */\r\n    isSingleton() {\r\n       return this.getDefaults().isSingleton(); \r\n    }\r\n\r\n    /**\r\n     * Help getter which returns enabled property of state.\r\n     * \r\n     * Do not override this function. Use the state class instead.\r\n     */\r\n    isEnabled() {\r\n        return this.getState().isEnabled();\r\n    }\r\n\r\n    /**\r\n     * It initializes the tool before it is created.\r\n     * It processes the serialized config and sets the Geovisto map which manages the tools.\r\n     * \r\n     * This cannot be done in the tool constructor\r\n     * since the tool can be created before the Geovisto map is created.\r\n     * \r\n     * This cannot be done in the tool create function\r\n     * since there can be possible dependencies between the tools\r\n     * (the tool might depend on other tools which needs to be initialized).\r\n     * \r\n     * @param {GeovistoMap} map \r\n     * @param {any} config \r\n     */\r\n    initialize(map, config) {\r\n        // the map should not be undefined (this function is called only by GeovistoMap)\r\n        this.getState().setMap(map);\r\n\r\n        // it initializes map-related variables\r\n        this.getState().resetMapVariables(map, this.getDefaults());\r\n        \r\n        // override state by Geovisto config if specified in argument - this can happen only if:\r\n        // 1) the config of the same id was found\r\n        // 2) the tool was created as a copy of the generic tool (generic config)\r\n        this.getState().deserialize(config != undefined ? config : this.getDefaults().getConfig());\r\n    }\r\n\r\n    /**\r\n     * Help function returns map which uses this tool.\r\n     * \r\n     * Do not override this function. Use the state class instead.\r\n     * \r\n     * @returns {CombinedMap}\r\n     */\r\n    getMap() {\r\n        return this.getState().getMap();\r\n    }\r\n\r\n    /**\r\n     * It creates a tool.\r\n     * \r\n     * Override this function.\r\n     */\r\n    create() {\r\n    }\r\n\r\n    /**\r\n     * Some tools might be dynamicaly enabled/disabled.\r\n     * This function is called externally when the tool is enabled/disabled.\r\n     * \r\n     * Override this function, if needed.\r\n     * \r\n     * @param {boolean} enabled \r\n     */\r\n    setEnabled(enabled) {\r\n        if(this.isEnabled() != enabled) {\r\n            this.getState().setEnabled(enabled);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Help function which switches enabled state (enabled/disabled).\r\n     * \r\n     * Do not override this function. Use set enabled instead.\r\n     */\r\n    switchEnabled() {\r\n        // update settings\r\n        this.setEnabled(!this.enabled);\r\n    }\r\n\r\n    /**\r\n     * This function is called when a custom event is invoked.\r\n     * \r\n     * Override this function, if needed.\r\n     * \r\n     * @param {AbstractEvent} event\r\n     */\r\n    handleEvent(event) {\r\n    }\r\n}\r\nexport default AbstractTool;","import AbstractMapObject from \"./AbstractMapObject\";\n\n/**\n * This class provide functions for using map objects which can be identified by uniquie string.\n * \n * @author Jiri Hynek\n */\nclass AbstractMapObjectsManager {\n\n    /**\n     * It initializes a map objects manager.\n     */\n    constructor() {\n    }\n\n    /**\n     * The function returns available map objects.\n     * \n     * Override this function.\n     */\n    getObjects() {\n        return [];\n    }\n\n    /**\n     * The function returns the number of objects.\n     */\n    size() {\n        return this.getObjects().length;\n    }\n\n    /**\n     * The function returns true if size() is 0.\n     */\n    isEmpty() {\n        return this.getObjects().length == 0;\n    }\n\n    /**\n     * It adds object to the list of objects.\n     * \n     * Override this function.\n     * \n     * @param {AbstractMapObject} object \n     */\n    add(object) {\n    }\n\n    /**\n     * It removes object from the list of objects.\n     * \n     * Override this function.\n     * \n     * @param {AbstractMapObject} object \n     */\n    remove(object) {\n    }\n\n    /**\n     * It removes object from the list of objects.\n     * \n     * Override this function.\n     * \n     * @param {string} id \n     */\n    removeById(id) {\n    }\n\n    /**\n     * Help function which returns the list of object string labels (object types).\n     */\n    getTypes() {\n        let types = [];\n        let objects = this.getObjects();\n        if(objects != undefined) {\n            for(let i = 0; i < objects.length; i++) {\n                types.push(objects[i].getType());\n            }\n        }\n        return types;\n    }\n\n    /**\n     * Help function which returns the list of object string labels (object types).\n     */\n    getIds() {\n        let types = [];\n        let objects = this.getObjects();\n        if(objects != undefined) {\n            for(let i = 0; i < objects.length; i++) {\n                types.push(objects[i].getId());\n            }\n        }\n        return types;\n    }\n\n    /**\n     * The function returns map objects of given type.\n     * \n     * @param {string} type\n     */\n    getByType(type) {\n        let objects = this.getObjects();\n        let resultObjects = [];\n        if(objects != undefined) {\n            for(let i = 0; i < objects.length; i++) {\n                if(objects[i].getType() == type) {\n                    resultObjects.push(objects[i]);\n                }\n            }\n        }\n        return resultObjects;\n    }\n\n    /**\n     * The function returns map object of given unique identifier.\n     * \n     * @param {string} id\n     */\n    getById(id) {\n        let objects = this.getObjects();\n        if(objects != undefined) {\n            for(let i = 0; i < objects.length; i++) {\n                if(objects[i].getId() == id) {\n                    return objects[i];\n                }\n            }\n        }\n        return undefined;\n    }\n}\nexport default AbstractMapObjectsManager;","import AbstractMapManager from \"../../object/abstract/AbstractMapObjectsManager\";\n\n/**\n * This class provide functions for using tools.\n * \n * @author Jiri Hynek\n */\nclass AbstractToolsManager extends AbstractMapManager {\n\n    /**\n     * It initializes the tools manager.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns copy of the tools manager with copies of tools.\n     */\n    copy() {\n        return new AbstractToolsManager();\n    }\n}\nexport default AbstractToolsManager;","import AbstractTool from \"../abstract/AbstractTool\";\nimport AbstractToolsManager from \"../abstract/AbstractToolsManager\";\n\n/**\n * This class provide functions for using tools.\n * \n * @author Jiri Hynek\n */\nclass ToolsManager extends AbstractToolsManager {\n\n    constructor(tools) {\n        super();\n        this.tools = tools;\n    }\n\n    /**\n     * The function returns available tools.\n     */\n    getObjects() {\n        return this.tools;\n    }\n\n    /**\n     * It returns copy of the tools manager with copies of tools.\n     */\n    copy() {\n        // we use copies of predefined tools due to later multiple imports of configs\n        let toolsCopy = [];\n        let tools = this.getObjects();\n        for(let i = 0; i < tools.length; i++) {\n            toolsCopy.push(tools[i].copy());\n        }\n        return new ToolsManager(toolsCopy);\n    }\n\n    /**\n     * It adds tool to the list of tools.\n     * \n     * @param {AbstractTool} tool \n     */\n    add(tool) {\n        this.tools.push(tool);\n    }\n\n    /**\n     * It removes tool from the list of tools.\n     * \n     * @param {AbstractTool} tool \n     */\n    remove(tool) {\n        this.tools = this.tools.filter(item => item != tool);\n    }\n\n    /**\n     * It removes tool from the list of tools.\n     * \n     * @param {string} id \n     */\n    removeById(id) {\n        this.tools = this.tools.filter(item => item.getId() != id);\n    }\n}\nexport default ToolsManager;","import SidebarTool from \"./SidebarTool\";\nimport AbstractToolDefaults from \"../../model/tool/abstract/AbstractToolDefaults\";\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass SidebarToolDefaults extends AbstractToolDefaults {\n\n    /**\n     * It creates a tool defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * Only one sidebar tool should be present in the Geovisto map.\n     */\n    isSingleton() {\n       return true; \n    }\n\n    /**\n     * It returns a unique string of the tool type.\n     */\n    getType() {\n        return SidebarTool.TYPE();\n    }\n}\nexport default SidebarToolDefaults;","import SidebarToolDefaults from \"./SidebarToolDefaults\";\nimport AbstractToolState from \"../../model/tool/abstract/AbstractToolState\";\n\n/**\n * This class provide sidebar tool model.\n * \n * @author Jiri Hynek\n */\nclass SidebarToolState extends AbstractToolState {\n\n    /**\n     * It creates a tool state.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It resets state with respect to initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {SidebarToolDefaults} defaults \n     */\n    reset(defaults) {\n        super.reset(defaults);\n\n        // tabs will be added by using addTab function.\n        this.tabs = [];\n    }\n\n    /**\n     * The metod takes config and desrializes the values.\n     * \n     * @param {*} config \n     */\n    deserialize(config) {\n        super.deserialize(config);\n\n        // original tabs desriptions are needed during tool creation.\n        this.tabsDecriptions = config.tabs;\n    }\n\n    /**\n     * The method serializes the tool configuration. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {SidebarToolDefaults} defaults\n     */\n    serialize(defaults) {\n        let config = super.serialize(defaults);\n\n        // serialize sidebar tabs\n        config.tabs = [];\n        for(let i = 0; i < this.tabs.length; i++) {\n            config.tabs.push(this.tabs[i].getState().serialize())\n        }\n\n        return config;\n    }\n\n    /**\n     * It returns the tabs descriptions.\n     */\n    getTabsDescriptions() {\n        return this.tabsDecriptions;\n    }\n\n    /**\n     * It returns the sidebar.\n     */\n    getSidebar() {\n        return this.sidebar;\n    }\n\n    /**\n     * It sets sidebar.\n     * \n     * @param {*} sidebar \n     */\n    setSidebar(sidebar) {\n        this.sidebar = sidebar;\n    }\n\n    /**\n     * It returns the tabs controls.\n     */\n    getTabs() {\n        return this.tabs;\n    }\n\n    /**\n     * It sets the tabs property of the tool state.\n     * \n     * @param {*} tab\n     */\n    addTab(tab) {\n        this.tabs.push(tab)\n    }\n\n    /**\n     * It removes tab from the list of tabs.\n     * \n     * @param {*} tab \n     */\n    removeTab(tab) {\n        const index = array.indexOf(tab);\n        if (index > -1) {\n            array.splice(index, 1);\n        }\n    }\n}\nexport default SidebarToolState;","// external libs\nimport L from 'leaflet';\nimport \"leaflet-sidebar-v2\";\nimport \"leaflet-sidebar-v2/css/leaflet-sidebar.min.css\";\n\n// styles\nimport \"./styles/style.scss\";\n\nimport SidebarToolState from \"./SidebarToolState\";\nimport SidebarToolDefaults from \"./SidebarToolDefaults\";\nimport AbstractTool from \"../../model/tool/abstract/AbstractTool\";\n\n/**\n * This class provides the sidebar tool.\n *\n * @author Jiri Hynek\n */\nclass SidebarTool extends AbstractTool {\n\n    /**\n     * It creates a new tool with respect to the props.\n     *\n     * @param {*} props\n     */\n    constructor(props) {\n        super(props);\n    }\n\n    /**\n     * A unique string of the tool type.\n     */\n    static TYPE() {\n        return \"geovisto-tool-sidebar\";\n    }\n\n    /**\n     * It creates a copy of the uninitialized tool.\n     */\n    copy() {\n        return new SidebarTool(this.getProps());\n    }\n\n    /**\n     * It creates new defaults of the tool.\n     */\n    createDefaults() {\n        return new SidebarToolDefaults();\n    }\n\n    /**\n     * It returns default tool state.\n     */\n    createState() {\n        return new SidebarToolState();\n    }\n\n    /**\n     * It creates sidebar.\n     */\n    create() {\n        super.create();\n        this.createSidebar();\n        this.createTabs();\n        return this;\n    }\n\n    createSidebar() {\n        if(this.isEnabled()) {\n            let sidebar = undefined;\n            // create sidebar control and add it to the map\n            sidebar = L.control.sidebar(this.getSidebarStructure()).addTo(this.getMap().getState().getLeafletMap());\n            // update state\n            this.getState().setSidebar(sidebar);\n        }\n    }\n\n    /**\n     * It returns structure of sidebar defined with respect to the leaflet-sidebar-v2 plugin specification.\n     *\n     * See: https://github.com/noerw/leaflet-sidebar-v2\n     */\n    getSidebarStructure() {\n        return {\n            autopan: false,\n            closeButton: true,\n            //container: 'sidebar'\n            position: 'left',\n        };\n    }\n\n    /**\n     * It returns sidebar tabs.\n     */\n    getTabs() {\n        let tabs = this.getState().getTabs();\n        if(tabs == undefined) {\n            this.createTabs();\n        }\n\n        return tabs;\n    }\n\n    /**\n     * It returns sidebar tabs.\n     */\n    createTabs() {\n        // import tabs\n        if(this.getState().getTabsDescriptions() != undefined) {\n            let tabsConfigs = this.getState().getTabsDescriptions();\n            // based on config\n            let tabConfig, tool;\n            for(let i = 0; i < tabsConfigs.length; i++) {\n                tabConfig = tabsConfigs[i];\n                tool = this.getMap().getState().getTools().getById(tabConfig.tool);\n                this.createSidebarTab(tool, tabConfig);\n            }\n        } else {\n            // based on the implicit order of the tools in the list of the tools\n            let tools = this.getMap().getState().getTools().getObjects();\n            for(let i = 0; i < tools.length; i++) {\n                this.createSidebarTab(tools[i], undefined);\n            }\n        }\n    }\n\n    /**\n     * Help function which initializes and creates sidebar tab for a tool with respect to a given config.\n     *\n     * @param {*} tool\n     * @param {*} config\n     */\n    createSidebarTab(tool, config) {\n        if(tool != undefined && tool.getSidebarTabControl) {\n            // the tool implements the getSidebarTab function\n            let sidebarTabControl = tool.getSidebarTabControl();\n            if(sidebarTabControl != undefined) {\n                // render sidebar\n                sidebarTabControl.initialize(this.getState().getSidebar(), config);\n                sidebarTabControl.create();\n                // update state\n                this.getState().addTab(sidebarTabControl);\n            }\n        }\n    }\n\n}\nexport default SidebarTool;\n","/**\n * Class wraps help static function which generates DOM nodes.\n * \n * @author Jiri Hynek\n */\nclass TabDOMUtil {\n\n    /**\n     * Function generates select div node.\n     * \n     * @param {*} label \n     * @param {*} id \n     * @param {*} action \n     * @param {*} options \n     */\n    static createSelectDiv(label, id, action, options) {\n        let div = document.createElement('div');\n        if(label != null) {\n            div.appendChild(document.createTextNode(label + \": \"))\n        }\n        div.appendChild(TabDOMUtil.createSelect(id, action, options));\n        return div;\n    }\n\n    /**\n     * Function generates select node.\n     * \n     * @param {*} id \n     * @param {*} action \n     * @param {*} options \n     * @param {*} className \n     */\n    static createSelect(id, action, options, className) {\n        let select = document.createElement('select');\n        select.setAttribute(\"id\", id);\n        if(className) {\n            select.classList.add(className);\n        }\n        select.onchange = action;\n        TabDOMUtil.appendOptions(select, options);\n        return select;\n    }\n\n    /**\n     * Function genearates option nodes.\n     * \n     * @param {*} select \n     * @param {*} options \n     */\n    static appendOptions(select, options) {\n        let option;\n        for(let i = 0; i < options.length; i++) {\n            option = select.appendChild(document.createElement(\"option\"));\n            option.setAttribute(\"value\", options[i]);\n            option.innerHTML = options[i];\n        }\n    }\n\n    /**\n     * Function generates input text node.\n     * \n     * @param {*} size \n     * @param {*} className \n     */\n    static createTextInput(size, className) {\n        let input = document.createElement('input');\n        input.setAttribute(\"type\", \"text\");\n        if(size) {\n            input.setAttribute(\"size\", size);\n        }\n        if(className) {\n            input.classList.add(className);\n        }\n        return input;\n    }\n\n    /**\n     * Function generates button node.\n     * \n     * @param {*} label \n     * @param {*} action \n     */\n    static createButton(label, action, id) {\n        let btn = document.createElement('button');\n        btn.setAttribute(\"type\", \"button\");\n        btn.setAttribute(\"id\", id);\n        btn.innerHTML = label;\n        btn.onclick = action;\n        return btn;\n    }\n\n    /**\n     * Function generates label heading node.\n     * \n     * @param {*} label \n     */\n    static createSidebarHeading(label) {\n        let heading = document.createElement('strong');\n        heading.innerHTML = label;\n        return heading;\n    }\n\n\n    /*\n     * Sets multiple element attributes\n     */\n    static setAttributes(element, keyArray, valueArray){\n        if (keyArray.length == valueArray.length) {\n            for (var i = keyArray.length - 1; i >= 0; i--) {\n                element.setAttribute(keyArray[i], valueArray[i]);\n            }\n        }\n    }\n}\n\nexport default TabDOMUtil;","const ID = 'geovisto-input';\n\n/**\n * This class represents abstract sidebar input.\n *\n * This class is intended to be extended.\n *\n * @author Jiri Hynek\n */\nclass AbstractSidebarInput {\n  constructor(settings) {\n    this.action = settings.action;\n    this.input = undefined;\n  }\n\n  /**\n   * Static function returns identifier of the input type.\n   */\n  static ID() {\n    return ID;\n  }\n\n  /**\n   * It returns input element.\n   *\n   * This function is intended to be extended.\n   */\n  create() {\n    if (this.input == undefined) {\n      this.input = document.createElement('span');\n    }\n    return this.input;\n  }\n\n  /*\n   * Sets/removes attribute 'disabled' from input box.\n   */\n  setDisabled(disabled) {\n    if (this.input === undefined) return;\n    if (disabled == true) {\n      this.input.setAttribute('disabled', true);\n    }\n    if (disabled == false) {\n      this.input.removeAttribute('disabled');\n    }\n  }\n\n  /**\n   * It returns value of the input element.\n   */\n  getValue() {\n    return this.input.value;\n  }\n\n  /**\n   * It sets value of the input element.\n   *\n   * @param {*} value\n   */\n  setValue(value) {\n    this.input.value = value;\n  }\n}\nexport default AbstractSidebarInput;\n","import AbstractSidebarInput from '../AbstractSidebarInput';\r\nimport TabDOMUtil from '../../util/TabDOMUtil';\r\n\r\nconst ID = 'geovisto-input-autocomplete';\r\n\r\nconst COMPONENT_DIV_LABEL_CLASS = ID + '-label';\r\n\r\nconst COMPONENT_DIV_INPUT_CLASS = ID + '-component';\r\n\r\nconst COMPONENT_INPUT_CLASS = ID + '-value';\r\n\r\nconst COMPONENT_COMPLETION_LIST_CLASS = ID + '-popup';\r\n\r\nconst COMPONENT_COMPLETION_ITEM_CLASS = ID + '-option-m';\r\n\r\nconst COMPONENT_COMPLETION_NOT_IN_CLASS = ID + '-option-n';\r\n\r\nconst COMPONENT_COMPLETION_ACTIVE_ITEM_CLASS = ID + '-option-a';\r\n\r\n/**\r\n * This class represents labeled text sidebar input with autocomplete.\r\n *\r\n * @author Jakub Kachlik\r\n * @author Jiri Hynek (refactoring, code review)\r\n */\r\nclass AutocompleteSidebarInput extends AbstractSidebarInput {\r\n  constructor(settings) {\r\n    super(settings);\r\n\r\n    // settings\r\n    this.options = settings.options;\r\n    this.label = settings.label;\r\n    this.setData = settings.setData;\r\n\r\n    this.placeholder = settings.placeholder;\r\n    this.inputValue = settings.value;\r\n\r\n    // div elements\r\n    this.formDiv = undefined;\r\n    this.inputDiv = undefined;\r\n    this.completionListDiv = undefined;\r\n\r\n    // index of selected item in the completion list\r\n    this.selectedCompletionItem = -1;\r\n  }\r\n\r\n  /**\r\n   * Static function returns identifier of the input type.\r\n   */\r\n  static ID() {\r\n    return ID;\r\n  }\r\n\r\n  /*\r\n   * Sets/removes attribute 'disabled' from input box.\r\n   */\r\n  setDisabled(disabled) {\r\n    if (disabled == true) {\r\n      this.input.setAttribute('disabled', true);\r\n    }\r\n    if (disabled == false) {\r\n      this.input.removeAttribute('disabled');\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Changes options for the completion list.\r\n   */\r\n  changeOptions(newOptions) {\r\n    this.options = newOptions;\r\n    this.redrawMenu();\r\n  }\r\n\r\n  /*\r\n   * Divides options into the two groups (matched and not matched values) with respect to the currently selected input.\r\n   */\r\n  getCurrentOptions() {\r\n    let matchArray = [];\r\n    let notMatchArray = [];\r\n    for (let i = 0; i < this.options.length; i++) {\r\n      if (new String(this.options[i]).includes(this.input.value)) {\r\n        matchArray.push(this.options[i]);\r\n      } else {\r\n        notMatchArray.push(this.options[i]);\r\n      }\r\n    }\r\n    return { match: matchArray, other: notMatchArray };\r\n  }\r\n\r\n  /*\r\n   * Creates whole autocomplete element including autocomplete box description and listeners.\r\n   */\r\n  create() {\r\n    // create form\r\n    this.createForm();\r\n\r\n    // create listeners\r\n    this.createListeners();\r\n\r\n    return this.formDiv;\r\n  }\r\n\r\n  /*\r\n   * Creates input elements.\r\n   */\r\n  createForm() {\r\n    // div for the whole autocomplete component\r\n    this.formDiv = document.createElement('div');\r\n    this.formDiv.classList.add(ID);\r\n\r\n    // label div\r\n    let labelDiv = document.createElement('div');\r\n    labelDiv.classList.add(COMPONENT_DIV_LABEL_CLASS);\r\n    labelDiv.innerHTML = this.label;\r\n\r\n    // input div\r\n    this.inputDiv = document.createElement('div');\r\n    this.inputDiv.classList.add(COMPONENT_DIV_INPUT_CLASS);\r\n\r\n    // input\r\n    this.input = document.createElement('input');\r\n    TabDOMUtil.setAttributes(\r\n      this.input,\r\n      ['class', 'type', 'placeholder', 'type', 'value'],\r\n      [\r\n        COMPONENT_INPUT_CLASS,\r\n        'text',\r\n        this.placeholder || 'choose dimension: ',\r\n        'hidden',\r\n        this.inputValue || '',\r\n      ],\r\n    );\r\n\r\n    // construct elements\r\n    this.formDiv.appendChild(labelDiv);\r\n    this.formDiv.appendChild(this.inputDiv);\r\n    this.inputDiv.appendChild(this.input);\r\n  }\r\n\r\n  /**\r\n   * Creates event listeners and creates/removes\r\n   */\r\n  createListeners() {\r\n    var _this = this;\r\n\r\n    // when input changed, notify listeners\r\n    this.input.onchange = this.action;\r\n\r\n    // input change listener: create autocomplete and find\r\n    this.input.addEventListener('input', function (e) {\r\n      _this.createMenu();\r\n    });\r\n\r\n    // focus-in listener: create autocomplete\r\n    this.input.addEventListener('focusin', function (e) {\r\n      _this.createMenu();\r\n    });\r\n\r\n    // key-up/down listener\r\n    this.input.addEventListener(\r\n      'keydown',\r\n      function (e) {\r\n        if (_this.completionListDiv != undefined) {\r\n          let completionItems = _this.completionListDiv.children;\r\n\r\n          // remove active completion item\r\n          if (\r\n            _this.selectedCompletionItem != -1 &&\r\n            completionItems[_this.selectedCompletionItem] != undefined\r\n          ) {\r\n            completionItems[_this.selectedCompletionItem].classList.remove(\r\n              COMPONENT_COMPLETION_ACTIVE_ITEM_CLASS,\r\n            );\r\n          }\r\n\r\n          // process key codes\r\n          if (e.keyCode == 40) {\r\n            // key Arrow down -> next item (checks array overflow)\r\n            _this.selectedCompletionItem =\r\n              (_this.selectedCompletionItem + 1) % completionItems.length;\r\n            e.preventDefault();\r\n          } else if (e.keyCode == 38) {\r\n            // key Arrow up -> previous item (checks array overflow)\r\n            if (_this.selectedCompletionItem == -1) {\r\n              _this.selectedCompletionItem = 0; // initial move\r\n            }\r\n            _this.selectedCompletionItem =\r\n              (_this.selectedCompletionItem + completionItems.length - 1) % completionItems.length;\r\n            e.preventDefault();\r\n          } else if (e.keyCode == 13 && _this.selectedCompletionItem != -1) {\r\n            // key Enter\r\n            this.value = completionItems[_this.selectedCompletionItem].textContent;\r\n            _this.completionListDiv.remove();\r\n            _this.selectedCompletionItem != -1;\r\n            if (_this.setData) {\r\n              _this.setData(this.value);\r\n            } else {\r\n              // input on change event needs to be invoked manualy in this case\r\n              this.dispatchEvent(new Event('change'));\r\n            }\r\n          } else if (e.keyCode == 27 || e.keyCode == 9) {\r\n            // key Escape or Tab\r\n            _this.completionListDiv.remove();\r\n            _this.selectedCompletionItem != -1;\r\n          }\r\n\r\n          // set new active item\r\n          if (completionItems[_this.selectedCompletionItem] != undefined) {\r\n            completionItems[_this.selectedCompletionItem].classList.add(\r\n              COMPONENT_COMPLETION_ACTIVE_ITEM_CLASS,\r\n            );\r\n          }\r\n\r\n          return false;\r\n        }\r\n      },\r\n      false,\r\n    );\r\n\r\n    // click litener: click outside the input\r\n    document.addEventListener('click', function (e) {\r\n      // note: there is one listener for every input\r\n      if (_this.completionListDiv != undefined && e.target != _this.input) {\r\n        _this.completionListDiv.remove();\r\n        _this.selectedCompletionItem != -1;\r\n      }\r\n    });\r\n  }\r\n\r\n  redrawMenu() {\r\n    this.createMenu();\r\n  }\r\n\r\n  /*\r\n   * Creates and open MatchItems in PopUpList and set value according chosen input.\r\n   */\r\n  createMenu() {\r\n    var _this = this;\r\n\r\n    // if PopUpList already exist delete old one\r\n    if (this.completionListDiv != undefined) {\r\n      this.completionListDiv.remove();\r\n    }\r\n\r\n    // create completion list\r\n    this.completionListDiv = document.createElement('div');\r\n    this.completionListDiv.classList.add(COMPONENT_COMPLETION_LIST_CLASS);\r\n\r\n    // help function which creates completion item\r\n    let createCompletionItem = function (label, className) {\r\n      // create item\r\n      let completionItemDiv = document.createElement('div');\r\n      completionItemDiv.innerHTML = label;\r\n      completionItemDiv.classList.add(className);\r\n\r\n      // add it to completion list div\r\n      _this.completionListDiv.appendChild(completionItemDiv);\r\n\r\n      // on click listener: the item has been selected\r\n      completionItemDiv.addEventListener('click', function (e) {\r\n        _this.input.value = completionItemDiv.textContent;\r\n        completionItemDiv.parentElement.remove();\r\n        if (_this.setData) {\r\n          _this.setData(completionItemDiv.textContent);\r\n        } else {\r\n          // input on change event needs to be invoked manualy in this case\r\n          _this.input.dispatchEvent(new Event('change'));\r\n        }\r\n      });\r\n    };\r\n\r\n    // create new completion item for every matched and not matched path\r\n    var currentOptions = this.getCurrentOptions();\r\n    currentOptions.match.forEach((element) =>\r\n      createCompletionItem(element, COMPONENT_COMPLETION_ITEM_CLASS),\r\n    );\r\n    currentOptions.other.forEach((element) =>\r\n      createCompletionItem(element, COMPONENT_COMPLETION_NOT_IN_CLASS),\r\n    );\r\n\r\n    // append completion list\r\n    this.inputDiv.appendChild(this.completionListDiv);\r\n\r\n    // reset selection\r\n    _this.selectedCompletionItem = -1;\r\n  }\r\n}\r\nexport default AutocompleteSidebarInput;\r\n","import AbstractSidebarInput from \"../AbstractSidebarInput\";\nimport AutocompleteSidebarInput from \"../input/AutocompleteSidebarInput\";\n\nconst ID = \"geovisto-input-filter-autocomplete\";\n\nconst COMPONENT_DIV_CLASS = ID;\n/**\n * This class represents sidebar input composed of three autocomplete inputs used for filters.\n * \n * @author Jakub Kachlik\n * @author Jiri Hynek (refactoring, code review)\n */\nclass FilterAutocompleteSidebarInput extends AbstractSidebarInput {\n\n    constructor(settings) {\n        super(settings);\n\n        // model\n        this.dataModel = settings.data;\n        this.opModel = settings.ops;\n        this.valModel = settings.vals;\n\n        // inputs\n        this.dataInput = undefined;\n        this.opInput = undefined;\n        this.valInput = undefined;\n    } \n\n    static ID(){\n        return ID;\n    }\n\n    create() {\n        if(this.input == undefined) {\n            // create parent div\n            this.input = document.createElement(\"div\");\n            this.input.classList.add(COMPONENT_DIV_CLASS);\n\n            // initialize filter inputs\n            this.valInput = new AutocompleteSidebarInput({ label: \"Value\", options: [], action: this.valModel.action });\n            this.opInput = new AutocompleteSidebarInput({ label: \"Operation\", options: this.opModel.options, action: this.opModel.action });                        \n            this.dataInput = new AutocompleteSidebarInput({ label: \"Data\", options: this.dataModel.options, action: this.dataModel.action });\n\n            // create elements of filter inputs and add them to parent div\n            this.input.appendChild(this.dataInput.create());\n            this.input.appendChild(this.opInput.create());\n            this.input.appendChild(this.valInput.create());\n        }\n\n        return this.input;\n    }\n\n    /**\n     * It returns values of the inputs.\n     */\n    getValue() {\n        return {\n            data: this.dataInput.getValue(),\n            op: this.opInput.getValue(),\n            val: this.valInput.getValue(),\n        };\n    }\n\n    /**\n     * It sets values of the inputs.\n     * \n     * @param {*} value \n     */\n    setValue(value) {\n        this.dataInput.setValue(value.data);\n        this.opInput.setValue(value.op);\n        this.valInput.setValue(value.val);\n    }\n}\nexport default FilterAutocompleteSidebarInput","import AbstractSidebarInput from '../AbstractSidebarInput';\n\nconst ID = 'geovisto-input-text';\n\n/**\n * This class represents basic text sidebar input.\n *\n * @author Jiri Hynek\n */\nclass TextSidebarInput extends AbstractSidebarInput {\n  constructor(settings) {\n    super(settings);\n    this.value = settings.value;\n  }\n\n  /**\n   * Static function returns identifier of the input type.\n   */\n  static ID() {\n    return ID;\n  }\n\n  /**\n   * It returns input element.\n   */\n  create() {\n    if (this.input == undefined) {\n      this.input = document.createElement('input');\n      this.input.setAttribute('type', 'text');\n      this.input.onchange = this.action;\n      if (this.value) this.input.value = this.value;\n    }\n    return this.input;\n  }\n\n  /**\n   * It returns value of the input element.\n   */\n  getValue() {\n    return this.input.value;\n  }\n\n  /**\n   * It sets value of the input element.\n   *\n   * @param {*} value\n   */\n  setValue(value) {\n    this.input.value = value;\n  }\n}\nexport default TextSidebarInput;\n","import AbstractSidebarInput from '../AbstractSidebarInput';\r\n\r\nconst ID = 'geovisto-input-text-area-labeled';\r\n\r\n/**\r\n * This class represents basic text sidebar input.\r\n *\r\n * @author Andrej Tlcina\r\n */\r\nclass LabeledTextAreaSidebarInput extends AbstractSidebarInput {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.label = settings.label;\r\n    this.value = settings.value;\r\n    this.div = undefined;\r\n  }\r\n\r\n  /**\r\n   * Static function returns identifier of the input type.\r\n   */\r\n  static ID() {\r\n    return ID;\r\n  }\r\n\r\n  /**\r\n   * It returns input element.\r\n   */\r\n  create() {\r\n    if (this.div == undefined) {\r\n      this.input = document.createElement('textarea');\r\n      // create div block\r\n      this.div = document.createElement('div');\r\n      // append label\r\n      if (this.label != undefined) {\r\n        this.div.appendChild(document.createTextNode(this.label + ': '));\r\n      }\r\n\r\n      if (this.value) {\r\n        this.input.value = this.value;\r\n      }\r\n\r\n      // append input element\r\n      this.div.appendChild(this.input);\r\n\r\n      this.input.onchange = this.action;\r\n    }\r\n    return this.div;\r\n  }\r\n\r\n  /**\r\n   * It returns value of the input element.\r\n   */\r\n  getValue() {\r\n    return this.input.value;\r\n  }\r\n\r\n  /**\r\n   * It sets value of the input element.\r\n   *\r\n   * @param {*} value\r\n   */\r\n  setValue(value) {\r\n    this.input.value = value;\r\n  }\r\n}\r\nexport default LabeledTextAreaSidebarInput;\r\n","import TextSidebarInput from \"./TextSidebarInput\";\n\nconst ID = \"geovisto-input-text-labeled\";\n\n/**\n * This class represents labeled text sidebar input.\n * \n * @author Jiri Hynek\n */\nclass LabeledTextSidebarInput extends TextSidebarInput {\n\n    constructor(settings) {\n        super(settings);\n        this.label = settings.label;\n        this.div = undefined;\n    }\n\n    /**\n     * Static function returns identifier of the input type.\n     */\n    static ID() {\n        return ID;\n    }\n\n    /**\n     * It returns input element.\n     */\n    create() {\n        if(this.div == undefined) {\n            // create input element\n            super.create();\n\n            // create div block\n            this.div = document.createElement(\"div\");\n\n            // append label\n            if(this.label != undefined) {\n                this.div.appendChild(document.createTextNode(this.label + \": \"))\n            }\n\n            // append input element\n            this.div.appendChild(this.input);\n        }\n        \n        return this.div;\n    }\n\n}\nexport default LabeledTextSidebarInput;","import AbstractSidebarInput from '../input/TextSidebarInput';\n\nconst ID = 'geovisto-input-select';\n\n/**\n * This class represents basic select sidebar input composed of options.\n *\n * @author Jiri Hynek\n */\nclass SelectSidebarInput extends AbstractSidebarInput {\n  constructor(settings) {\n    super(settings);\n    this.options = settings.options;\n    this.value = settings.value;\n  }\n\n  /**\n   * Static function returns identifier of the input type\n   */\n  static ID() {\n    return ID;\n  }\n\n  /**\n   * It returns select element.\n   */\n  create() {\n    if (this.element == undefined) {\n      // create select element\n      this.element = document.createElement('select');\n      this.element.onchange = this.action;\n      // append options\n      let option;\n      for (let i = 0; i < this.options.length; i++) {\n        option = this.element.appendChild(document.createElement('option'));\n        if (typeof this.options[i] === 'object' && this.options[i] !== null) {\n          option.setAttribute('value', this.options[i].value);\n          option.innerHTML = this.options[i].label;\n          option.selected = Boolean(this.options[i].selected);\n        } else {\n          option.setAttribute('value', this.options[i]);\n          option.innerHTML = this.options[i];\n        }\n      }\n      if (this.value) this.element.value = this.value;\n    }\n    return this.element;\n  }\n\n  /*\n   * Sets/removes attribute 'disabled' from input box.\n   */\n  setDisabled(disabled) {\n    if (this.element === undefined) return;\n    if (disabled == true) {\n      this.element.setAttribute('disabled', true);\n    }\n    if (disabled == false) {\n      this.element.removeAttribute('disabled');\n    }\n  }\n\n  /**\n   * It returns value of the select element.\n   */\n  getValue() {\n    return this.element.value;\n  }\n\n  /**\n   * It sets value of the select element.\n   *\n   * @param {*} value\n   */\n  setValue(value) {\n    this.element.value = value;\n  }\n}\nexport default SelectSidebarInput;\n","import SelectSidebarInput from \"./SelectSidebarInput\";\n\nconst ID = \"geovisto-input-select-labeled\";\n\n/**\n * This class represents basic select sidebar input composed of options.\n * \n * @author Jiri Hynek\n */\nclass LabeledSelectSidebarInput extends SelectSidebarInput {\n\n    constructor(settings) {\n        super(settings);\n        this.label = settings.label;\n        this.div = undefined;\n    }\n    \n    /**\n     * Static function returns identifier of the input type\n     */\n    static ID() {\n        return ID;\n    }\n\n    /**\n     * It returns select element.\n     */\n    create() {\n        if(this.div == undefined) {\n            // create select element\n            super.create();\n\n            // create div block\n            this.div = document.createElement(\"div\");\n\n            // append label\n            if(this.label != undefined) {\n                this.div.appendChild(document.createTextNode(this.label + \": \"))\n            }\n\n            // append select element\n            this.div.appendChild(this.element);\n        }\n        \n        return this.div;\n    }\n}\nexport default LabeledSelectSidebarInput;","import AbstractSidebarInput from \"../AbstractSidebarInput\";\n\nconst ID = \"geovisto-input-filter-select\";\n\nconst COMPONENT_DIV_CLASS = ID;\n\n/**\n * This class represents sidebar input composed of three selects used for filters.\n * \n * @author Jiri Hynek\n */\nclass FilterSelectSidebarInput extends AbstractSidebarInput {\n\n    constructor(settings) {\n        super(settings);\n\n        // model\n        this.dataModel = settings.data;\n        this.opModel = settings.ops;\n\n        // inputs\n        this.dataInput = undefined;\n        this.opInput = undefined;\n        this.valInput = undefined;\n    }\n    \n    /**\n     * Static function returns identifier of the input type\n     */\n    static ID() {\n        return ID;\n    }\n\n    /**\n     * It returns select element.\n     */\n    create() {\n        if(this.input == undefined) {\n            // create inline container\n            this.input = document.createElement(\"div\");\n            this.input.classList.add(COMPONENT_DIV_CLASS);\n            this.valInput = this.createInputElement();\n            this.opInput = this.createSelectElement(function() { /* do nothing */ }, this.opModel.options);\n            this.dataInput = this.createSelectElement(function(){ /* TODO: update options of other inputs */}, this.dataModel.options);\n\n            // data select element\n            this.input.appendChild(this.dataInput);\n\n            // data op element\n            this.input.appendChild(this.opInput);\n\n            // data val element\n            this.input.appendChild(this.valInput);\n        }\n        return this.input;\n    }\n    \n    /**\n     * Help static function which creates select element.\n     * \n     * @param {*} action \n     * @param {*} options \n     */\n    createSelectElement(action, options) {\n        // create select element\n        let select = document.createElement('select');\n        select.onchange = action;\n        // append options\n        let option;\n        for(let i = 0; i < options.length; i++) {\n            option = select.appendChild(document.createElement(\"option\"));\n            option.setAttribute(\"value\", options[i]);\n            option.innerHTML = options[i];\n        }\n        return select;\n    }\n\n    /**\n     * Help static function which creates select element.\n     * \n     * @param {*} action \n     * @param {*} options \n     */\n    createInputElement() {\n        // create input element\n        let input = document.createElement('input');\n        input.setAttribute(\"type\", \"text\");\n        input.setAttribute(\"size\", 10);\n        return input\n    }\n\n    /**\n     * It returns values of the inputs.\n     */\n    getValue() {\n        return {\n            data: this.dataInput.value,\n            op: this.opInput.value,\n            val: this.valInput.value,\n        };\n    }\n\n    /**\n     * It sets values of the inputs.\n     * \n     * @param {*} value \n     */\n    setValue(value) {\n        this.dataInput.value = value.data;\n        this.opInput.value = value.op;\n        this.valInput.value = value.val;\n    }\n}\nexport default FilterSelectSidebarInput;","import AbstractSidebarInput from './AbstractSidebarInput';\nimport TextSidebarInput from './input/TextSidebarInput';\nimport LabeledTextAreaSidebarInput from './input/LabeledTextAreaSidebarInput';\nimport LabeledTextSidebarInput from './input/LabeledTextSidebarInput';\nimport SelectSidebarInput from './select/SelectSidebarInput';\nimport LabeledSelectSidebarInput from './select/LabeledSelectSidebarInput';\nimport FilterSelectSidebarInput from './filter/FilterSelectSidebarInput';\nimport FilterAutocompleteSidebarInput from './filter/FilterAutocompleteSidebarInput';\nimport AutocompleteSidebarInput from './input/AutocompleteSidebarInput';\n/**\n * Factory for sidebar inputs.\n *\n * @author Jiri Hynek\n */\nclass SidebarInputFactory {\n  /**\n   * Static function creates new sidebar input of given identifier.\n   *\n   * @param {*} id\n   */\n  static createSidebarInput(id, settings) {\n    let element = null;\n    if (id == TextSidebarInput.ID()) {\n      element = new TextSidebarInput(settings);\n    } else if (id == LabeledTextSidebarInput.ID()) {\n      element = new LabeledTextSidebarInput(settings);\n    } else if (id == LabeledTextAreaSidebarInput.ID()) {\n      element = new LabeledTextAreaSidebarInput(settings);\n    } else if (id == SelectSidebarInput.ID()) {\n      element = new SelectSidebarInput(settings);\n    } else if (id == LabeledSelectSidebarInput.ID()) {\n      element = new LabeledSelectSidebarInput(settings);\n    } else if (id == FilterSelectSidebarInput.ID()) {\n      element = new FilterSelectSidebarInput(settings);\n    } else if (id == AutocompleteSidebarInput.ID()) {\n      element = new AutocompleteSidebarInput(settings);\n    } else if (id == FilterAutocompleteSidebarInput.ID()) {\n      element = new FilterAutocompleteSidebarInput(settings);\n    } else {\n      element = new AbstractSidebarInput(settings);\n    }\n    return element;\n  }\n}\n\nexport default SidebarInputFactory;\n","import AbstractMapObjectDefaults from \"../../../../model/object/abstract/AbstractMapObjectDefaults\";\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass AbstractTabControlDefaults extends AbstractMapObjectDefaults {\n\n    /**\n     * It creates map defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns a unique type string of the tool.\n     */\n    getType() {\n        return \"geovisto-sidebar-tab\";\n    }\n\n    /**\n     * It returns whether the tab control is enabled.\n     */\n    isEnabled() {\n        return true;\n    }\n\n    /**\n     * It returns name of tab pane.\n     */\n    getName() {\n        return \"Custom tab\";\n    }\n\n    /**\n     * It returns the icon of tab pane.\n     */\n    getIcon() {\n        return '<i class=\"fa fa-file\"></i>';\n    }\n\n    /**\n     * It returns whether the tab control contains a check button used to enable/disable the tool.\n     */\n    getCheckButton() {\n        return true;\n    }\n\n    /**\n     * It returns the default config.\n     */\n    getConfig() {\n        return {};\n    }\n}\nexport default AbstractTabControlDefaults;","import AbstractTabControlDefaults from \"../../sidebar/model/control/AbstractTabControlDefaults\";\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass FiltersToolTabControlDefaults extends AbstractTabControlDefaults {\n\n    /**\n     * It initializes sidebar tab control defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns name of tab pane.\n     */\n    getName() {\n        return \"Filters\";\n    }\n\n    /**\n     * It returns the icon of the tab pane.\n     */\n    getIcon() {\n        return '<i class=\"fa fa-filter\"></i>';\n    }\n\n    /**\n     * It returns the element class.\n     */\n    getFilterRuleElementClass() {\n        return this.getMapObject().getType() + \"-filter\";\n    }\n}\nexport default FiltersToolTabControlDefaults;\n","import AbstractMapObjectState from \"../../../../model/object/abstract/AbstractMapObjectState\";\nimport AbstractTabControlDefaults from \"./AbstractTabControlDefaults\";\n\n/**\n * This class manages the state of the sidebar tab.\n * It wraps the state since the sidebar tab can work with state objects which needs to be explicitly serialized.\n * \n * @author Jiri Hynek\n */\nclass AbstractTabControlState extends AbstractMapObjectState {\n\n    /**\n     * It creates a tab control state.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It initializes the state using the initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {*} props \n     * @param {*} defaults \n     */\n    initialize(props, defaults) {\n        // store the tool which provides this sidebar tab\n        // props.tool should not be undefined\n        this.setTool(props.tool);\n\n        super.initialize(props, defaults);\n    }\n\n    /**\n     * It resets state with respect to initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {AbstractTabControlDefaults} defaults \n     */\n    reset(defaults) {\n        super.reset(defaults);\n        \n        let props = this.getProps();\n\n        // set remaining properties if not set\n        this.setName(props.name == undefined && defaults ? defaults.getName() : props.name);\n        this.setIcon(props.icon == undefined && defaults ? defaults.getIcon() : props.icon);\n        this.setCheckButton(props.checkButton == undefined && defaults ? defaults.getCheckButton() : props.checkButton);\n        this.setEnabled(props.enabled == undefined && defaults ? defaults.isEnabled() : props.enabled);\n    }\n\n    /**\n     * The function takes config and desrializes the values.\n     * \n     * @param {*} tabControl \n     * @param {*} config \n     */\n    deserialize(tabControl, config) {\n        if(config.enabled != undefined) this.setEnabled(config.enabled);\n        if(config.name != undefined) this.setName(config.name);\n        if(config.icon != undefined) this.setIcon(config.icon);\n        if(config.checkButton != undefined) this.setCheckButton(config.checkButton);\n\n        this.deserializeFragments(tabControl, config);\n    }\n\n    /**\n     * The function takes config and deserializes the tab fragments.\n     * \n     * @param {AbstractTabControl} tabControl \n     * @param {*} config \n     */\n    deserializeFragments(tabControl, config) {\n        let fragments = [];\n        let fragment;\n        let tool;\n        // process tab fragments\n        if(config.fragments) {\n            let fragmentConfig;\n            for(let i = 0; i != config.fragments.length; i++) {\n                fragmentConfig = config.fragments[i];\n                if(fragmentConfig.tool) {\n                    tool = this.getTool().getMap().getState().getTools().getById(fragmentConfig.tool);\n                    if(tool && tool.getSidebarTabFragment) {\n                        fragment = tool.getSidebarTabFragment();\n                        if(fragment && fragment.isChild(tabControl)) {\n                            fragment.initialize(tabControl, fragmentConfig);\n                            fragments.push(fragment);\n                        }\n                    }\n                }\n            }\n        } else {\n            // try to look for fragments if not specified in config\n            let tools = this.getTool().getMap().getState().getTools().getObjects();\n            for(let i = 0; i < tools.length; i++) {\n                if(tools[i].getSidebarTabFragment) {\n                    fragment = tools[i].getSidebarTabFragment();\n                    if(fragment && fragment.isChild(tabControl)) {\n                        fragment.initialize(tabControl, undefined);\n                        fragments.push(fragment);\n                    }\n                }\n            }\n        }\n\n        this.setTabFragments(fragments.length > 0 ? fragments : undefined);\n    }\n\n    /**\n     * The method serializes the sidebar tab control configuration.\n     * Optionally, a serialed value can be let undefined if it equals the default value.\n     * \n     * @param {*} defaults \n     */\n    serialize(defaults) {\n        // do not serialize id and type - it is not necessary for deserialization\n\n        let config = {\n            tool: this.getTool().getId(),\n            enabled: defaults && this.enabled == defaults.isEnabled() ? undefined : this.enabled,\n            name: defaults && this.name == defaults.isEnabled() ? undefined : this.name,\n            icon: defaults && this.icon == defaults.isEnabled() ? undefined : this.icon,\n            checkButton: defaults && this.checkButton == defaults.isEnabled() ? undefined : this.checkButton\n        };\n\n        // serialize tab fragments\n        if(this.fragments != undefined) {\n            config.fragments = [];\n            for(let i = 0; i != this.fragments.length; i++) {\n                config.fragments.push(this.fragments[i].getState().serialize(this.fragments[i].getDefaults()));\n            }\n        }\n\n        return config;\n    }\n\n    /**\n     * It returns the tool property of the sidebar tab control state.\n     */\n    getTool() {\n        return this.tool;\n    }\n\n    /**\n     * It sets the tool property of the sidebar tab control state.\n     * It can be set only once.\n     * \n     * @param {*} tool \n     */\n    setTool(tool) {\n       this.tool = (this.tool == undefined) ? tool : this.tool;\n    }\n\n    /**\n     * It returns the enabled property of the sidebar tab control state.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * It sets the enabled property of the sidebar tab control state.\n     * \n     * @param {*} enabled \n     */\n    setEnabled(enabled) {\n       this.enabled = enabled;\n    }\n\n    /**\n     * It returns the name property of the sidebar tab control state.\n     */\n    getName() {\n        return this.name;\n    }\n\n    /**\n     * It sets the name property of the sidebar tab control state.\n     * \n     * @param {*} name \n     */\n    setName(name) {\n       this.name = name;\n    }\n\n    /**\n     * It returns the icon property of the sidebar tab control state.\n     */\n    getIcon() {\n        return this.icon;\n    }\n\n    /**\n     * It sets the icon property of the sidebar tab control state.\n     * \n     * @param {*} icon\n     */\n    setIcon(icon) {\n       this.icon = icon;\n    }\n\n    /**\n     * It returns the checkButton property of the sidebar tab control state.\n     */\n    hasCheckButton() {\n        return this.checkButton;\n    }\n\n    /**\n     * It sets the checkButton property of the sidebar tab control state.\n     * \n     * @param {*} checkButton \n     */\n    setCheckButton(checkButton) {\n       this.checkButton = checkButton;\n    }\n\n    /**\n     * It returns the sidebar property of the sidebar tab control state.\n     */\n    getSidebar() {\n        return this.sidebar;\n    }\n\n    /**\n     * It sets the sidebar property of the sidebar tab control state.\n     * It can be set only once.\n     * \n     * @param {*} sidebar \n     */\n    setSidebar(sidebar) {\n        this.sidebar = (this.sidebar == undefined) ? sidebar : this.sidebar;\n    }\n\n    /**\n     * It returns the tabPane property of the sidebar tab control state.\n     */\n    getTabPane() {\n        return this.tabPane;\n    }\n\n    /**\n     * It sets the tabPane property of the sidebar tab control state.\n     * It can be set only once.\n     * \n     * @param {*} tabPane \n     */\n    setTabPane(tabPane) {\n       this.tabPane = (this.tabPane == undefined) ? tabPane : this.tabPane;\n    }\n\n    /**\n     * It returns the fragments property of the tool state.\n     */\n    getTabFragments() {\n        return this.fragments;\n    }\n\n    /**\n     * It sets the fragments property of the tool state.\n     * \n     * @param {*} fragments \n     */\n    setTabFragments(fragments) {\n        this.fragments = fragments;\n    }\n}\nexport default AbstractTabControlState;","import AbstractTabControlState from \"../../sidebar/model/control/AbstractTabControlState\";\n\n/**\n * This class manages the state of the sidebar tab.\n * It wraps the state since the sidebar tab can work with state objects which needs to be explicitly serialized.\n * \n * @author Jiri Hynek\n */\nclass FiltersToolTabControlState extends AbstractTabControlState {\n\n    /**\n     * It creates a tab control state.\n     */\n    constructor() {\n        super();\n    }\n}\nexport default FiltersToolTabControlState;","import * as d3 from \"d3\";\nimport AbstractMapObject from \"../../../../model/object/abstract/AbstractMapObject\";\nimport AbstractTabControlState from \"./AbstractTabControlState\";\nimport AbstractTabControlDefaults from \"./AbstractTabControlDefaults\";\n\nconst C_sidebar_header_class = \"leaflet-sidebar-header\";\nconst C_sidebar_tab_content_class = \"leaflet-sidebar-tab-content\";\nconst C_enabled_class = \"enabled\";\nconst C_checked_class = \"checked\";\n\n/**\n * This class provides controls for sidebar tabs.\n * It contains enable button which enables the sidebar and tool.\n *\n * This class is intended to be extended.\n *\n * @author Jiri Hynek\n */\nclass AbstractTabControl extends AbstractMapObject {\n\n    constructor(props) {\n        super(props);\n    }\n\n    /**\n     * It creates new defaults of the tab control.\n     */\n    createDefaults() {\n        return new AbstractTabControlDefaults();\n    }\n\n    /**\n     * It creates the tab control state.\n     */\n    createState() {\n        return new AbstractTabControlState();\n    }\n\n    /**\n     * Help function which returns the tool.\n     */\n    getTool() {\n        return this.getState().getTool();\n    }\n\n    /**\n     * It initializes the tab control.\n     *\n     * @param {*} sidebar\n     * @param {*} config\n     */\n    initialize(sidebar, config) {\n        // the sidebar which stores the tab\n        // the sidebar should not be undefined (this function is called only by sidebar)\n        this.getState().setSidebar(sidebar);\n\n        // copy existing config if exists or use the default one\n        this.getState().deserialize(this, config != undefined ? JSON.parse(JSON.stringify(config)) : this.getDefaults().getConfig());\n\n        return this;\n    }\n\n    /**\n     * Creates sidebar tab.\n     *\n     */\n    create() {\n        let state = this.getState();\n        if(state.getSidebar() != undefined && state.isEnabled()) {\n            // render sidebar tab pane\n            state.getSidebar().addPanel(this.getTabStructure());\n\n            // arrange DOM elements after they are rendered\n            this.postCreate();\n        }\n        return this;\n    }\n\n    /**\n     * It returns the sidebar tab structure defined with respect to the leaflet-sidebar-v2 plug-in.\n     *\n     * See: https://github.com/noerw/leaflet-sidebar-v2\n     *\n     * This function can be extended.\n     */\n    getTabStructure() {\n        return {\n            id: this.getState().getId(),\n            tab: this.getState().getIcon(),\n            // the content of the pane needs to added after the render since it can contain event listeners\n            pane: '<div class=\"' + C_sidebar_tab_content_class + '\"></div>',\n            title: ' ' + this.getState().getName(),\n            position: 'top'\n        };\n    }\n\n    postCreate() {\n        // get rendered sidebar tab\n        let tabElement = document.getElementById(this.getState().getId());\n\n        // create sidebar tab content\n        let tabContent = tabElement.getElementsByClassName(C_sidebar_tab_content_class)[0];\n        tabContent.appendChild(this.getTabContent());\n\n        // append tab fragments if defined\n        let tabFragments = this.getState().getTabFragments();\n        if(tabFragments) {\n            for(let i = 0; i < tabFragments.length; i++) {\n                tabContent.appendChild(tabFragments[i].getTabContent());\n            }\n        }\n\n        // enable/disable button\n        let tabHeader = tabElement.getElementsByClassName(C_sidebar_header_class)[0];\n        if(this.getState().hasCheckButton()) {\n            // create enable button in sidebar tab header\n            let tabEnableBtn = document.createElement(\"input\");\n            tabEnableBtn.setAttribute(\"type\", \"checkbox\");\n            tabEnableBtn.setAttribute(\"id\", this.getState().getId() + '-enable-btn');\n            var _this = this;\n            tabEnableBtn.onclick = function() {\n                // onclick event handler enables/disables its items\n                _this.setChecked(this.checked);\n            }\n            tabHeader.insertBefore(tabEnableBtn, tabHeader.firstChild);\n\n            if(this.getState().getTool().isEnabled()) {\n                tabEnableBtn.setAttribute(C_checked_class, \"true\");\n            }\n        }\n\n        //  initial state\n        if(this.getState().getTool().isEnabled()) {\n            tabHeader.classList.add(C_enabled_class);\n            tabElement.classList.add(C_enabled_class);\n        } else {\n            // disable inputs\n            d3.select(tabContent).selectAll(\"input\").attr(\"disabled\", \"true\");\n            d3.select(tabContent).selectAll(\"select\").attr(\"disabled\", \"true\");\n            d3.select(tabContent).selectAll(\"button\").attr(\"disabled\", \"true\");\n        }\n    }\n\n    /**\n     * It returns tab pane which will be placed in sidebar tab.\n     *\n     * This function can be extended.\n     */\n    getTabContent() {\n        return document.createTextNode(\"This is tab content\");\n    }\n\n    /**\n     * Functions changes layer state to enabled/disabled.\n     *\n     * @param {*} checked\n     */\n    setChecked(checked) {\n        let tool = this.getState().getTool();\n        if(checked != tool.isEnabled()) {\n            // enable/disable sidebar tab\n            let sidebarTab = d3.select(\"#\" + this.getState().getId());\n            if(sidebarTab != undefined) {\n                // emhasize tab\n                sidebarTab.classed(C_enabled_class, checked);\n                sidebarTab.select(\".\" + C_sidebar_header_class).classed(C_enabled_class, checked);\n                // enable sidebar inputs\n                sidebarTab.select(\".\" + C_sidebar_tab_content_class).selectAll(\"input\").attr(\"disabled\", checked ? null : \"true\");\n                sidebarTab.select(\".\" + C_sidebar_tab_content_class).selectAll(\"select\").attr(\"disabled\", checked ? null : \"true\");\n                sidebarTab.select(\".\" + C_sidebar_tab_content_class).selectAll(\"button\").attr(\"disabled\", checked ? null : \"true\");\n            }\n\n            // switch state\n            this.setTabContentChecked(checked);\n\n            // update the tool state\n            tool.setEnabled(checked);\n        }\n    }\n\n    /**\n     * Changes the state of the tool which is controled by this sidebar tab.\n     *\n     * This function can be extended.\n     *\n     * @param {*} checked\n     */\n    setTabContentChecked(checked) {\n    }\n\n}\nexport default AbstractTabControl;\n","// styles\nimport \"./styles/style.scss\";\n\nimport TabDOMUtil from \"../../../util/TabDOMUtil\";\n//import FilterSelectSidebarInput from \"../../inputs/filter/FilterSelectSidebarInput\";\nimport FilterAutocompleteSidebarInput from \"../../../inputs/filter/FilterAutocompleteSidebarInput\";\nimport SidebarInputFactory from \"../../../inputs/SidebarInputFactory\";\nimport FiltersToolTabControlDefaults from \"./FiltersToolTabControlDefaults\";\nimport FiltersToolTabControlState from \"./FiltersToolTabControlState\";\nimport AbstractTabControl from \"../../sidebar/model/control/AbstractTabControl\";\n\n/**\n * This class provides controls for management of filters sidebar tabs.\n * \n * TODO: exclude defaults and state variables\n * \n * @author Jiri Hynek\n */\nclass FiltersToolTabControl extends AbstractTabControl {\n\n    constructor(props) {\n        super(props);\n        \n        // help variables (TODO: move to the tab control state)\n        this.mapData = this.getTool().getMap().getState().getMapData();\n        this.data = this.mapData.getData();\n        this.dataDomainLabels = this.mapData.getDataDomainLabels();\n        \n        this.filterManager = this.getTool().getState().getFiltersManager();\n        this.operationLabels = this.filterManager.getOperationLabels();\n\n        this.tabContent = undefined;\n        this.btnGroup = undefined;\n        this.inputs = [];\n        this.counter = 0;\n    }\n\n    /**\n     * It creates new defaults of the tab control.\n     */\n    createDefaults() {\n        return new FiltersToolTabControlDefaults();\n    }\n\n    /**\n     * It creates new state of the tab control.\n     */\n    createState() {\n        return new FiltersToolTabControlState();\n    }\n\n    /**\n     * It returns tab content.\n     * \n     */\n    getTabContent() {\n        if(this.tabContent == undefined) {\n            // tab pane\n            this.tabContent = document.createElement('div');\n\n            // btn group\n            this.btnGroup = this.tabContent.appendChild(document.createElement('div'));\n            this.btnGroup.setAttribute(\"class\", \"filterButtons\");\n\n            // append add button\n            var _this = this;\n            this.btnGroup.appendChild(TabDOMUtil.createButton(\"<i class=\\\"fa fa-plus-circle\\\"></i>\", function() { FiltersToolTabControl.addSelectItem(_this) }, \"plusBtn\" ));\n\n            // append apply button\n            this.btnGroup.appendChild(TabDOMUtil.createButton(\"Apply\", function() {\n                _this.inputChangedAction()\n            },\"applyBtn\"));\n\n            // import inputs according to configuration\n            this.setFilterRules(this.getTool().getState().getFilterRules());\n        }\n\n        return this.tabContent;\n    }\n\n    /**\n     * Help static function which adds new select item to the filter sidebar tab.\n     * \n     * @param {*} _this \n     */\n    static addSelectItem(_this) {\n        // div container\n        let div = _this.tabContent.insertBefore(document.createElement('div'), _this.btnGroup);\n        div.classList.add(_this.getDefaults().getFilterRuleElementClass());\n        \n        var minusButton = TabDOMUtil.createButton(\"<i class=\\\"fa fa-minus-circle\\\"></i>\", function(e) { FiltersToolTabControl.removeSelectItem(e, _this) }, \"minusBtn\");        \n        div.appendChild(minusButton);\n\n        /**\n         * Help function which is invoked when the data domain input is changed.\n         * It changes possible options of the operation and value inputs.\n         * \n         * @param {*} e \n         */\n        let updateValueOptions = function(e) {\n            // find the input item\n            let input = undefined\n            let div = e.target.closest(\".\" + _this.getDefaults().getFilterRuleElementClass());\n            for(let i = 0; i < _this.inputs.length; i++) {\n                if(_this.inputs[i].container == div) {\n                    input = _this.inputs[i].input;\n                    break;\n                }\n            }\n\n            // get selected value of the data domain input\n            let dataDomain = e.target.value;\n            \n            // test if defined\n            if(dataDomain != undefined && dataDomain != \"\") {\n                if(input != undefined) {\n                    // enable operation and value inputs\n                    input.opInput.setDisabled(false);\n                    input.valInput.setDisabled(false);\n                    \n                    // find possible values of selected data domain\n                    let values = _this.mapData.getValues(_this.mapData.getDataDomain(dataDomain));\n\n                    // update options of the value input\n                    input.valInput.changeOptions(values);\n                }\n            } else {\n                // disable operation and value inputs\n                input.opInput.setDisabled(true);\n                input.opInput.setValue(\"\");\n                input.valInput.setDisabled(true);\n                input.valInput.setValue(\"\");   \n            }\n        }\n\n        // inputs\n        let input = SidebarInputFactory.createSidebarInput(FilterAutocompleteSidebarInput.ID(), {\n            data: {\n                options: _this.dataDomainLabels,\n                action: updateValueOptions\n            },\n            ops: {\n                options: _this.operationLabels,\n                action: function() { /* do nothing; TODO: update operators with respect to the data domain */ }\n            },\n            vals: {\n                currentData: _this.mapData.getValues(_this.mapData.getDataDomain(_this.dataDomainLabels[0])),\n                action: function() { /* do nothing */ }\n            }\n        });\n\n        div.appendChild(input.create());\n\n        // help input item\n        let inputItem = {\n            container: div,\n            input: input\n        };\n\n        // list of input items\n        _this.inputs.push(inputItem);\n\n        return inputItem;\n    }\n\n    /**\n     * Help static function which removes item from the filter sidebar tab.\n     * \n     * @param {*} _this \n     */\n    static removeSelectItem(e, _this) {\n        // get div\n        let div = e.target.closest(\"div\");\n\n        // find input item and remove it from DOM and list of input items\n        for(let i = 0; i < _this.inputs.length; i++) {\n            if(_this.inputs[i].container == div) {\n                div.remove();\n                _this.inputs.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    /**\n     * It changes state to enabled/disabled.\n     * \n     * @param {*} enabled\n     */\n    setContentState(enabled) {\n        this.getTool().setEnabled(enabled);\n    }\n\n    /**\n     * It updates rules according to the input values.\n     */\n    inputChangedAction() {\n        this.getTool().setFilterRules(this.getFilterRules());\n    }\n\n    /**\n     * It updates input values according to the selection.\n     */\n    dimensionInputChangedAction() {\n        // TODO\n    }\n\n    /**\n     * It returns selected values from input fields and constructs filter rules.\n     */\n    getFilterRules() {\n        let filterRules = [];\n        let value;\n        let dataDomain;\n        for(let i = 0; i < this.inputs.length; i++) {\n            value = this.inputs[i].input.getValue();\n\n            // get data domain\n            dataDomain = this.mapData.getDataDomain(value.data);\n\n            if(dataDomain != undefined) {\n                // new filter rule\n                let filterRule = this.filterManager.createRule(this.mapData.getDataDomain(value.data), value.op, value.val);\n                if(filterRule != undefined) {\n                    filterRules.push(filterRule);\n                }\n            }\n        }\n        return filterRules;\n    }\n\n    /**\n     * It updates input fileds according to the given filter rules.\n     * \n     * @param {*} filterRules \n     */\n    setFilterRules(filterRules) {\n        // clear inputs\n        for(let i = 0; i < this.inputs.length; i++) {\n            this.inputs[i].container.remove();\n        }\n        this.inputs = [];\n\n        if(filterRules == undefined || filterRules.length == 0) {\n            // if filter rules are empty, initialize one empty input item\n            FiltersToolTabControl.addSelectItem(this);\n        } else {\n            // import inputs according to given filter rules\n            for(let i = 0; i < filterRules.length; i++) {\n                // create input for given filter rule\n                FiltersToolTabControl.addSelectItem(this).input.setValue({\n                    data: filterRules[i].getDataDomain().toString(),\n                    op: filterRules[i].getFilterOperation().toString(),\n                    val: filterRules[i].getPattern()});\n            }\n        }\n    }\n}\nexport default FiltersToolTabControl","/**\n * This class wraps a filter operation.\n * \n * @author Jiri Hynek\n */\nclass AbstractFilterOperation {\n\n    /**\n     * It initializes the filter operation.\n     */\n    constructor() {\n    }\n\n    /**\n     * It returns the string label of the filter representing operator.\n     */\n    toString() {\n        return this.label;\n    }\n\n    /**\n     * It performs the filter operation which compare a value with a pattern.\n     * \n     * @param {any} value \n     * @param {any} pattern \n     */\n    match(value, pattern) {\n        return false;\n    }\n}\nexport default AbstractFilterOperation;","/**\n * This class provide functions for using filters.\n * \n * @author Jiri Hynek\n */\nclass AbstractFiltersManager {\n\n    /**\n     * It initializes the filter manager.\n     */\n    constructor() {\n    }\n\n    /**\n     * It returns available filter operations\n     */\n    getOperations() {\n        return [];\n    }\n\n    /**\n     * It returns available filter operations\n     */\n    getOperation(label) {\n        let operations = this.getOperations();\n        let resultObjects = [];\n        if(operations != undefined) {\n            for(let i = 0; i < operations.length; i++) {\n                if(operations[i].toString() == label) {\n                    resultObjects.push(operations[i]);\n                }\n            }\n        }\n        return resultObjects;\n    }\n\n    /**\n     * The function returns available filter operations.\n     */\n    getOperationLabels() {\n        let labels = [];\n        let operations = this.getOperations();\n        if(operations != undefined) {\n            for(let i = 0; i < operations.length; i++) {\n                labels.push(operations[i].toString());\n            }\n        }\n        return labels;\n    }\n\n    /**\n     * The function creates a new filter rule using given operation label.\n     * \n     * @param {*} dataDomain \n     * @param {*} label \n     * @param {*} pattern \n     */\n    createRule(dataDomain, operation, pattern) {\n        return undefined;\n    }\n\n    /**\n     * Takes a list of data and applies the given filter rules.\n     * Returns a new list of the references to filtered data items.\n     * \n     * @param {[FilterRule]} filterRules \n     */\n    filterData(data, filterRules) {\n    }\n\n\n}\nexport default AbstractFiltersManager;","/**\n * This class wraps dataDomain, filterOperation, pattern which represents a filter rule.\n * \n * @author Jiri Hynek\n */\nclass AbstractFilterRule {\n\n    /**\n     * It initializes the filter manager.\n     */\n    constructor() {\n    }\n\n    /**\n     * It returns the the data domain which should be analyzed.\n     */\n    getDataDomain() {\n        return undefined;\n    }\n\n    /**\n     * It returns the filter operation used for the filtering.\n     */\n    getFilterOperation() {\n        return undefined;\n    }\n\n    /**\n     * It returns the string label of the filter representing operator given by the parameter of constructor.\n     */\n    getPattern() {\n        return undefined;\n    }\n}\nexport default AbstractFilterRule;","import AbstractFilterRule from \"../abstract/AbstractFilterRule\";\n\n/**\n * This class wraps dataDomain, filterOperation, pattern which represents a filter rule.\n * \n * @author Jiri Hynek\n */\nclass FilterRule extends AbstractFilterRule {\n\n    /**\n     * \n     * @param {*} dataDomain \n     * @param {*} operation \n     * @param {*} pattern \n     */\n    constructor(dataDomain, operation, pattern) {\n        super();\n        this.dataDomain = dataDomain;\n        this.operation = operation;\n        this.pattern = pattern;\n    }\n\n    /**\n     * It returns the the data domain which should be analyzed.\n     */\n    getDataDomain() {\n        return this.dataDomain;\n    }\n\n    /**\n     * It returns the filter operation used for the filtering.\n     */\n    getFilterOperation() {\n        return this.operation;\n    }\n\n    /**\n     * It returns the string label of the filter representing operator given by the parameter of constructor.\n     */\n    getPattern() {\n        return this.pattern;\n    }\n}\nexport default FilterRule;","/**\n * The class wraps meta data path used to find data.\n * \n * @author Jiri Hynek\n */\nclass AbstractMapDataDomain {\n\n    /**\n     *  It initializes the data domain wrapper providing a basic API.\n     * \n     * @param {any} domainDescription \n     */\n    constructor(domainDescription) {\n        this.domainDescription = domainDescription;\n    }\n\n    getDomainDescription() {\n        return this.domainDescription;\n    }\n\n    /**\n     * The function returns the string representation of the map data domain\n     * which is *unique* among the labels of other data domains.\n     * \n     * @returns {string}\n     */\n    toString() {\n        return \"\";\n    }\n}\nexport default AbstractMapDataDomain;","import AbstractMapDataDomain from \"./AbstractMapDataDomain\";\n\n/**\n * The class wraps data used by the map, its metadata and functions to acquire data items.\n * \n * @author Jiri Hynek\n */\nclass AbstractMapData {\n\n    /**\n     * It initializes the data wrapper providing a basic API.\n     * \n     * @param {any} data \n     */\n    constructor(data) {\n        this.data = data;\n    }\n\n    /**\n     * It returns the original input data.\n     */\n    getOriginalData() {\n        return this.data;\n    }\n\n    /**\n     * It returns list of items of the type: AbstractMapDataDomain.\n     * \n     * This function is intended to be overriden.\n     * \n     * @returns {[AbstractMapDataDomain]}\n     */\n    getDataDomains() {\n        return [];\n    }\n\n    /**\n     * Help function which returns the list of data domain labels.\n     * \n     * @param {string} label \n     */\n    getDataDomainLabels() {\n        let labels = [];\n        let dataDomains = this.getDataDomains();\n        for(let i = 0; i < dataDomains.length; i++) {\n            labels.push(dataDomains[i].toString());\n        }\n        return labels;\n    }\n\n    /**\n     * It returns the data domain which corresponds to the given string\n     * or creates a new one.\n     * \n     * @param {string} label \n     */\n    getDataDomain(label) {\n        return new AbstractMapDataDomain(label);\n    }\n\n    /**\n     * It returns the preprocessed data as a list of items of the *same* [any] type.\n     * \n     * This function is intended to be overriden.\n     * \n     * @returns {[any]}\n     */\n    getData() {\n        return [];\n    }\n\n    /**\n     * It returns list of all values of the selected data domain.\n     * \n     * @param {AbstractMapDataDomain} dataDomain \n     * @returns {[String]}\n     */\n    getValues(dataDomain) {\n        return [];\n    }\n\n    /**\n     * It returns list of all values of the selected data domain\n     * for the given subset of data.\n     * \n     * @param {AbstractMapDataDomain} dataDomain \n     * @param {any} data \n     * @returns {[String]}\n     */\n    getDataValues(dataDomain, data) {\n        return [];\n    }\n\n    /**\n     * It returns values stored in the given item of the selected data domain.\n     * \n     * @param {AbstractMapDataDomain} dataDomain \n     * @param {any} item \n     * @returns {[String]}\n     */\n    getItemValues(dataDomain, item) {\n        // if the data is not flattened, multiple values can be returned.\n        // note that, currently, all of the Geovisto map tools works only with the valeus[0].\n        // -> **the data should be flattened**\n        return [];\n    }\n}\nexport default AbstractMapData;","import AbstractFilterOperation from \"../abstract/AbstractFilterOperation\";\nimport AbstractFiltersManager from \"../abstract/AbstractFiltersManager\";\nimport FilterRule from \"./FilterRule\";\nimport AbstractMapData from \"../../../../model/data/AbstractMapData\";\n\n/**\n * This class provide functions for using filters.\n * \n * @author Jiri Hynek\n */\nclass FiltersManager extends AbstractFiltersManager {\n\n    constructor(filterOperations) {\n        super();\n        this.filterOperations = filterOperations;\n    }\n\n    /**\n     * The function returns available filter operations.\n     */\n    getOperations() {\n        return this.filterOperations;\n    }\n\n    /**\n     * The function creates a new filter rule using given operation label.\n     * \n     * @param {*} dataDomain \n     * @param {*} label \n     * @param {*} pattern \n     */\n    createRule(dataDomain, label, pattern) {\n        let operation = this.getOperation(label);\n        if(operation && operation.length > 0) {\n            return new FilterRule(dataDomain, operation[0], pattern);\n        } \n        return new FilterRule(dataDomain, new AbstractFilterOperation(), pattern);\n    }\n\n    /**\n     * Takes a list of data and applies the given filter rules.\n     * Returns a new list of the references to filtered data items.\n     * \n     * @param {AbstractMapData} mapData\n     * @param {*} data \n     * @param {[FilterRule]} filterRules \n     */\n    filterData(mapData, data, filterRules) {\n        let resultData = [];\n\n        // prepare arrays to save computation time\n        let dataDomains = [];\n        let matchFunctions = [];\n        let patterns = [];\n        for(let i = 0; i < filterRules.length; i++) {\n            dataDomains.push(filterRules[i].getDataDomain());\n            matchFunctions.push(filterRules[i].getFilterOperation().match);\n            patterns.push(filterRules[i].getPattern());\n        }\n\n        // go through data\n        let doFilter;\n        let values;\n        for(let i = 0; i < data.length; i++) {\n            doFilter = false;\n            for(let j = 0; j < filterRules.length; j++) {\n                values = mapData.getItemValues(dataDomains[j], data[i]);\n                if(values.length == 1) {\n                    if(!matchFunctions[j](values[0], patterns[j])) {\n                        doFilter = true;\n                        break;\n                    }\n                }\n            }\n            if(!doFilter) {\n                // data item is accepted by all filter rules\n                resultData.push(data[i]);\n            }\n        }\n\n        return resultData;\n    }\n}\nexport default FiltersManager;","import AbstractFilterOperation from \"../abstract/AbstractFilterOperation\";\n\n/**\n * This class wraps the equals filter operation.\n * \n * @author Jiri Hynek\n */\nclass EqFilterOperation extends AbstractFilterOperation {\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns the string label of the filter representing operator.\n     */\n    toString() {\n        return \"==\";\n    }\n\n    /**\n     * It checks if value equals pattern.\n     * \n     * @param {any} value \n     * @param {any} pattern \n     */\n    match(value, pattern) {\n        return value == pattern;\n    }\n}\nexport default EqFilterOperation;","import AbstractFilterOperation from \"../abstract/AbstractFilterOperation\";\n\n/**\n * This class wraps the not-equals filter operation.\n * \n * @author Jiri Hynek\n */\nclass NeqFilterOperation extends AbstractFilterOperation {\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns the string label of the filter representing operator.\n     */\n    toString() {\n        return \"!=\";\n    }\n\n    /**\n     * It checks if value does not equal pattern.\n     * \n     * @param {any} value \n     * @param {any} pattern \n     */\n    match(value, pattern) {\n        return value != pattern;\n    }\n}\nexport default NeqFilterOperation;","import AbstractFilterOperation from \"../abstract/AbstractFilterOperation\";\n\n/**\n * This class wraps the regex filter operation.\n * \n * @author Jiri Hynek\n */\nclass RegFilterOperation extends AbstractFilterOperation {\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns the string label of the filter representing operator.\n     */\n    toString() {\n        return \"reg\";\n    }\n\n    /**\n     * It checks if a value match a regular expression pattern.\n     * \n     * @param {any} value \n     * @param {any} pattern \n     */\n    match(value, pattern) {\n        return value.match(new RegExp(pattern, 'g'));\n    }\n}\nexport default RegFilterOperation;","import FiltersManager from \"./model/generic/FiltersManager\";\nimport EqFilterOperation from \"./model/basic/EqFilterOperation\";\nimport NeqFilterOperation from \"./model/basic/NeqFilterOperation\";\nimport RegFilterOperation from \"./model/basic/RegFilterOperation\";\nimport AbstractToolDefaults from \"../../model/tool/abstract/AbstractToolDefaults\";\nimport FiltersTool from \"./FiltersTool\";\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass FiltersToolDefaults extends AbstractToolDefaults {\n\n    /**\n     * It creates tool defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * Only one filter tool should be present in the Geovisto map.\n     */\n    isSingleton() {\n       return true; \n    }\n\n    /**\n     * It returns a unique string of the tool type.\n     */\n    getType() {\n        return FiltersTool.TYPE();\n    }\n\n    /**\n     * It returns default filters manager.\n     */\n    getFiltersManager() {\n        return new FiltersManager([\n            new EqFilterOperation(),\n            new NeqFilterOperation(),\n            new RegFilterOperation()\n        ]);\n    }\n\n    /**\n     * It returns default filter rules.\n     */\n    getFilterRules() {\n        return [];\n    }\n}\nexport default FiltersToolDefaults;","import AbstractToolState from \"../../model/tool/abstract/AbstractToolState\";\nimport FiltersToolDefaults from \"./FiltersToolDefaults\";\nimport AbstractFiltersManager from \"./model/abstract/AbstractFiltersManager\";\nimport AbstractFilterRule from \"./model/abstract/AbstractFilterRule\";\n\n/**\n * This class provide functions for using filters.\n * \n * @author Jiri Hynek\n */\nclass FiltersToolState extends AbstractToolState {\n\n    /**\n     * It creates a tool state.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It resets state with respect to initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {FiltersToolDefaults} defaults \n     */\n    reset(defaults) {\n        super.reset(defaults);\n\n        let props = this.getProps();\n\n        // set filter manager, which manages filter operations\n        this.setFiltersManager(props.manager == undefined && defaults ? defaults.getFiltersManager() : props.manager);\n\n        // set filter rules if specified in props explicitly\n        this.setFilterRules(props.rules == undefined && defaults ? defaults.getFilterRules() : props.rules);\n    }\n\n    /**\n     * The metod takes config and desrializes the values.\n     * \n     * @param {*} config \n     */\n    deserialize(config) {\n        super.deserialize(config);\n\n        // deserialize filter rules\n        if(config.filterRules != undefined) {\n            // get filter and data manegers which are need for proper deserialization of filter rules\n            let filterManager = this.getFiltersManager();\n            let mapData = this.getMap().getState().getMapData();\n            if(filterManager != undefined && mapData != undefined) {\n                let filterRules = [];\n                let configFilterRule;\n                if(config.filterRules != undefined) {\n                    for(let i = 0; i < config.filterRules.length; i++) {\n                        configFilterRule = config.filterRules[i];\n\n                        let dimension = mapData.getDataDomain(configFilterRule.domain);\n                        let operation = filterManager.getOperation(configFilterRule.operation);\n\n                        if(dimension != undefined && operation != undefined) {\n                            filterRules.push(filterManager.createRule(dimension, operation, configFilterRule.pattern));\n                        }\n                    }\n                }\n                this.setFilterRules(filterRules);\n            }\n        }\n    }\n\n    /**\n     * The method serializes the tool state. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {FiltersToolDefaults} defaults \n     */\n    serialize(defaults) {\n        let config = super.serialize(defaults);\n\n        // serialize filter filters\n        if(this.filterRules != undefined) {\n            config.filterRules = [];\n            let filterRule;\n            for(let i = 0; i < this.filterRules.length; i++) {\n                filterRule = this.filterRules[i];\n                config.filterRules.push({\n                    domain: filterRule.getDataDomain().toString(),\n                    operation: filterRule.getFilterOperation().toString(),\n                    pattern: filterRule.getPattern()\n                })\n            }\n        }\n\n        return config;\n    }\n\n    /**\n     * It updates filter manager.\n     * \n     * @param {AbstractFiltersManager} manager \n     */\n    setFiltersManager(manager) {\n        this.manager = manager;\n    }\n\n    /**\n     * It returns filter manager\n     */\n    getFiltersManager() {\n        return this.manager;\n    }\n\n    /**\n     * It returns the filterRules property of the tool state.\n     */\n    getFilterRules() {\n        return this.filterRules;\n    }\n\n    /**\n     * It sets the filterRules property of the tool state.\n     * \n     * @param {[AbstractFilterRule]} filterRules \n     */\n    setFilterRules(filterRules) {\n        this.filterRules = filterRules;\n    }\n}\nexport default FiltersToolState;","import AbstractTool from \"../../model/tool/abstract/AbstractTool\";\nimport FiltersToolTabControl from \"./sidebar/FiltersToolTabControl\";\nimport FiltersToolDefaults from \"./FiltersToolDefaults\";\nimport FiltersToolState from \"./FiltersToolState\";\n\n/**\n * This class wraps filters, sidebar tab and state. It provides methods for filters management.\n * \n * @author Jiri Hynek\n */\nclass FiltersTool extends AbstractTool {\n\n    /**\n     * It creates a new tool with respect to the props.\n     * \n     * @param {*} props \n     */\n    constructor(props) {\n        super(props);\n\n        // the tab control for a sidebar will be created only if needed\n        this.tabControl = undefined;\n    }\n\n    /**\n     * A unique string of the tool type.\n     */\n    static TYPE() {\n        return \"geovisto-tool-filters\";\n    }\n\n    /**\n     * It creates a copy of the uninitialized tool.\n     */\n    copy() {\n        return new FiltersTool(this.getProps());\n    }\n\n    /**\n     * It creates new defaults of the tool.\n     */\n    createDefaults() {\n        return new FiltersToolDefaults();\n    }\n\n    /**\n     * It returns default tool state.\n     */\n    createState() {\n        return new FiltersToolState();\n    }\n\n    /**\n     * It creates new filter tool.\n     */\n    create() {\n        // set filter rules\n        this.setFilterRules(this.getState().getFilterRules());\n    }\n\n    /**\n     * It returns a tab control.\n     */\n    getSidebarTabControl() {\n        if(this.tabControl == undefined) {\n            this.tabControl = this.createSidebarTabControl();\n        }\n        return this.tabControl;\n    }\n\n    /**\n     * It creates new tab control.\n     */\n    createSidebarTabControl() {\n        return new FiltersToolTabControl({ tool: this });\n    }\n\n    /**\n     * \n     * @param {*} filterRules \n     */\n    setFilterRules(filterRules) {\n        if(filterRules != undefined) {\n            // if the filter tool is enabled, update map data\n            if(this.isEnabled()) {\n                let mapData = this.getMap().getState().getMapData();\n                this.getMap().updateData(this.getState().getFiltersManager().filterData(mapData, mapData.getData(), filterRules));\n            }\n\n            // update filter rules\n            this.getState().setFilterRules(filterRules);\n        }\n    }\n\n    /**\n     * It changes filters state to enabled/disabled.\n     * \n     * @param {*} enabled\n     */\n    setEnabled(enabled) {\n        if(enabled != this.isEnabled()) {\n            // update state\n            this.getState().setEnabled(enabled);\n\n            // the Geovisto map stores the current data and works as the event dispatcher\n            let map = this.getMap();\n\n            // apply filter rules if enabled, else use empty list of filters (use the initial data)\n            if(enabled) {\n                let mapData = this.getMap().getState().getMapData();\n                map.updateData(this.getState().getFiltersManager().filterData(mapData, mapData.getData(), this.getState().getFilterRules()));\n            } else {\n                map.updateData(map.getState().getMapData().getData());\n            }\n        }\n    }\n}\nexport default FiltersTool;","import AbstractTabControlDefaults from \"../../sidebar/model/control/AbstractTabControlDefaults\";\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass SettingsToolTabControlDefaults extends AbstractTabControlDefaults {\n\n    /**\n     * It creates tab control defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns name of tab pane.\n     */\n    getName() {\n        return \"General settings\";\n    }\n\n    /**\n     * It returns the icon of the tab pane.\n     */\n    getIcon() {\n        return '<i class=\"fa fa-gear\"></i>';\n    }\n\n    /**\n     * The settings tab control does not contain a check button used to enable/disable the tool.\n     */\n    getCheckButton() {\n        return false;\n    }\n}\nexport default SettingsToolTabControlDefaults;","import AbstractTabControlState from \"../../sidebar/model/control/AbstractTabControlState\";\n\n/**\n * This class manages the state of the sidebar tab.\n * It wraps the state since the sidebar tab can work with state objects which needs to be explicitly serialized.\n * \n * @author Jiri Hynek\n */\nclass SettingsToolTabControlState extends AbstractTabControlState {\n\n    /**\n     * It creates a tab control state.\n     */\n    constructor() {\n        super();\n    }\n}\nexport default SettingsToolTabControlState;","import AbstractTabControl from \"../../sidebar/model/control/AbstractTabControl\";\nimport SettingsToolTabControlDefaults from \"./SettingsToolTabControlDefaults\";\nimport SettingsToolTabControlState from \"./SettingsToolTabControlState\";\n\n/**\n * This class provides controls for management of the settings sidebar tab.\n * \n * @author Jiri Hynek\n */\nclass SettingsTabControl extends AbstractTabControl {\n\n    constructor(props) {\n        super(props);\n\n        this.tabContent = undefined;\n    }\n\n    /**\n     * It creates new defaults of the tab control.\n     */\n    createDefaults() {\n        return new SettingsToolTabControlDefaults();\n    }\n\n    /**\n     * It creates new state of the tab control.\n     */\n    createState(props, defaults) {\n        return new SettingsToolTabControlState(props, defaults);\n    }\n\n    /**\n     * It returns generic layer tab pane.\n     */\n    getTabContent() {\n        if(this.tabContent == undefined) {\n            // tab pane contains empty div element\n            this.tabContent = document.createElement('div');\n\n            // it provides control with empty tab - tab fragments can be appended\n        }\n\n        return this.tabContent; \n    }\n\n}\nexport default SettingsTabControl;","import SettingsTool from \"./SettingsTool\";\nimport AbstractToolDefaults from \"../../model/tool/abstract/AbstractToolDefaults\";\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass SettingsToolDefaults extends AbstractToolDefaults {\n\n    /**\n     * It creates tool defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * Only one settings tool should be present in the Geovisto map.\n     */\n    isSingleton() {\n       return true; \n    }\n\n    /**\n     * It returns a unique string of the tool type.\n     */\n    getType() {\n        return SettingsTool.TYPE();\n    }\n}\nexport default SettingsToolDefaults;","import AbstractMapSelection from \"../abstract/AbstractMapSelection\";\n\n/**\n * The class provides API for the selection of map elements.\n * It wraps reference to the source element and list of identifiers of geographic items.\n * \n * @author Jiri Hynek\n */\nclass MapSelection extends AbstractMapSelection {\n\n    constructor(tool, srcIds) {\n        super();\n        this.tool = tool;\n        this.srcIds = srcIds;\n        this.allIds = srcIds.map((x) => x);\n    }\n\n    /**\n     * It returns the source element of the selection.\n     */\n    getSrcElement() {\n        return this.srcElement;\n    }\n\n    /**\n     * It returns the tool of the selected element.\n     */\n    getTool() {\n        return this.tool;\n    }\n\n    /**\n     * It returns identifiers of geographical items which were selected.\n     */\n    getSrcIds() {\n        return this.srcIds;\n    }\n\n    /**\n     * It returns identifiers of geographical items which were selected or affected by this selection.\n     */\n    getIds() {\n        return this.allIds;\n    }\n\n    /**\n     * It compares two map selections.\n     * \n     * @param {AbstractSelection} selection \n     */\n    equals(selection) {\n        if(selection) {\n            let srcIds = this.getSrcIds();\n            let srcIds2 = selection.getSrcIds();\n            if(this.getTool() == selection.getTool() && srcIds.length == srcIds2.length) {\n                for (let i = 0; i < srcIds.length; i++) {\n                    if(this.srcIds[i] != srcIds2[i]) {\n                        return false;\n                    }\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * It adds geographical items.\n     * \n     * @param {*} ids \n     */\n    addIds(ids) {\n        let newIds = [];\n        for(let i = 0; i < ids.length; i++) {\n            if(!this.allIds.includes(ids[i])) {\n                this.allIds.push(ids[i]);\n                newIds.push(ids[i]);\n            }\n        }\n        return newIds;\n    }\n}\nexport default MapSelection;","/**\n * The class provides API for the selection of map elements.\n * \n * The selection can affect multiple geographical items identified by some id (e.g., ISO 3166-1 alpha-3 - CZE, SVK, ...).\n * \n * @author Jiri Hynek\n */\nclass AbstractMapSelection {\n\n    constructor() {\n    }\n\n    /**\n     * It returns the tool of the selected element.\n     */\n    getTool() {\n        return this.tool;\n    }\n\n    /**\n     * It returns identifiers of geographical items which were selected.\n     */\n    getSrcIds() {\n        return undefined;\n    }\n\n    /**\n     * It returns identifiers of geographical items which were selected or affected by this selection.\n     */\n    getIds() {\n        return undefined;\n    }\n\n    /**\n     * It compares two selections.\n     * \n     * @param {AbstractSelection} selection \n     */\n    equals(selection) {\n        return false;\n    }\n\n    /**\n     * It adds geographical items.\n     * \n     * @param {*} ids \n     */\n    addIds(ids) {\n        return undefined;\n    }\n}\nexport default AbstractMapSelection;","import AbstractToolState from \"../../model/tool/abstract/AbstractToolState\";\nimport AbstractMapSelection from \"./model/item/abstract/AbstractMapSelection\";\nimport SelectionToolDefaults from \"./SelectionToolDefaults\";\nimport MapSelection from \"./model/item/generic/MapSelection\";\n\n/**\n * This class provide functions for using selections.\n * \n * @author Jiri Hynek\n */\nclass SelectionToolState extends AbstractToolState {\n\n    /**\n     * It creates a tool state.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It resets state with respect to initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {SelectionToolDefaults} defaults \n     */\n    reset(defaults) {\n        super.reset(defaults);\n\n        // set selection\n        this.setSelection(this.getProps().selection == undefined && defaults ? defaults.getSelection() : this.getProps().selection);\n    }\n\n    /**\n     * The metod takes config and desrializes the values.\n     * \n     * @param {*} config \n     */\n    deserialize(config) {\n        super.deserialize(config);\n\n        // deserialize selection\n        if(config.selection) {\n            let tool = this.getMap().getState().getTools().getById(config.selection.tool);\n            if(tool) {\n                this.setSelection(new MapSelection(tool, config.selection.ids));\n            }\n        }\n    }\n\n    /**\n     * The method serializes the tool state. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {SelectionToolDefaults} defaults\n     */\n    serialize(defaults) {\n        let config = super.serialize(defaults);\n\n        // serialize the selection\n        let selection = this.getSelection();\n        if(selection && selection.getSrcIds().length > 0) {\n            config.selection = {\n                tool: selection.getTool().getId(),\n                ids: selection.getSrcIds()\n            };\n        }\n\n        return config;\n    }\n\n    /**\n     * It returns the selection property of the tool state.\n     */\n    getSelection() {\n        return this.selection;\n    }\n\n    /**\n     * It sets the selection property of the tool state.\n     * \n     * @param {AbstractMapSelection} selection\n     */\n    setSelection(selection) {\n       this.selection = selection;\n    }\n}\nexport default SelectionToolState;","import GenericObjectEvent from \"../../../../model/event/generic/GenericObjectEvent\";\n\n/**\n * This class provides the map selection change event.\n * \n * @author Jiri Hynek\n */\nclass SelectionToolEvent extends GenericObjectEvent {\n\n    /**\n     * It initializes event.\n     */\n    constructor(selectionTool, selection) {\n        super(SelectionToolEvent.TYPE(), selectionTool, selection);\n        this.selection = selection;\n    }\n\n    /**\n     * Type of the event.\n     */\n    static TYPE() {\n        return \"selection-tool-event\";\n    }\n}\nexport default SelectionToolEvent;","import AbstractMapObjectState from \"../../../../model/object/abstract/AbstractMapObjectState\";\n\n/**\n * This class manages the state of the sidebar fragment.\n * It wraps the state since the sidebar fragment can work with state objects which needs to be explicitly serialized.\n * \n * @author Jiri Hynek\n */\nclass AbstractTabFragmentState extends AbstractMapObjectState {\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * It initializes the state using the initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {*} props \n     * @param {*} defaults \n     */\n    initialize(props, defaults) {\n        // store the tool which provides this sidebar fragment\n        // props.tool should not be undefined\n        this.setTool(props.tool);\n\n        super.initialize(props, defaults);\n    }\n\n    /**\n     * It resets state with respect to initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {AbstractTabControlDefaults} defaults \n     */\n    reset(defaults) {\n        super.reset(defaults);\n\n        let props = this.getProps();\n\n        // set remaining properties if not set\n        this.setEnabled(props.enabled == undefined && defaults ? defaults.isEnabled() : props.enabled);\n    }\n\n    /**\n     * The metod takes config and desrializes the values.\n     * \n     * @param {*} config \n     */\n    deserialize(config) {\n        if(config.enabled != undefined) this.setEnabled(config.enabled);\n    }\n\n    /**\n     * The method serializes the sidebar tab fragment configuration.\n     * Optionally, a serialed value can be let undefined if it equals the default value.\n     * \n     * @param {*} defaults \n     */\n    serialize(defaults) {\n        return {\n            tool: this.getTool().getId(),\n            enabled: defaults && this.isEnabled == defaults.isEnabled() ? undefined : this.isEnabled(),\n        }\n    }\n\n    /**\n     * It returns the tool property of the sidebar tab fragment state.\n     */\n    getTool() {\n        return this.tool;\n    }\n\n    /**\n     * It sets the tool property of the sidebar tab fragment state.\n     * It can be set only once.\n     * \n     * @param {*} tool \n     */\n    setTool(tool) {\n       this.tool = (this.tool == undefined) ? tool : this.tool;\n    }\n\n    /**\n     * It returns the enabled property of the sidebar tab fragment state.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * It sets the enabled property of the sidebar tab fragment state.\n     * \n     * @param {*} enabled \n     */\n    setEnabled(enabled) {\n       this.enabled = enabled;\n    }\n\n    /**\n     * It returns the tab control property of the sidebar fragment control state.\n     */\n    getTabControl() {\n        return this.tabControl;\n    }\n\n    /**\n     * It sets the tab control property of the sidebar tab contrfragmentol state.\n     * It can be set only once.\n     * \n     * @param {*} tabControl \n     */\n    setTabControl(tabControl) {\n       this.tabControl = (this.tabControl == undefined) ? tabControl : this.tabControl;\n    }\n\n    /**\n     * It returns the content property of the sidebar tab framgent state.\n     */\n    getContent() {\n        return this.content;\n    }\n\n    /**\n     * It sets the content property of the sidebar tab control state.\n     * It can be set only once.\n     * \n     * @param {*} content \n     */\n    setContent(content) {\n       this.content = (this.content == undefined) ? content : this.content;\n    }\n}\nexport default AbstractTabFragmentState;","import AbstractMapObjectDefaults from \"../../../../model/object/abstract/AbstractMapObjectDefaults\";\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass AbstractTabFragmentDefaults extends AbstractMapObjectDefaults {\n\n    /**\n     * It initializes a map defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns a unique type string of the sidebar fragment.\n     */\n    getType() {\n        return \"geovisto-sidebar-fragment\";\n    }\n\n    /**\n     * It returns whether the tab control is enabled.\n     */\n    isEnabled() {\n        return true;\n    }\n\n    /**\n     * It returns the default config.\n     */\n    getConfig() {\n        return {};\n    }\n}\nexport default AbstractTabFragmentDefaults;","import AbstractMapObject from \"../../../../model/object/abstract/AbstractMapObject\";\nimport AbstractTabFragmentState from \"./AbstractTabFragmentState\";\nimport AbstractTabFragmentDefaults from \"./AbstractTabFragmentDefaults\";\n\n/**\n * This class provides tab fragment for sidebar tab control.\n * \n * This class is intended to be extended.\n * \n * @author Jiri Hynek\n */\nclass AbstractTabFragment extends AbstractMapObject {\n\n    constructor(props) {\n        super(props);\n    }\n\n    /**\n     * It creates new defaults of the tab control.\n     */\n    createDefaults() {\n        return new AbstractTabFragmentDefaults();\n    }\n\n    /**\n     * It creates the tab control state.\n     */\n    createState() {\n        return new AbstractTabFragmentState();\n    }\n\n    /**\n     * The function returns true if the tab fragment should be included in the tab control.\n     * \n     * @param {*} tabControl \n     */\n    isChild(tabControl) {\n        return false;\n    }\n\n    /**\n     * It initializes the tab control.\n     * \n     * @param {*} tabControl \n     * @param {*} config \n     */\n    initialize(tabControl, config) {\n        // the tab control which stores the tab fragment\n        // the tab control should not be undefined (this function is called only by tab control)\n        this.getState().setTabControl(tabControl);\n\n        // copy existing config if exists or use the default one\n        this.getState().deserialize(this, config != undefined ? JSON.parse(JSON.stringify(config)) : this.getDefaults().getConfig());\n        \n        return this;\n    }\n\n    /**\n     * It returns fragment of tab pane which will be placed in sidebar tab.\n     * \n     * This function can be extended.\n     */\n    getTabContent() {\n        return document.createTextNode(\"This is tab content\"); \n    }\n\n    /**\n     * This function is called after the sidebar tab is rendered in sidebar.\n     * \n     * This function can be extended.\n     */\n    postCreate() {\n    }\n\n    /**\n     * Changes the state of the tool which is controled by this sidebar tab.\n     * \n     * This function can be extended.\n     * \n     * @param {*} checked \n     */\n    setFragmentContentChecked(checked) {\n    }\n\n}\nexport default AbstractTabFragment;","import AbstractTabFragmentDefaults from \"../../sidebar/model/fragment/AbstractTabFragmentDefaults\";\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass SelectionToolTabFragmentDefaults extends AbstractTabFragmentDefaults {\n\n    /**\n     * It creates tab fragment defaults.\n     */\n    constructor() {\n        super();\n    }\n}\nexport default SelectionToolTabFragmentDefaults;","import AbstractTabFragmentState from \"../../sidebar/model/fragment/AbstractTabFragmentState\";\n\n/**\n * This class manages the state of the sidebar fragment.\n * It wraps the state since the sidebar fragment can work with state objects which needs to be explicitly serialized.\n * \n * @author Jiri Hynek\n */\nclass SelectionToolTabFragmentState extends AbstractTabFragmentState {\n\n    /**\n     * It creates a tab fragment state.\n     */\n    constructor() {\n        super();\n    }\n}\nexport default SelectionToolTabFragmentState;","import AbstractTabFragment from '../../sidebar/model/fragment/AbstractTabFragment';\nimport SettingsTool from '../../settings/SettingsTool';\nimport SelectionToolTabFragmentDefaults from './SelectionToolTabFragmentDefaults';\nimport SelectionToolTabFragmentState from './SelectionToolTabFragmentState';\n\n/**\n * This class represents tab fragment for Themes tool.\n * \n * @author Jiri Hynek\n */\nclass SelectionToolTabFragment extends AbstractTabFragment {\n\n    constructor(props) {\n        super(props);\n\n        // tab content\n        this.tabContent = undefined;\n    }\n\n    /**\n     * It creates new defaults of the tab fragment.\n     */\n    createDefaults() {\n        return new SelectionToolTabFragmentDefaults();\n    }\n\n    /**\n     * It creates new state of the tab fragment.\n     */\n    createState() {\n        return new SelectionToolTabFragmentState();\n    }\n\n    /**\n     * The function returns true if the tab fragment should be included in the tab control.\n     * \n     * @param {*} tabControl \n     */\n    isChild(tabControl) {\n        return tabControl.getState().getTool().getType() == SettingsTool.TYPE();\n    }\n\n    /**\n     * It returns fragment of tab pane which will be placed in sidebar tab.\n     * \n     * This function can be extended.\n     */\n    getTabContent() {\n        if(this.tabContent == undefined) {\n            this.createTabContent();\n        }\n        return this.tabContent;\n    }\n\n    /**\n     * Help function which creates tab content.\n     */\n    createTabContent() {\n        // tab pane\n        this.tabContent = document.createElement('div');\n\n        // TODO ... (selection settings)\n    }\n\n}\nexport default SelectionToolTabFragment;","import AbstractTool from \"../../model/tool/abstract/AbstractTool\";\nimport SelectionToolState from \"./SelectionToolState\";\nimport SelectionToolEvent from \"./model/event/SelectionToolEvent\";\nimport SelectionToolDefaults from \"./SelectionToolDefaults\";\nimport MapSelection from \"./model/item/generic/MapSelection\";\nimport SelectionToolTabFragment from \"./sidebar/SelectionToolTabFragment\";\n\n/**\n * This class provides the selection tool.\n * \n * TODO: exclude defaults and state variables\n * \n * @author Jiri Hynek\n */\nclass SelectionTool extends AbstractTool {\n\n    /**\n     * It creates a new tool with respect to the props.\n     * \n     * @param {*} props \n     */\n    constructor(props) {\n        super(props);\n\n        // the tab fragment for a sidebar tab will be created only if needed\n        this.tabFragment = undefined\n    }\n\n    /**\n     * A unique string of the tool type.\n     */\n    static TYPE() {\n        return \"geovisto-tool-selection\";\n    }\n\n    /**\n     * \n     */\n    static EMPTY_SELECTION() {\n        return new MapSelection(undefined, []);\n    }\n\n    /**\n     * It creates a copy of the uninitialized tool.\n     */\n    copy() {\n        return new SelectionTool(this.getProps());\n    }\n\n    /**\n     * It creates new defaults of the tool.\n     */\n    createDefaults() {\n        return new SelectionToolDefaults();\n    }\n\n    /**\n     * It creates the tool state.\n     */\n    createState() {\n        return new SelectionToolState();\n    }\n\n    /**\n     * It creates new filter tool.\n     */\n    create() {\n        // set selection\n        // not necessary\n        //this.setSelection(this.getState().getSelection());\n    }\n\n    /**\n     * \n     * @param {*} selection \n     */\n    setSelection(selection) {\n        if(selection != undefined) {\n            // if the selection tool is enabled, update map selection\n            if(this.isEnabled()) {\n                // update tool state\n                this.getState().setSelection(selection);\n\n                // dispatch event\n                this.getMap().dispatchEvent(new SelectionToolEvent(this, selection));\n            }\n        }\n    }\n\n    /**\n     * It returns a tab fragment.\n     */\n    getSidebarTabFragment() {\n        if(this.tabFragment == undefined) {\n            this.tabFragment = this.createSidebarTabFragment();\n        }\n        return this.tabFragment;\n    }\n\n    /**\n     * It creates new tab control.\n     * \n     * This function can be extended.\n     */\n    createSidebarTabFragment() {\n        return new SelectionToolTabFragment({ tool: this});\n    }\n}\nexport default SelectionTool;","import SelectionTool from \"./SelectionTool\";\nimport AbstractToolDefaults from \"../../model/tool/abstract/AbstractToolDefaults\";\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass SelectionToolDefaults extends AbstractToolDefaults {\n\n    /**\n     * It creates tool defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * Only one selection tool should be present in the Geovisto map.\n     */\n    isSingleton() {\n       return true; \n    }\n\n    /**\n     * It returns a unique string of the tool type.\n     */\n    getType() {\n        return SelectionTool.TYPE();\n    }\n\n    /**\n     * It returns default map selection.\n     * \n     * This function can be overriden;\n     */\n    getSelection() {\n        return SelectionTool.EMPTY_SELECTION();\n    }\n}\nexport default SelectionToolDefaults;","import AbstractToolState from \"../../model/tool/abstract/AbstractToolState\";\nimport SelectionToolDefaults from \"../selection/SelectionToolDefaults\";\n\n/**\n * This class provide functions for using selections.\n * \n * @author Jiri Hynek\n */\nclass SettingsToolState extends AbstractToolState {\n\n    /**\n     * It creates a tool state.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It resets state with respect to initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {SelectionToolDefaults} defaults \n     */\n    reset(defaults) {\n        super.reset(defaults);\n    }\n\n    /**\n     * The metod takes config and desrializes the values.\n     * \n     * @param {*} config \n     */\n    deserialize(config) {\n        super.deserialize(config);\n    }\n\n    /**\n     * The method serializes the tool state. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {SelectionToolDefaults} defaults\n     */\n    serialize(defaults) {\n        return super.serialize(defaults);\n    }\n}\nexport default SettingsToolState;","import AbstractTool from '../../model/tool/abstract/AbstractTool';\nimport SettingsToolTabControl from \"./sidebar/SettingsToolTabControl\";\nimport SettingsToolDefaults from './SettingsToolDefaults';\nimport SettingsToolState from './SettingsToolState';\n\n/**\n * This class represents settings tools. It provides empty sidebar which can be used be other tools via tab fragments.\n * \n * TODO: exclude defaults and state variables\n * \n * @author Jiri Hynek\n */\nclass SettingsTool extends AbstractTool {\n\n    /**\n     * It creates a new tool with respect to the props.\n     * \n     * @param {*} props \n     */\n    constructor(props) {\n        super(props);\n\n        console.log(\"create settings tool\");\n        // the tab control for a sidebar will be created only if needed\n        this.tabControl = undefined;\n    }\n\n    /**\n     * A unique string of the tool type.\n     */\n    static TYPE() {\n        return \"geovisto-tool-settings\";\n    }\n\n    /**\n     * It creates a copy of the uninitialized tool.\n     */\n    copy() {\n        return new SettingsTool(this.getProps());\n    }\n\n    /**\n     * It creates new defaults of the tool.\n     */\n    createDefaults() {\n        return new SettingsToolDefaults();\n    }\n\n    /**\n     * It creates the tool state.\n     */\n    createState() {\n        return new SettingsToolState();\n    }\n\n    /**\n     * It returns tab control with respect to the configuration.\n     */\n    getSidebarTabControl() {\n        if(this.tabControl == undefined) {\n            this.tabControl = this.createSidebarTabControl();\n        }\n        return this.tabControl;\n    }\n\n    /**\n     * It creates new tab control.\n     * \n     * This function can be extended.\n     */\n    createSidebarTabControl() {\n        return new SettingsToolTabControl({ tool: this });\n    }\n}\nexport default SettingsTool;","/**\n * The class wraps config used by the map and functions to acquire config items.\n * \n * @author Jiri Hynek\n */\nclass BasicMapConfig {\n\n    /**\n     * It initializes the config wrapper providing a basic API.\n     * It expects a config represented by the implicict Geovisto map structure.\n     * \n     * @param {any} config \n     */\n    constructor(config) {\n        this.config = config;\n    }\n\n    /**\n     * It returns original map config.\n     */\n    getOriginalConfig() {\n        return super.getOriginalConfig();\n    }\n\n    /**\n     * It returns original map config since it is represented in the implicit geovisto map structure.\n     */\n    getConfig() {\n        return this.config;\n    }\n\n    /**\n     * It returns the list of all config records for the tools.\n     */\n    getToolsConfigs() {\n        return this.config.tools;\n    }\n\n    /**\n     * It returns the config record for the tool identified by the given tool identifier.\n     * \n     * @param {string} toolId \n     */\n    getToolConfig(toolId) {\n        let tools = this.config.tools\n        let tool = undefined;\n        if(tools != undefined && Array.isArray(tools)) {\n            tool = tools.find(x => x.id == toolId);\n        }\n        return tool;\n    }\n\n    /**\n     * It returns map config of the implicit structure.\n     * \n     * @param {*} mapConfing \n     */\n    export(mapConfig) {\n        return mapConfig;\n    }\n\n}\nexport default BasicMapConfig;","import AbstractTabControlDefaults from \"../../../sidebar/model/control/AbstractTabControlDefaults\";\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass AbstractLayerToolTabControlDefaults extends AbstractTabControlDefaults {\n\n    /**\n     * It creates tab control defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns name of tab pane.\n     */\n    getName() {\n        return this.getMapObject().getState().getTool().getState().getLayerName() + \" settings\";\n    }\n\n    /**\n     * It returns the icon of the tab pane.\n     */\n    getIcon() {\n        return '<i class=\"fa fa-file\"></i>';\n    }\n\n    /**\n     * It returns the data mapping model.\n     */\n    getDataMappingModel() {\n        return this.getMapObject().getTool().getDefaults().getDataMappingModel();\n    }\n}\nexport default AbstractLayerToolTabControlDefaults;","import AbstractTabControlState from \"../../../sidebar/model/control/AbstractTabControlState\";\n\n/**\n * This class manages the state of the sidebar tab.\n * It wraps the state since the sidebar tab can work with state objects which needs to be explicitly serialized.\n * \n * @author Jiri Hynek\n */\nclass AbstractLayerToolTabControlState extends AbstractTabControlState {\n\n    /**\n     * It creates a tab control state.\n     */\n    constructor() {\n        super();\n    }\n}\nexport default AbstractLayerToolTabControlState;","import AbstractTabControl from \"../../../sidebar/model/control/AbstractTabControl\";\nimport AbstractLayerToolTabControlDefaults from \"./AbstractLayerToolTabControlDefaults\";\nimport AbstractLayerToolTabControlState from \"./AbstractLayerToolTabControlState\";\n\n/**\n * This class provides controls for management of the layer sidebar tab.\n * \n * @author Jiri Hynek\n */\nclass AbstractLayerToolTabControl extends AbstractTabControl {\n\n    constructor(tool) {\n        super(tool);\n\n        this.tabContent = undefined;\n    }\n\n    /**\n     * It creates new defaults of the tab control.\n     */\n    createDefaults() {\n        return new AbstractLayerToolTabControlDefaults();\n    }\n\n    /**\n     * It creates new state of the tab control.\n     */\n    createState() {\n        return new AbstractLayerToolTabControlState();\n    }\n\n    /**\n     * It returns generic layer tab pane.\n     */\n    getTabContent() {\n        if(this.tabContent == undefined) {\n            // tab pane contains empty div element\n            this.tabContent = document.createElement('div');\n        }\n\n        return this.tabContent; \n    }\n\n    /**\n     * It acquire selected data mapping from input values.\n     * \n     * This function is intended to be extended.\n     */\n    getInputValues() {\n        return {};\n    }\n\n    /**\n     * It updates selected items according to the given selection.\n     * \n     * This function is intended to be extended.\n     * \n     * @param {*} dataMapping \n     */\n    setInputValues(dataMapping) {\n    }\n}\nexport default AbstractLayerToolTabControl;","import AbstractToolState from \"../../../model/tool/abstract/AbstractToolState\";\nimport LayerToolDefaults from \"./AbstractLayerToolDefaults\";\n\n/**\n * This class provide functions for using the state of the layer tool.\n * \n * @author Jiri Hynek\n */\nclass AbstractLayerToolState extends AbstractToolState {\n\n    /**\n     * It creates a tool state.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It resets state with respect to initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {LayerToolDefaults} defaults \n     */\n    reset(defaults) {\n        super.reset(defaults);\n\n        let props = this.getProps();\n\n        // the layer tool properties\n        this.setLayerName(props.name == undefined && defaults ? defaults.getLayerName() : props.name);\n    }\n\n    /**\n     * Help function which resets the state properties realated with map if not defined.\n     */\n    resetMapVariables(map, defaults) {\n        super.resetMapVariables(map, defaults);\n\n        let props = this.getProps();\n        this.setDataMapping(props.data == undefined && defaults && map ? defaults.getDataMapping() : props.data);\n    }\n\n    /**\n     * The metod takes config and desrializes the values.\n     * \n     * @param {*} config \n     */\n    deserialize(config) {\n        super.deserialize(config);\n\n        // the layer tool config\n        if(config.name != undefined) this.setLayerName(config.name);\n        if(config.data != undefined) this.setDataMapping(config.data);\n        // TODO data mapping deserialization\n    }\n\n    /**\n     * The method serializes the tool state. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {LayerToolDefaults} defaults\n     */\n    serialize(defaults) {\n        let config = super.serialize(defaults);\n\n        // serialize the layer tool properties\n        config.layerName = defaults && this.getLayerName() == defaults.getLayerName() ? undefined : this.getLayerName();\n        config.data = this.getDataMapping(); // do not use defaults\n        // TODO data mapping serialization\n\n        return config;\n    }\n\n    /**\n     * It returns the layer name property of the tool state.\n     */\n    getLayerName() {\n        return this.layerName;\n    }\n\n    /**\n     * It sets the layer name property of the tool state.\n     * \n     * @param {string} layerName \n     */\n    setLayerName(layerName) {\n       this.layerName = layerName;\n    }\n\n    /**\n     * It returns the data mapping property of the tool state.\n     */\n    getDataMapping() {\n        return this.dataMapping;\n    }\n\n    /**\n     * It sets the data mapping property of tool state.\n     * \n     * @param {*} dataMapping \n     */\n    setDataMapping(dataMapping) {\n       this.dataMapping = dataMapping;\n    }\n}\nexport default AbstractLayerToolState;","import AbstractEvent from \"../../../model/event/abstract/AbstractEvent\";\nimport AbstractTool from \"../../../model/tool/abstract/AbstractTool\";\nimport LayerTabControl from \"./sidebar/AbstractLayerToolTabControl\";\nimport LayerToolDefaults from \"./AbstractLayerToolDefaults\";\nimport LayerToolState from \"./AbstractLayerToolState\";\n\n/**\n * This class wraps filter tool. It provides methods for layer management.\n * \n * @author Jiri Hynek\n */\nclass AbstractLayerTool extends AbstractTool {\n\n    /**\n     * It creates a new tool with respect to the props.\n     * \n     * @param {*} props \n     */\n    constructor(props) {\n        super(props);\n\n        // the tab control for a sidebar will be created only if needed\n        this.tabControl = undefined;\n    }\n\n    /**\n     * A unique string of the tool type.\n     */\n    static TYPE() {\n        return \"geovisto-tool-layer-abstract\";\n    }\n\n    /**\n     * It creates a copy of the uninitialized tool.\n     */\n    copy() {\n        return new LayerTool(this.getProps());\n    }\n\n    /**\n     * It creates new defaults of the tool.\n     */\n    createDefaults() {\n        return new LayerToolDefaults();\n    }\n\n    /**\n     * It returns default tool state.\n     */\n    createState() {\n        return new LayerToolState();\n    }\n\n    /**\n     * It returns tab control with respect to the configuration\n     */\n    getSidebarTabControl() {\n        if(this.tabControl == undefined) {\n            this.tabControl = this.createSidebarTabControl();\n        }\n        return this.tabControl;\n    }\n\n    /**\n     * It creates new tab control.\n     * \n     * This function can be extended.\n     */\n    createSidebarTabControl() {\n        return new LayerTabControl({ tool: this });\n    }\n\n    /**\n     * It creates new layer with respect to configuration\n     */\n    create() {\n        if(this.isEnabled()) {\n            this.showLayerItems();\n        }\n    }\n\n    /**\n     * It changes layer state to enabled/disabled.\n     * \n     * @param {*} enabled\n     */\n    setEnabled(enabled) {\n        if(enabled != this.isEnabled()) {\n            // update state\n            this.getState().setEnabled(enabled);\n\n            // show ot hide the layer\n            if(enabled) {\n                this.showLayerItems();\n            } else {\n                this.hideLayerItems();\n            }\n        }\n    }\n\n    /**\n     * Help function which shows layer items.\n     * \n     * This function is meant to be private.\n     */\n    showLayerItems() {\n        // get/create items\n        let layerItems = this.getLayerItems();\n\n        // render/remove items\n        for(let j = 0; j < layerItems.length; j++) {\n            layerItems[j].addTo(this.getMap().getState().getLeafletMap());\n        }\n\n        // post create items\n        this.postCreateLayerItems();\n    }\n\n    /**\n     * Help function which hides layer items\n     * \n     * This function is meant to be private.\n     */\n    hideLayerItems() {\n        // get/create items\n        let layerItems = this.getLayerItems();\n\n        // render/remove items\n        for(let j = 0; j < layerItems.length; j++) {\n            this.getMap().getState().getLeafletMap().removeLayer(layerItems[j]);\n        }\n    }\n\n    /**\n     * It returns layer items which should be rendered.\n     */\n    getLayerItems() {\n        if(this.layerItems == undefined) {\n            this.layerItems = this.createLayerItems();\n        }\n        return this.layerItems;\n    }\n\n    /**\n     * It creates layer items.\n     * \n     * Override this function.\n     */\n    createLayerItems() {\n        return [];\n    }\n\n    /**\n     * This function is called when layer items are rendered.\n     * \n     * Override this function if needed.\n     */\n    postCreateLayerItems() {\n    }\n\n    /**\n     * It updates data mapping and redraws the layer.\n     * It can be used by the layer tab providers when input values are changed.\n     * \n     * @param {*} dataMapping \n     */\n    updateDataMapping(dataMapping, onlyStyle) {\n        // update state\n        this.getState().setDataMapping(dataMapping);\n\n        // redraw the layer items\n        this.redraw(onlyStyle);\n    }\n\n    /**\n     * It reloads data and redraw the layer.\n     * \n     * Override this function.\n     * \n     * @param {*} onlyStyle \n     */\n    redraw(onlyStyle) {\n    }\n\n    /**\n     * This function is called when a custom event is invoked.\n     * \n     * Override this function if needed.\n     * \n     * @param {AbstractEvent} event \n     */\n    handleEvent(event) {\n    }\n}\nexport default AbstractLayerTool;","import AbstractToolDefaults from \"../../../model/tool/abstract/AbstractToolDefaults\";\nimport AbstractLayerTool from \"./AbstractLayerTool\";\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass AbstractLayerToolDefaults extends AbstractToolDefaults {\n\n    /**\n     * It initializes tool defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns a unique type string of the tool which is based on the layer it wraps.\n     */\n    getType() {\n        return AbstractLayerTool.TYPE();\n    }\n\n    /**\n     * It returns the layer name.\n     */\n    getLayerName() {\n        return \"Abstract layer\";\n    }\n\n    /**\n     * It returns the default mapping of data domains to chart dimensions.\n     */\n    getDataMapping() {\n        return undefined;\n    }\n\n    /**\n     * It returns the data mapping model.\n     */\n    getDataMappingModel() {\n        return undefined;\n    }\n}\nexport default AbstractLayerToolDefaults;","import MapLayerTool from \"./MapLayerTool\";\nimport AbstractLayerToolDefaults from \"../abstract/AbstractLayerToolDefaults\";\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass MapLayerToolDefaults extends AbstractLayerToolDefaults {\n\n    /**\n     * It initializes tool defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns a unique type string of the tool which is based on the layer it wraps.\n     */\n    getType() {\n        return MapLayerTool.TYPE();\n    }\n\n    /**\n     * It returns the layer name.\n     */\n    getLayerName() {\n        return \"Map layer\";\n    }\n\n    /**\n     * It returns the preferred base map.\n     */\n    getBaseMap() {\n        return 'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png';\n    }\n}\nexport default MapLayerToolDefaults;","import AbstractLayerToolState from \"../abstract/AbstractLayerToolState\";\nimport MapLayerToolDefaults from \"./MapLayerToolDefaults\";\n\n/**\n * This class provide functions for using the state of the layer tool.\n * \n * @author Jiri Hynek\n */\nclass MapLayerToolState extends AbstractLayerToolState {\n\n    /**\n     * It creates a tool state.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It resets state with respect to initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {MapLayerToolDefaults} defaults \n     */\n    reset(defaults) {\n        super.reset(defaults);\n\n        let props = this.getProps();\n\n        // the map layer tool properties\n        this.setBaseMap(props.baseMap == undefined && defaults ? defaults.getBaseMap() : props.baseMap);\n        // TODO\n    }\n\n    /**\n     * The metod takes config and desrializes the values.\n     * \n     * @param {*} config \n     */\n    deserialize(config) {\n        super.deserialize(config);\n\n        // the map layer tool config\n        // TODO\n    }\n\n    /**\n     * The method serializes the tool state. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {MapLayerToolDefaults} defaults\n     */\n    serialize(defaults) {\n        let config = super.serialize(defaults);\n\n        // serialize the map layer tool properties\n        // TODO\n\n        return config;\n    }\n\n    /**\n     * It returns a Leaflet tile layer.\n     */\n    getLayer() {\n        return this.layer;\n    }\n\n    /**\n     * It sets a Leaflet tile layer.\n     * \n     * @param {L.TileLayer} layer \n     */\n    setLayer(layer) {\n        this.layer = layer;\n    }\n\n    /**\n     * It returns a base map ID.\n     */\n    getBaseMap() {\n        return this.baseMap;\n    }\n\n    /**\n     * It sets a base map ID.\n     * \n     * @param {string} baseMap\n     */\n    setBaseMap(baseMap) {\n        this.baseMap = baseMap;\n    }\n\n    // TODO\n}\nexport default MapLayerToolState;","import AbstractLayerToolTabControlDefaults from \"../../abstract/sidebar/AbstractLayerToolTabControlDefaults\";\n\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass MapLayerToolTabControlDefaults extends AbstractLayerToolTabControlDefaults {\n\n    /**\n     * It creates tab control defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns the icon of the tab pane.\n     */\n    getIcon() {\n        return '<i class=\"fa fa-globe\"></i>';\n    }\n}\nexport default MapLayerToolTabControlDefaults;","import AbstractLayerToolTabControlState from \"../../abstract/sidebar/AbstractLayerToolTabControlState\";\n\n/**\n * This class manages the state of the sidebar tab.\n * It wraps the state since the sidebar tab can work with state objects which needs to be explicitly serialized.\n * \n * @author Jiri Hynek\n */\nclass MapLayerToolTabControlState extends AbstractLayerToolTabControlState {\n\n    /**\n     * It creates a tab control state.\n     */\n    constructor() {\n        super();\n    }\n}\nexport default MapLayerToolTabControlState;","import MapLayerToolTabControlDefaults from \"./MapLayerToolTabControlDefaults\";\nimport MapLayerToolTabControlState from \"./MapLayerToolTabControlState\";\nimport AbstractLayerToolTabControl from \"../../abstract/sidebar/AbstractLayerToolTabControl\";\n\n/**\n * This class provides controls for management of the layer sidebar tab.\n * \n * @author Jiri Hynek\n */\nclass MapLayerToolTabControl extends AbstractLayerToolTabControl {\n\n    constructor(tool) {\n        super(tool);\n    }\n\n    /**\n     * It creates new defaults of the tab control.\n     */\n    createDefaults() {\n        return new MapLayerToolTabControlDefaults();\n    }\n\n    /**\n     * It creates new state of the tab control.\n     */\n    createState() {\n        return new MapLayerToolTabControlState();\n    }\n\n    // TODO: This class should be modified in future to provide settings for Map layer (e.g., different tile layers).\n\n}\nexport default MapLayerToolTabControl;","import GenericObjectEvent from \"../../../../model/event/generic/GenericObjectEvent\";\n\n\n/**\n * This class provides the theme change event.\n * \n * @author Jiri Hynek\n */\nclass ThemesToolEvent extends GenericObjectEvent {\n\n    /**\n     * It initializes event.\n     */\n    constructor(themesTool, theme) {\n        super(ThemesToolEvent.TYPE(), themesTool, theme);\n        this.theme = theme;\n    }\n\n    /**\n     * Type of the event.\n     */\n    static TYPE() {\n        return \"themes-tool-event\";\n    }\n}\nexport default ThemesToolEvent;","import L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport MapLayerToolDefaults from './MapLayerToolDefaults';\nimport MapLayerToolState from './MapLayerToolState';\nimport MapLayerToolTabControl from './sidebar/MapLayerToolTabControl';\nimport AbstractLayerTool from '../abstract/AbstractLayerTool';\nimport ThemesToolEvent from '../../themes/model/event/ThemesToolEvent';\n\n/**\n * This class represents Map layer tool. It use tile layer and OSM maps.\n * \n * @author Jiri Hynek\n */\nclass MapLayerTool extends AbstractLayerTool {\n\n    /**\n     * It creates a new tool with respect to the props.\n     * \n     * @param {*} props \n     */\n    constructor(props) {\n        super(props);\n    }\n\n    /**\n     * A unique string of the tool type.\n     */\n    static TYPE() {\n        return \"geovisto-tool-layer-map\"; \n    }\n\n    /**\n     * It creates a copy of the uninitialized tool.\n     */\n    copy() {\n        return new MapLayerTool(this.getProps());\n    }\n\n    /**\n     * It creates new defaults of the tool.\n     */\n    createDefaults() {\n        return new MapLayerToolDefaults();\n    }\n\n    /**\n     * It returns default tool state.\n     */\n    createState() {\n        return new MapLayerToolState();\n    }\n\n    /**\n     * It creates new tab control.\n     */\n    createSidebarTabControl() {\n        return new MapLayerToolTabControl({ tool: this });\n    }\n\n    /**\n     * It creates layer items.\n     */\n    createLayerItems() {\n        // create a tile layer\n        let layer = this.createTileLayer(this.getState().getBaseMap());\n\n        // update state\n        this.getState().setLayer(layer);\n\n        return [ layer ];\n    }\n\n    /**\n     * Creates new tile layer\n     * \n     * @param {*} tileID \n     */\n    createTileLayer(tileID) {\n        // ----------------- TODO: refactorization needed\n        let layer = L.tileLayer(tileID, {    \n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n            subdomains: 'abcd',\n            maxZoom: 19,\n            minZoom: 1,\n        });\n        return layer;\n    }\n\n    /**\n     * This function is called when a custom event is invoked.\n     * \n     * @param {AbstractEvent} event \n     */\n    handleEvent(event) {\n        if(event.getType() == ThemesToolEvent.TYPE()) {\n            this.onThemeChange(event.getObject())\n        }\n    }\n\n    /**\n     * This function updates theme used in the tool.\n     */\n    onThemeChange(theme) {\n        // update base map\n        this.getState().setBaseMap(theme.getBaseMap());\n\n        let layer = this.getState().getLayer();\n        if(layer && layer._url != theme.getBaseMap()) {\n            // remove the old layer\n            this.getMap().getState().getLeafletMap().removeLayer(layer);\n\n            // create a new tile layer\n            layer = this.createTileLayer(this.getState().getBaseMap());\n\n            // update state\n            this.getState().setLayer(layer);\n\n            // add the new layer to the leaflet map\n            layer.addTo(this.getMap().getState().getLeafletMap());\n        } else {\n            \n        }\n    }\n}\n\nexport default MapLayerTool;","import ChoroplethLayerTool from \"./ChoroplethLayerTool\";\nimport AbstractLayerToolDefaults from \"../abstract/AbstractLayerToolDefaults\";\nimport AutocompleteSidebarInput from \"../../../inputs/input/AutocompleteSidebarInput\";\n\n/**\n * TODO: refactorization needed!\n */\nconst TYPE = 'choropleth';\n\nconst INPUT_ID_PREFIX = \"geovisto-input-\" + TYPE;\n\n/**\n * Data mapping model which can be used in the sidebar form.\n */\nconst MAPPING_MODEL = {\n    country: {\n        id: INPUT_ID_PREFIX + \"-country\",\n        name: \"country\",\n        label: \"Country\",\n        input: AutocompleteSidebarInput.ID()\n    },\n    value: {\n        id: INPUT_ID_PREFIX + \"-value\",\n        name: \"value\",\n        label: \"Value\",\n        input: AutocompleteSidebarInput.ID()\n    },\n    aggregation: {\n        id: INPUT_ID_PREFIX + \"-aggregation\",\n        name: \"aggregation\",\n        label: \"Agregation\",\n        options: [ \"count\", \"sum\" ],\n        input: AutocompleteSidebarInput.ID()\n    },\n    color: {\n        id: INPUT_ID_PREFIX + \"-color\",\n        name: \"color\",\n        label: \"Color\",\n        options: [ \"orange\", \"blue\", \"red\" ],\n        input: AutocompleteSidebarInput.ID()\n    }\n}\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass ChoroplethLayerToolDefaults extends AbstractLayerToolDefaults {\n\n    /**\n     * It initializes tool defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns a unique type string of the tool which is based on the layer it wraps.\n     */\n    getType() {\n        return ChoroplethLayerTool.TYPE();\n    }\n\n    /**\n     * It returns the layer name.\n     */\n    getLayerName() {\n        return \"Choropleth layer\";\n    }\n\n    /**\n     * It returns the default mapping of data domains to chart dimensions.\n     */\n    getDataMapping() {\n        let dataMapping = {};\n        \n        let dataMappingModel = this.getDataMappingModel();\n        let implicitDataDomainLabel = this.getMapObject().getMap().getState().getMapData().getDataDomainLabels()[0];\n        \n        dataMapping[dataMappingModel.country.name] = implicitDataDomainLabel;\n        dataMapping[dataMappingModel.value.name] = implicitDataDomainLabel;\n        dataMapping[dataMappingModel.aggregation.name] = dataMappingModel.aggregation.options[0];\n        dataMapping[dataMappingModel.color.name] = dataMappingModel.color.options[0];\n\n        return dataMapping;\n    }\n\n    /**\n     * It returns the data mapping model.\n     */\n    getDataMappingModel() {\n        return MAPPING_MODEL;\n    }\n    \n    /**\n     * It returns default centroids.\n     */\n    getPolygons() {\n        return this.getMapObject().getMap().getState().getPolygons();\n    }\n\n    /**\n     * It returns preferred z index for the choropoleth layer\n     */\n    getZIndex() {\n        return 350;\n    }\n}\nexport default ChoroplethLayerToolDefaults;","import AbstractLayerToolState from \"../abstract/AbstractLayerToolState\";\nimport ChoroplethLayerToolDefaults from \"./ChoroplethLayerToolDefaults\";\n\n/**\n * This class provide functions for using the state of the layer tool.\n * \n * @author Jiri Hynek\n */\nclass ChoroplethLayerToolState extends AbstractLayerToolState {\n\n    /**\n     * It creates a tool state.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It resets state with respect to initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {ChoroplethLayerToolDefaults} defaults \n     */\n    reset(defaults) {\n        super.reset(defaults);\n\n        // the layer tool properties\n        this.setZIndex(defaults ? defaults.getZIndex() : 350);\n        // TODO\n    }\n\n    /**\n     * Help function which resets the state properties realated with map if not defined.\n     */\n    resetMapVariables(map, defaults) {\n        super.resetMapVariables(map, defaults);\n        \n        let props = this.getProps();\n        this.setPolygons(props.polygons == undefined && defaults && map ? defaults.getPolygons() : props.polygons);\n    }\n\n    /**\n     * The metod takes config and desrializes the values.\n     * \n     * @param {*} config \n     */\n    deserialize(config) {\n        super.deserialize(config);\n\n        // the layer tool config\n        // TODO\n    }\n\n    /**\n     * The method serializes the tool state. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {ChoroplethLayerToolDefaults} defaults\n     */\n    serialize(defaults) {\n        let config = super.serialize(defaults);\n\n        // serialize the layer tool properties\n        // TODO\n\n        return config;\n    }\n\n    /**\n     * It returns a Leaflet geoJSON layer.\n     */\n    getLayer() {\n        return this.layer;\n    }\n\n    /**\n     * It sets a Leaflet geoJSON layer.\n     * \n     * @param {L.svg} layer \n     */\n    setLayer(layer) {\n        this.layer = layer;\n    }\n\n    /**\n     * It returns a Leaflet popup control.\n     */\n    getLayerPopup() {\n        return this.popup;\n    }\n\n    /**\n     * It sets a Leaflet popup control.\n     * \n     * @param {L.control} popup \n     */\n    setLayerPopup(popup) {\n        this.popup = popup;\n    }\n\n    /**\n     * It returns the polygons.\n     */\n    getPolygons() {\n        return this.polygons;\n    }\n\n    /**\n     * It sets the polygons.\n     * \n     * @param {*} polygons \n     */\n    setPolygons(polygons) {\n        this.polygons = polygons;\n    }\n\n    /**\n     * It returns the hovered item.\n     */\n    getHoveredItem() {\n        return this.hoveredItem;\n    }\n\n    /**\n     * It sets the hovered item.\n     * \n     * @param {*} hoveredItem \n     */\n    setHoveredItem(hoveredItem) {\n        this.hoveredItem = hoveredItem;\n    }\n\n    /**\n     * It returns the z index.\n     */\n    getZIndex() {\n        return this.zindex;\n    }\n\n    /**\n     * It sets the z index.\n     * \n     * @param {*} zindex \n     */\n    setZIndex(zindex) {\n        this.zindex = zindex;\n    }\n\n    // TODO\n}\nexport default ChoroplethLayerToolState;","import AbstractLayerToolTabControlDefaults from \"../../abstract/sidebar/AbstractLayerToolTabControlDefaults\";\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass ChoroplethLayerToolTabControlDefaults extends AbstractLayerToolTabControlDefaults {\n\n    /**\n     * It creates tab control defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns the icon of the tab pane.\n     */\n    getIcon() {\n        return '<i class=\"fa fa-th-large\"></i>';\n    }\n}\nexport default ChoroplethLayerToolTabControlDefaults;","import AbstractLayerToolTabControlState from \"../../abstract/sidebar/AbstractLayerToolTabControlState\";\n\n/**\n * This class manages the state of the sidebar tab.\n * It wraps the state since the sidebar tab can work with state objects which needs to be explicitly serialized.\n * \n * @author Jiri Hynek\n */\nclass ChoroplethLayerToolTabControlState extends AbstractLayerToolTabControlState {\n\n    /**\n     * It creates a tab control state.\n     */\n    constructor() {\n        super();\n    }\n}\nexport default ChoroplethLayerToolTabControlState;","import ChoroplethLayerToolTabControlDefaults from \"./ChoroplethLayerToolTabControlDefaults\";\nimport ChoroplethLayerToolTabControlState from \"./ChoroplethLayerToolTabControlState\";\nimport AbstractLayerToolTabControl from \"../../abstract/sidebar/AbstractLayerToolTabControl\";\nimport SidebarInputFactory from \"../../../../inputs/SidebarInputFactory\";\n\n/**\n * This class provides controls for management of the layer sidebar tab.\n * \n * @author Jiri Hynek\n */\nclass ChoropolethLayerToolTabControl extends AbstractLayerToolTabControl {\n\n    constructor(tool) {\n        super(tool);\n\n        this.tabContent = undefined;\n    }\n\n    /**\n     * It creates new defaults of the tab control.\n     */\n    createDefaults() {\n        return new ChoroplethLayerToolTabControlDefaults();\n    }\n\n    /**\n     * It creates new state of the tab control.\n     */\n    createState() {\n        return new ChoroplethLayerToolTabControlState();\n    }\n\n    /**\n     * It acquire selected data mapping from input values.\n     */\n    getInputValues() {\n        // get data mapping model\n        let model = this.getDefaults().getDataMappingModel();\n        \n        // create new selection\n        let dataMapping = {};\n\n        // get selected data domains values\n        dataMapping[model.country.name] = this.inputCountry.getValue();\n        dataMapping[model.value.name] = this.inputValue.getValue();\n        dataMapping[model.aggregation.name] = this.inputAggregation.getValue();\n        // deprecated\n        // dataMapping[model.color.name] = this.inputColor.getValue();\n\n        return dataMapping;\n    }\n\n    /**\n     * It updates selected input values according to the given data mapping.\n     * \n     * @param {*} dataMapping \n     */\n    setInputValues(dataMapping) {\n        // get data model\n        let model = this.getDefaults().getDataMappingModel();\n\n        // update inputs\n        this.inputCountry.setValue(dataMapping[model.country.name]);\n        this.inputValue.setValue(dataMapping[model.value.name]);\n        this.inputAggregation.setValue(dataMapping[model.aggregation.name]);\n        // deprecated\n        //this.inputColor.setValue(dataMapping[model.color.name]);\n    }\n\n    /**\n     * It returns the sidebar tab pane.\n     */\n    getTabContent() {\n        var _this = this;\n\n        // event handler: change color action\n        let changeColorAction = function(e) {\n           // get selected values and update layer's data mapping\n           _this.getTool().updateDataMapping(_this.getInputValues(), true);\n        }\n\n        // event handler: change dimension action\n        let changeDimensionAction = function(e) {\n            // get selected values and update layer's data mapping\n            _this.getTool().updateDataMapping(_this.getInputValues());\n        }\n        \n        // tab content\n        let tab = document.createElement('div');\n        let elem = tab.appendChild(document.createElement('div'));\n\n        // get data mapping model\n        let model = this.getDefaults().getDataMappingModel();\n        let dataDomainLabels = this.getTool().getMap().getState().getMapData().getDataDomainLabels();\n\n        // select country\n        this.inputCountry = SidebarInputFactory.createSidebarInput(model.country.input, { label: model.country.label , options: dataDomainLabels, action: changeDimensionAction });\n        elem.appendChild(this.inputCountry.create());\n\n        // select value\n        this.inputValue = SidebarInputFactory.createSidebarInput(model.value.input, { label: model.value.label , options: dataDomainLabels, action: changeDimensionAction });\n        elem.appendChild(this.inputValue.create());\n\n        // select aggregation\n        this.inputAggregation = SidebarInputFactory.createSidebarInput(model.aggregation.input, { label: model.aggregation.label, options: model.aggregation.options, action: changeDimensionAction });\n        elem.appendChild(this.inputAggregation.create());\n\n        // select color scheme\n        // deprecated\n        /*this.inputColor = SidebarInputFactory.createSidebarInput(model.color.input, { label: model.color.label, options: model.color.options, action: changeColorAction });\n        elem.appendChild(this.inputColor.create());*/\n\n        this.setInputValues(this.getTool().getState().getDataMapping());\n        \n        return tab;\n    }\n\n}\nexport default ChoropolethLayerToolTabControl;","import L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './style/choroplethLayer.scss'\nimport AbstractLayerTool from '../abstract/AbstractLayerTool';\nimport ChoroplethLayerToolState from './ChoroplethLayerToolState';\nimport ChoroplethLayerToolDefaults from './ChoroplethLayerToolDefaults';\nimport ChoropolethLayerToolTabControl from './sidebar/ChoroplethLayerToolTabControl';\nimport ThemesToolEvent from '../../themes/model/event/ThemesToolEvent';\nimport SelectionToolEvent from '../../selection/model/event/SelectionToolEvent';\nimport DataChangeEvent from '../../../model/event/basic/DataChangeEvent';\nimport MapSelection from '../../selection/model/item/generic/MapSelection';\nimport SelectionTool from '../../selection/SelectionTool';\n\n// TODO: move to defaults\nconst COLOR_orange = ['#8c8c8c','#ffffcc','#ffff99','#ffcc99','#ff9966','#ff6600','#ff0000','#cc0000'];\nconst COLOR_red = ['#8c8c8c','#FED976','#FEB24C','#FD8D3C','#FC4E2A','#E31A1C','#BD0026','#800026'];\nconst COLOR_blue = ['#8c8c8c','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#0c2c84'];\n\nconst SCALE = [1, 100, 1000, 10000, 100000, 1000000, 10000000];\n\n/**\n * This class represents Choropleth layer tool. It works with geojson polygons representing countries.\n * \n * @author Jiri Hynek\n */\nclass ChoroplethLayerTool extends AbstractLayerTool {\n\n    /**\n     * It creates a new tool with respect to the props.\n     * \n     * @param {*} props \n     */\n    constructor(props) {\n        super(props);\n    }\n\n    /**\n     * A unique string of the tool type.\n     */\n    static TYPE() {\n        return \"geovisto-tool-layer-choropleth\"; \n    }\n\n    /**\n     * It creates a copy of the uninitialized tool.\n     */\n    copy() {\n        return new ChoroplethLayerTool(this.getProps());\n    }\n\n    /**\n     * It creates new defaults of the tool.\n     */\n    createDefaults() {\n        return new ChoroplethLayerToolDefaults();\n    }\n\n    /**\n     * It returns default tool state.\n     */\n    createState() {\n        return new ChoroplethLayerToolState();\n    }\n\n    /**\n     * Help function which acquires and returns the selection tool if available.\n     */\n    getSelectionTool() {\n        if(this.selectionTool == undefined) {\n            let tools = this.getMap().getState().getTools().getByType(SelectionTool.TYPE());\n            if(tools.length > 0) {\n                this.selectionTool = tools[0];\n            }\n        }\n        return this.selectionTool;\n    }\n\n    /**\n     * It creates new tab control.\n     */\n    createSidebarTabControl() {\n        return new ChoropolethLayerToolTabControl({ tool: this });\n    }\n\n    /**\n     * It creates layer items.\n     */\n    createLayerItems() {\n        var _this = this;\n\n        // ----------------- TODO: refactorization needed\n\n        function thousands_separator(num) {\n            var num_parts = num.toString().split(\".\");\n            num_parts[0] = num_parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n            return num_parts.join(\".\");\n        }\n       \n        let mouseOver = function(e) {\n            let layerItem = e.target;\n            _this.getState().setHoveredItem(layerItem.feature.id);\n            _this.updateItemStyle(layerItem);\n            var popup = \"<b>\" + e.target.feature.name + \"</b>\";\n            if(e.target.feature.value != undefined){\n                popup += \"<br>\";\n                if (_this.getState().getDataMapping()[_this.getDefaults().getDataMappingModel().aggregation.name] == \"sum\") {\n                    popup+= \"sum: \";\n                    popup+=thousands_separator(e.target.feature.value);\n\n                } else {\n                    popup+=thousands_separator(e.target.feature.value);\n                    if (e.target.feature.value>1){\n                        popup+= \" records\";\n                    } else {\n                        popup+= \" record\";\n                    }\n                }\n            }\n            e.target.bindTooltip(popup,{className: 'leaflet-popup-content', sticky: true}).openTooltip();\n        \n            if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n                layerItem.bringToFront();\n            }\n        }\n    \n        let mouseOut = function(e) {\n            let layerItem = e.target;\n            _this.getState().setHoveredItem(undefined);\n            _this.updateItemStyle(layerItem);\n            _this.getState().getLayerPopup().update();\n\n            if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n                layerItem.bringToBack();\n            }\n        }\n    \n        let click = function(e) {\n            //_this.getMap().getState().getLeafletMap().fitBounds(e.target.getBounds());\n            //console.log(\"fire click event\");\n            // notify selection tool\n            let selectionTool = _this.getSelectionTool();\n            if(selectionTool) {\n                let selection = new MapSelection(_this, [ e.target.feature.id ]);\n                //console.log(\"select:\", selection, selection.equals(selectionTool.getState().getSelection()));\n                if(selection.equals(selectionTool.getState().getSelection())) {\n                    _this.getSelectionTool().setSelection(SelectionTool.EMPTY_SELECTION());\n                } else {\n                    _this.getSelectionTool().setSelection(selection);\n                }\n            }\n        }\n    \n        let onEachFeature = function(feature, layer) {\n            layer.on({\n                mouseover: mouseOver,\n                mouseout: mouseOut,\n                click: click\n            });\n        }\n    \n        // combine geo with data\n        this.updatePolygons(this);\n    \n        var paneId = this.getId();\n        let pane = this.getMap().getState().getLeafletMap().createPane(paneId);\n        pane.style.zIndex = this.getState().getZIndex();\n        // create Choropleth layer\n        let layer = L.geoJSON(this.getState().getPolygons(), {\n            onEachFeature: onEachFeature,\n            pane: paneId\n        });\n        //layer._layerComponent = this;\n    \n        // create info control that shows country info on hover\n        let layerPopup = L.control();\n    \n        layerPopup.onAdd = function (map) {\n            this._div = L.DomUtil.create('div', 'info');\n            this.update();\n            return this._div;\n        };\n    \n        layerPopup.update = function (props) {\n            this.innerHTML =  (props ?\n                '<b>' + props.name + '</b><br />' + props.value + '</sup>'\n                : 'Hover over a state');\n        };\n\n        // update state\n        this.getState().setLayer(layer);\n        this.getState().setLayerPopup(layerPopup);\n    \n        return [ layer, layerPopup ];\n    }\n\n    /**\n     * It updates polygons so they represent current data.\n     */\n    updatePolygons() {\n        //console.log(\"updating map data\", this);\n\n        // delete the 'value' property of every geo feature object if defined\n        let polygons = this.getState().getPolygons();\n        // TODO create new map and do not modify polygons structure\n        for (var i = 0; i < polygons.length; i++) {\n            polygons[i].value = undefined;\n        }\n\n        // set a new value of the 'value' property of every geo feature\n        let geoCountry;\n        let data = this.getMap().getState().getCurrentData();\n        let dataLen = data.length;\n        let mapData = this.getMap().getState().getMapData();\n        let dataMappingModel = this.getDefaults().getDataMappingModel();\n        let dataMapping = this.getState().getDataMapping();\n        let countryDataDomain = mapData.getDataDomain(dataMapping[dataMappingModel.country.name]);\n        let valueDataDomain = mapData.getDataDomain(dataMapping[dataMappingModel.value.name]);\n        //console.log(countryDataDomain, valueDataDomain);\n        let foundCountries, foundValues;\n        //console.log(data);\n        for (let i = 0; i < dataLen; i++) {\n            // find the 'country' properties\n            foundCountries = mapData.getItemValues(countryDataDomain,  data[i]);\n            //console.log(\"search: \", countryDataDomain, data[i], foundCountries);\n            //console.log(\"search: \", foundCountries);\n            // find the 'value' properties\n            foundValues = mapData.getItemValues(valueDataDomain, data[i]);\n            //console.log(\"search: \", foundValues);\n\n            // since the data are flattened we can expect max one found item\n            if(foundCountries.length == 1) {\n                geoCountry = polygons.find(x => x.id == foundCountries[0]);\n                // test if country exists in the map\n                if(geoCountry != undefined) {\n                    // initilizace map country value property\n                    if(geoCountry.value == undefined) {\n                        geoCountry.value = 0;\n                    }\n                    // set value with respect to the aggregation function\n                    if(dataMapping[dataMappingModel.aggregation.name] == \"sum\") {\n                        if(foundValues.length == 1 && foundValues[0] != null && typeof foundValues[0] === 'number') {\n                            geoCountry.value += foundValues[0];\n                        }\n                    } else {\n                        // count\n                        geoCountry.value++;\n                    }\n                }\n            }   \n        }\n    }\n\n    /**\n     * This function is called when layer items are rendered.\n     */\n    postCreateLayerItems() {\n        if(this.getState().getLayer()) {\n            this.updateStyle();\n        }\n    }\n\n    /**\n     * It reloads data and redraw the layer.\n     */\n    redraw(onlyStyle) {\n        if(!onlyStyle) {\n            // combine geo with data\n            this.updatePolygons();\n        }\n\n        // update style\n        this.updateStyle();\n    }\n\n    /**\n     * This function is called when a custom event is invoked.\n     * \n     * @param {AbstractEvent} event \n     */\n    handleEvent(event) {\n        if(event.getType() == DataChangeEvent.TYPE()) {\n            // data change\n            this.redraw();\n        } else if(event.getType() == SelectionToolEvent.TYPE()) {\n            // selection change\n            this.redraw(true);\n        } else if(event.getType() == ThemesToolEvent.TYPE()) {\n            // theme change\n            this.redraw(true);\n        }\n    }\n\n    // ----------------- TODO: refactorization needed\n\n    /**\n     * It returns scale.\n     */\n    getScale() {\n        return SCALE;\n    }\n\n    /**\n     * It returns color style for the current template.\n     * \n     * @deprecated\n     */\n    getColors() {\n        let dataMappingModel = this.getDefaults().getDataMappingModel();\n        let dataMapping = this.getState().getDataMapping();\n        if(dataMapping[dataMappingModel.color.name] == 'red') {\n            return COLOR_red;\n        } else if(dataMapping[dataMappingModel.color.name] == 'blue') {\n            return COLOR_blue;\n        }\n            return COLOR_orange;\n    }\n\n    /**\n     * It returns color value for the current template and given value.\n     * \n     * @deprecated\n     */\n    computeColor(val) {\n        let colors = this.getColors();\n        let scale = this.getScale();\n        return val > scale[6] ? colors[7] :\n                val > scale[5] ? colors[6] :\n                val > scale[4] ? colors[5] :\n                val > scale[3] ? colors[4] :\n                val > scale[2] ? colors[3] :\n                val > scale[1] ? colors[2] :\n                val > scale[0] ? colors[1] :\n                colors[0];\n    }\n\n    /**\n     * It returns color class for the current template and given value.\n     */\n    computeColorClass(val) {\n        let scale = this.getScale();\n        return val > scale[6] ? \"leaflet-choropleth-item-clr8\" :\n                val > scale[5] ? \"leaflet-choropleth-item-clr7\" :\n                val > scale[4] ? \"leaflet-choropleth-item-clr6\" :\n                val > scale[3] ? \"leaflet-choropleth-item-clr5\" :\n                val > scale[2] ? \"leaflet-choropleth-item-clr4\" :\n                val > scale[1] ? \"leaflet-choropleth-item-clr3\" :\n                val > scale[0] ? \"leaflet-choropleth-item-clr2\" :\n                \"leaflet-choropleth-item-clr1\";\n    }\n\n    /**\n     * It returns style for the current template and given feature.\n     * \n     * @deprecated\n     */\n    computeStyle(item) {       \n        let feature = item.feature;\n        let hoveredItem = this.getState().getHoveredItem();\n        let selection = this.getSelectionTool() ? this.getSelectionTool().getState().getSelection() : undefined;\n        return {\n            weight: hoveredItem == feature.id ? 4 : 2,\n            opacity: 0.7,\n            color: hoveredItem == feature.id ? \"yellow\":\"white\",\n            dashArray: hoveredItem == feature.id ? '' : '1',\n            fillOpacity: hoveredItem == feature.id ? 0.9 : 0.8,\n            fillColor: selection != null ?\n                        (selection.getTool() == this && selection.getSrcIds().includes(feature.id) ? 'orange' :\n                        (selection.getIds().includes(feature.id) ? 'yellow' : '#8c8c8c'))\n                        : this.computeColor(feature.value)\n        };\n    }\n\n    /**\n     * It returns style classes for the current template and given feature.\n     */\n    computeStyleClasses(item) {\n        let classList = [ \"leaflet-interactive\", \"leaflet-choropleth-item-basic\" ];\n\n        let feature = item.feature;\n\n        // compute color level\n        classList.push(this.computeColorClass(feature.value));\n\n        // hovered\n        if(this.getState().getHoveredItem() == feature.id) {\n            classList.push(\"leaflet-choropleth-item-hover\")\n        }\n\n        // selected / highlighted\n        let selection = this.getSelectionTool() ? this.getSelectionTool().getState().getSelection() : undefined;\n        let selectedIds = selection.getIds();\n        if(selection && selectedIds.length > 0) {\n            if(selectedIds.includes(feature.id)) {\n                if(selection.getTool() == this && selection.getSrcIds().includes(feature.id)) {\n                    // selected\n                    classList.push(\"leaflet-choropleth-item-select\")\n                } else {\n                    // affected, highlighted\n                    classList.push(\"leaflet-choropleth-item-highlight\")\n                }\n            } else {\n                // de-emphasize others\n                classList.push(\"leaflet-choropleth-item-deempasize\")\n            }\n        }\n\n        return classList;\n    }\n\n    /**\n     * It updates style of the given feature using the current template.\n     */\n    updateItemStyle(item) {\n        //item.setStyle(this.computeStyle(item));\n        if(item._path != undefined) {\n            // modify classes\n            item._path.classList.value = this.computeStyleClasses(item).join(\" \");\n        }\n    }\n\n    /**\n     * It updates style of all layer features using the current template.\n     */\n    updateStyle() {\n        if(this.getState().getLayer()) {\n            var _this = this;\n            this.getState().getLayer().eachLayer(function(item) {\n                _this.updateItemStyle(item);\n            });\n        }\n    }\n\n}\n\nexport default ChoroplethLayerTool;\n","import AbstractLayerToolTabControlDefaults from \"../../abstract/sidebar/AbstractLayerToolTabControlDefaults\";\n\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass MarkerLayerToolTabControlDefaults extends AbstractLayerToolTabControlDefaults {\n\n    /**\n     * It creates tab control defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns the icon of the tab pane.\n     */\n    getIcon() {\n        return '<i class=\"fa fa-map-marker\"></i>';\n    }\n}\nexport default MarkerLayerToolTabControlDefaults;","import AbstractLayerToolTabControlState from \"../../abstract/sidebar/AbstractLayerToolTabControlState\";\n\n\n/**\n * This class manages the state of the sidebar tab.\n * It wraps the state since the sidebar tab can work with state objects which needs to be explicitly serialized.\n * \n * @author Jiri Hynek\n */\nclass MarkerLayerToolTabControlState extends AbstractLayerToolTabControlState {\n\n    /**\n     * It creates a tab control state.\n     */\n    constructor() {\n        super();\n    }\n}\nexport default MarkerLayerToolTabControlState;","import MarkerLayerToolTabControlDefaults from \"./MarkerLayerToolTabControlDefaults\";\nimport MarkerLayerToolTabControlState from \"./MarkerLayerToolTabControlState\";\nimport AbstractLayerToolTabControl from \"../../abstract/sidebar/AbstractLayerToolTabControl\";\nimport SidebarInputFactory from \"../../../../inputs/SidebarInputFactory\";\n\n/**\n * This class provides controls for management of the layer sidebar tab.\n * \n * @author Jiri Hynek\n */\nclass MarkerLayerToolTabControl extends AbstractLayerToolTabControl {\n\n    constructor(tool) {\n        super(tool);\n\n        this.tabContent = undefined;\n    }\n\n    /**\n     * It creates new defaults of the tab control.\n     */\n    createDefaults() {\n        return new MarkerLayerToolTabControlDefaults();\n    }\n\n    /**\n     * It creates new state of the tab control.\n     */\n    createState() {\n        return new MarkerLayerToolTabControlState();\n    }\n\n    /**\n     * It acquire selected data mapping from input values.\n     */\n    getInputValues() {\n        // get data mapping model\n        let model = this.getDefaults().getDataMappingModel();\n        \n        // create new selection\n        let dataMapping = {};\n\n        // get selected data domains values\n        dataMapping[model.country.name] = this.inputCountry.getValue();\n        dataMapping[model.value.name] = this.inputValue.getValue();\n        dataMapping[model.aggregation.name] = this.inputAggregation.getValue();\n        dataMapping[model.category.name] = this.inputCategory.getValue();\n\n        return dataMapping;\n    }\n\n    /**\n     * It updates selected input values according to the given data mapping.\n     * \n     * @param {*} dataMapping \n     */\n    setInputValues(dataMapping) {\n        // get data mapping model\n        let model = this.getDefaults().getDataMappingModel();\n\n        // update inputs\n        this.inputCountry.setValue(dataMapping[model.country.name]);\n        this.inputValue.setValue(dataMapping[model.value.name]);\n        this.inputAggregation.setValue(dataMapping[model.aggregation.name]);\n        this.inputCategory.setValue(dataMapping[model.category.name]);\n    }\n\n    /**\n     * It returns the sidebar tab pane.\n     */\n    getTabContent() {\n        var _this = this;\n\n        // event handler: change dimension action\n        let changeDimensionAction = function(e) {\n            // get selected values and update layer's data mapping\n            _this.getTool().updateDataMapping(_this.getInputValues());\n        }\n        \n        // tab content\n        let tab = document.createElement('div');\n        let elem = tab.appendChild(document.createElement('div'));\n\n        // get selection model\n        let model = this.getDefaults().getDataMappingModel();\n        let dataDomainLabels = this.getTool().getMap().getState().getMapData().getDataDomainLabels();\n\n        // select country\n        this.inputCountry = SidebarInputFactory.createSidebarInput(model.country.input, { label: model.country.label , options: dataDomainLabels, action: changeDimensionAction });\n        elem.appendChild(this.inputCountry.create());\n\n        // select value\n        this.inputValue = SidebarInputFactory.createSidebarInput(model.value.input, { label: model.value.label , options: dataDomainLabels, action: changeDimensionAction });\n        elem.appendChild(this.inputValue.create());\n\n        // select aggregation\n        this.inputAggregation = SidebarInputFactory.createSidebarInput(model.aggregation.input, { label: model.aggregation.label, options: model.aggregation.options, action: changeDimensionAction });\n        elem.appendChild(this.inputAggregation.create());\n\n        // select category\n        this.inputCategory = SidebarInputFactory.createSidebarInput(model.category.input, { label: model.category.label, options: dataDomainLabels, action: changeDimensionAction });\n        elem.appendChild(this.inputCategory.create());\n\n        this.setInputValues(this.getTool().getState().getDataMapping());\n        \n        return tab;\n    }\n\n}\nexport default MarkerLayerToolTabControl;","import MarkerLayerTool from \"./MarkerLayerTool\";\nimport AbstractLayerToolDefaults from \"../abstract/AbstractLayerToolDefaults\";\nimport AutocompleteSidebarInput from \"../../../inputs/input/AutocompleteSidebarInput\";\n\n/**\n * TODO: refactorization needed!\n */\nconst TYPE = 'marker';\n\nconst INPUT_ID_PREFIX = \"geovisto-input-\" + TYPE;\n\n/**\n * Data mapping model which can be used in the sidebar form.\n */\nconst MAPPING_MODEL = {\n    country: {\n        id: INPUT_ID_PREFIX + \"-input-country\",\n        name: \"country\",\n        label: \"Country\",\n        input: AutocompleteSidebarInput.ID()\n    },\n    value: {\n        id: INPUT_ID_PREFIX + \"-input-value\",\n        name: \"value\",\n        label: \"Value\",\n        input: AutocompleteSidebarInput.ID()\n    },\n    aggregation: {\n        id: INPUT_ID_PREFIX + \"-input-aggregation\",\n        name: \"aggregation\",\n        label: \"Agregation\",\n        options: [ \"count\", \"sum\" ],\n        input: AutocompleteSidebarInput.ID()\n    },\n    category: {\n        id: INPUT_ID_PREFIX + \"-input-category\",\n        name: \"category\",\n        label: \"Category\",\n        input: AutocompleteSidebarInput.ID()\n    }\n}\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass MarkerLayerToolDefaults extends AbstractLayerToolDefaults {\n\n    /**\n     * It initializes tool defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns a unique type string of the tool which is based on the layer it wraps.\n     */\n    getType() {\n        return MarkerLayerTool.TYPE();\n    }\n\n    /**\n     * It returns the layer name.\n     */\n    getLayerName() {\n        return \"Marker layer\";\n    }\n\n    /**\n     * It returns the default mapping of data domains to chart dimensions.\n     */\n    getDataMapping() {\n        let dataMapping = {};\n        \n        let dataMappingModel = this.getDataMappingModel();\n        let implicitDataDomainLabel = this.getMapObject().getMap().getState().getMapData().getDataDomainLabels()[0];\n        \n        dataMapping[dataMappingModel.country.name] = implicitDataDomainLabel;\n        dataMapping[dataMappingModel.value.name] = implicitDataDomainLabel;\n        dataMapping[dataMappingModel.aggregation.name] = dataMappingModel.aggregation.options[0];\n        dataMapping[dataMappingModel.category.name] = implicitDataDomainLabel;\n\n        return dataMapping;\n    }\n\n    /**\n     * It returns the data mapping model.\n     */\n    getDataMappingModel() {\n        return MAPPING_MODEL;\n    }\n    \n    /**\n     * It returns default centroids.\n     */\n    getCentroids() {\n        return JSON.parse(JSON.stringify(this.getMapObject().getMap().getState().getCentroids()));\n    }\n}\nexport default MarkerLayerToolDefaults;","import AbstractLayerToolState from \"../abstract/AbstractLayerToolState\";\nimport MarkerLayerToolDefaults from \"./MarkerLayerToolDefaults\";\n\n/**\n * This class provide functions for using the state of the layer tool.\n * \n * @author Jiri Hynek\n */\nclass MarkerLayerToolState extends AbstractLayerToolState {\n\n    /**\n     * It creates a tool state.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It resets state with respect to initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {MarkerLayerToolDefaults} defaults \n     */\n    reset(defaults) {\n        super.reset(defaults);\n\n        // the layer tool properties\n        this.setMarkers([]);\n        // TODO\n    }\n\n    /**\n     * Help function which initialize state properties realated with map.\n     */\n    resetMapVariables(map, defaults) {\n        super.resetMapVariables(map, defaults);\n        \n        let props = this.getProps();\n        this.setCentroids(props.centroids == undefined && defaults && map ? defaults.getCentroids() : props.centroids);\n    }\n\n    /**\n     * The metod takes config and desrializes the values.\n     * \n     * @param {*} config \n     */\n    deserialize(config) {\n        super.deserialize(config);\n\n        // the layer tool config\n        // TODO\n    }\n\n    /**\n     * The method serializes the tool state. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {MarkerLayerToolDefaults} defaults\n     */\n    serialize(defaults) {\n        let config = super.serialize(defaults);\n\n        // serialize the layer tool properties\n        // TODO\n\n        return config;\n    }\n\n    /**\n     * It returns a Leaflet layer group.\n     */\n    getLayer() {\n        return this.layer;\n    }\n\n    /**\n     * It sets a Leaflet layer group.\n     * \n     * @param {L.layerGroup} layer \n     */\n    setLayer(layer) {\n        this.layer = layer;\n    }\n\n    /**\n     * It returns the centroids.\n     */\n    getCentroids() {\n        return this.centroids;\n    }\n\n    /**\n     * It sets the centroids.\n     * \n     * @param {*} centroids \n     */\n    setCentroids(centroids) {\n        this.centroids = centroids;\n    }\n\n    /**\n     * It returns the markers.\n     */\n    getMarkers() {\n        return this.markers;\n    }\n\n    /**\n     * It sets the markers.\n     * \n     * @param {*} markers \n     */\n    setMarkers(markers) {\n        this.markers = markers;\n    }\n\n    // TODO\n}\nexport default MarkerLayerToolState;","import L from 'leaflet';\nimport LL from 'leaflet.markercluster';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css';\nimport './style/markerLayer.scss'; \nimport * as d3 from \"d3\";\nimport MarkerLayerToolTabControl from './sidebar/MarkerLayerToolTabControl';\nimport MarkerLayerToolDefaults from './MarkerLayerToolDefaults';\nimport MarkerLayerToolState from './MarkerLayerToolState';\nimport SelectionTool from '../../selection/SelectionTool';\nimport AbstractLayerTool from '../abstract/AbstractLayerTool';\nimport ThemesToolEvent from '../../themes/model/event/ThemesToolEvent';\nimport SelectionToolEvent from '../../selection/model/event/SelectionToolEvent';\nimport DataChangeEvent from '../../../model/event/basic/DataChangeEvent';\n\n/**\n * This class represents custom div icon which is used to mark center of countries.\n * It overrides L.DivIcon.\n * \n * @author Jiri Hynek\n * @override {L.DivIcon}\n */\nvar CountryIcon = L.DivIcon.extend({\n\n    _LEVEL: 0,\n    _SUFFIX: 1,\n    _COLOR: 2,\n    levels: [\n        [-Infinity, \"N/A\", \"#CCCCCC\"],\n        [1, \"\", \"#CCCCCC\"],\n        [1e2, \"K\", \"#AAAAAA\"],\n        [1e5, \"M\", \"#555555\"],\n        [1e8, \"B\", \"#222222\"],\n        [1e11, \"t\", \"#111111\"],\n    ],\n\n    // moved to css\n    //donutColors: [\"darkred\", \"goldenrod\", \"gray\"],\n\n    options: {\n        sizeBasic: 32,\n        sizeGroup: 36,\n        sizeDonut: 48,\n\n        // It is derived\n        //iconSize: [32,32],\n        //iconAnchor: [32/2,32/2],\n\n        className: \"div-country-icon\",\n        values: {\n            id: \"\",\n            value: 0,\n            subvalues: {\n                active: 0,\n                mitigated: 0,\n                finished: 0,\n            }\n        },\n        isGroup: false,\n        useDonut: true\n    },\n\n    round: function(value, align) {\n        return Math.round(value*align)/align;\n    },\n\n    formatValue: function(value, level) {\n        if(level == undefined || level < 0) {\n            return this.levels[0][this._SUFFIX];\n        } else {\n            if(this.levels[level][this._LEVEL] == -Infinity) {\n                return this.levels[level][this._SUFFIX];\n            } else if(this.levels[level][this._LEVEL] == 1) {\n                return this.round(value, this.levels[level][this._LEVEL]);\n            } else {\n                value = value/(this.levels[level][this._LEVEL]*10);\n                var align = (value >= 10) ? 1 : 10;\n                return this.round(value, align) + this.levels[level][this._SUFFIX];\n            }\n        }\n    },\n\n    getColor: function(level) {\n        if(level == null || level < 0) {\n            return this.levels[0][this._COLOR];\n        } else {\n            return this.levels[level][this._COLOR];\n        }\n    },\n\n    getLevel: function(value) {\n        for(var i = this.levels.length-1; i >= 0; i--) {\n            if(value > this.levels[i][this._LEVEL]) {\n            return i;\n            }\n        }\n        return -1;\n    },\n\n    createIcon: function (oldIcon) {\n        var div = (oldIcon && oldIcon.tagName === 'DIV') ? oldIcon : document.createElement('div'),\n            options = this.options;\n\n        var size = options.useDonut ? options.sizeDonut : (options.isGroup ? options.sizeGroup : options.sizeBasic);\n        options.iconSize = [size,size];\n        options.iconAnchor = [size/2,size/2];\n        var rCircle = options.sizeBasic/2;\n        var center = size/2;\n        // moved to css\n        //var strokeWidth = options.isGroup ? ((options.sizeGroup-options.sizeBasic)/2) : 0;\n        var level = this.getLevel(options.values.value);\n\n        var divContent = div.appendChild(document.createElement('div'));\n        divContent.classList.value = \n            \"leaflet-marker-level\" + level // level\n            + (options.isGroup ? \" leaflet-marker-group\" : \"\") // group of several markers\n        ;\n\n\n        //console.log(size);\n        var element = d3.select(divContent);\n        //console.log(element)\n        var svg = element.append(\"svg\");\n        svg.attr(\"width\", size).attr(\"height\", size);\n        //svg.classList.add(\"leaflet-marker-item\");\n\n        // circle\n        svg.append(\"circle\")\n            .attr(\"cx\", center)\n            .attr(\"cy\", center)\n            .attr(\"r\", rCircle)\n            // moved to css\n            //.attr(\"fill\", this.getColor(level))\n            //.attr(\"fill-opacity\", 0.9)\n            //.attr(\"stroke-width\", strokeWidth)\n            //.attr(\"stroke\", \"black\");\n\n        // value label\n        svg.append(\"text\")\n            .html(this.formatValue(options.values.value, level))\n            .attr(\"x\", \"50%\")\n            .attr(\"y\", \"50%\")\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"12px\")\n            .attr(\"dy\", \"0.3em\")\n            .attr(\"font-family\", \"Arial\");\n            // moved to css\n            //.attr(\"fill\", \"white\")\n\n        if(options.values.value != null && options.values.value != 0) {\n        //var values = { a: 0.5, b: 0.3, c: 0.2 };\n        // moved to css\n        //var color = d3.scaleOrdinal()\n        //    .domain(options.values.subvalues)\n        //    .range(this.donutColors);\n        var pie = d3.pie().value(function(d) { return d[1]; });\n        var values_ready = pie(Object.entries(options.values.subvalues));\n        // donut chart\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + size / 2 + \",\" + size / 2 + \")\")\n            .selectAll(\"abc\")\n            .data(values_ready)\n            .enter()\n            .append(\"path\")\n            .attr(\"d\", d3.arc()\n            .innerRadius(size/4+6)\n            .outerRadius(size/2)\n            )\n            // moved to css\n            .attr('class', function(d, i) { return \"leaflet-marker-donut\" + (i % 3 + 1); })\n            //.attr('fill', function(d) { return(color(d.data.key)) })\n            //.attr(\"stroke-width\", \"0px\")\n            //.attr(\"opacity\", 0.8)\n            ;\n        }\n\n        /*const icon = <svg width={size} height={size}>\n            <circle cx={center} cy={center} r={rCircle} fill={this.getColor(level)} fillOpacity=\"0.8\" strokeWidth={strokeWidth} stroke=\"black\" />\n            <text x=\"50%\" y=\"50%\" textAnchor=\"middle\" fill=\"white\"\n                fontSize=\"12px\" dy=\"0.3em\" fontFamily=\"Arial\">{this.formatValue(options.countryValue, level)}</text>\n        </svg>;\n        //div.innerHTML = \"<b>1</b>\";\n        ReactDOM.render(icon, divContent);*/\n\n        if (options.bgPos) {\n            var bgPos = point(options.bgPos);\n            div.style.backgroundPosition = (-bgPos.x) + 'px ' + (-bgPos.y) + 'px';\n        }\n        this._setIconStyles(div, 'icon');\n\n        return div;\n    },\n});\n\n/**\n * This class represents Marker layer. It works with geojson polygons representing countries.\n * \n * @author Jiri Hynek\n */\nclass MarkerLayerTool extends AbstractLayerTool {\n\n    /**\n     * It creates a new tool with respect to the props.\n     * \n     * @param {*} props \n     */\n    constructor(props) {\n        super(props);\n    }\n\n    /**\n     * A unique string of the tool type.\n     */\n    static TYPE() {\n        return \"geovisto-tool-layer-marker\"; \n    }\n\n    /**\n     * It creates a copy of the uninitialized tool.\n     */\n    copy() {\n        return new MarkerLayerTool(this.getProps());\n    }\n\n    /**\n     * It creates new defaults of the tool.\n     */\n    createDefaults() {\n        return new MarkerLayerToolDefaults();\n    }\n\n    /**\n     * It returns default tool state.\n     */\n    createState() {\n        return new MarkerLayerToolState();\n    }\n\n    /**\n     * Help function which acquires and returns the selection tool if available.\n     */\n    getSelectionTool() {\n        if(this.selectionTool == undefined) {\n            let tools = this.getMap().getState().getTools().getByType(SelectionTool.TYPE());\n            if(tools.length > 0) {\n                this.selectionTool = tools[0];\n            }\n        }\n        return this.selectionTool;\n    }\n\n    /**\n     * It creates new tab control.\n     */\n    createSidebarTabControl() {\n        return new MarkerLayerToolTabControl({ tool: this });\n    }\n\n    /**\n     * It creates layer items.\n     */\n    createLayerItems() {\n        // create layer which clusters points\n        //let layer = L.layerGroup([]);\n        let layer = L.markerClusterGroup({\n\n            // create cluster icon\n            iconCreateFunction: function (cluster) {\n                var markers = cluster.getAllChildMarkers();\n                let data = { id: \"<Group>\", value: 0, subvalues: {} };\n                for (var i = 0; i < markers.length; i++) {\n                    data.value += markers[i].options.icon.options.values.value;\n                    for(let [key, value] of Object.entries(markers[i].options.icon.options.values.subvalues)) {\n                        if(data.subvalues[key] == undefined) {\n                            data.subvalues[key] = value;\n                        } else {\n                            data.subvalues[key] += value;\n                        }\n                    }\n                }\n                // create custom icon\n                return new CountryIcon( { \n                    countryName: \"<Group>\",\n                    values: data,\n                    isGroup: true,\n                } );\n            }\n        });\n\n        // update state\n        this.getState().setLayer(layer);\n\n        this.redraw();\n\n        return [ layer ];\n    }\n\n    /**\n     * It deletes layer items.\n     */\n    deleteLayerItems() {\n        //console.log(\"marker\");\n        let markers = this.getState().getMarkers();\n\n        // delete the 'value' property of every geo feature object if defined\n        let layer = this.getState().getLayer();\n        for(let i = 0; i < markers.length; i++) {\n            layer.removeLayer(markers[i]);\n        }\n        \n        this.getState().setMarkers([]);\n    }\n\n    /**\n     * It prepares data for markers.\n     */\n    prepareMapData() {\n        //console.log(\"updating map data\", this);\n\n        // prepare data\n        let workData = [];\n        let mapData = this.getMap().getState().getMapData();\n        let dataMappingModel = this.getDefaults().getDataMappingModel();\n        let dataMapping = this.getState().getDataMapping();\n        let countryDataDomain = mapData.getDataDomain(dataMapping[dataMappingModel.country.name]);\n        let valueDataDomain = mapData.getDataDomain(dataMapping[dataMappingModel.value.name]);\n        let categoryDataDomain = mapData.getDataDomain(dataMapping[dataMappingModel.category.name]);\n        let geoCountry, actResultItem;\n        let foundCountries, foundValues, foundCategories;\n        let highlightedIds = this.getSelectionTool() && this.getSelectionTool().getState().getSelection() ?\n                                this.getSelectionTool().getState().getSelection().getIds() : [];\n        let data = this.getMap().getState().getCurrentData();\n        let dataLen = data.length;\n        let centroids = this.getState().getCentroids();\n        for (let i = 0; i < dataLen; i++) {\n            // find the 'country' properties\n            foundCountries = mapData.getItemValues(countryDataDomain, data[i]);\n            //console.log(\"search country: \", foundCountries);\n\n            // find the 'value' properties\n            foundValues = mapData.getItemValues(valueDataDomain, data[i]);\n            //console.log(\"search values: \", foundValues);\n\n            // find the 'category' properties\n            foundCategories = mapData.getItemValues(categoryDataDomain, data[i]);\n            //console.log(\"search category: \", foundCategories);\n\n            // since the data are flattened we can expect max one found item\n            //console.log(\"abc\", highlightedIds);\n            if(foundCountries.length == 1 && (highlightedIds.length == 0 || highlightedIds.indexOf(foundCountries[0]) >= 0)) {\n                // test if country respects highlighting selection\n                /*if(highlightedIds != undefined) {\n                    console.log(highlightedIds.indexOf(foundCountries[0]) >= 0);\n                }*/\n\n                // test if country exists in the map\n                geoCountry = centroids.find(x => x.id == foundCountries[0]);\n                if(geoCountry != undefined) {\n                    // test if country exists in the results array\n                    actResultItem = workData.find(x => x.id == foundCountries[0]);\n                    if(actResultItem == undefined) {\n                        actResultItem = { id: foundCountries[0], value: 0, subvalues: {} };\n                        workData.push(actResultItem);\n                    }\n                    // initialize category if does not exists yet\n                    if(foundCategories.length == 1) {\n                        if(actResultItem.subvalues[foundCategories[0]] == undefined) {\n                            actResultItem.subvalues[foundCategories[0]] = 0;\n                        }\n                    }\n                    // set value with respect to the aggregation function\n                    if(dataMapping[dataMappingModel.aggregation.name] == \"sum\") {\n                        // test if value is valid\n                        if(foundValues.length == 1 && foundValues[0] != null && typeof foundValues[0] === 'number') {\n                            actResultItem.value += foundValues[0];\n                            // set category\n                            if(foundCategories.length == 1) {\n                                actResultItem.subvalues[foundCategories[0]] += foundValues[0];\n                            }\n                        }\n                    } else {\n                        // count\n                        actResultItem.value++;\n                        // incerement category value\n                        actResultItem.subvalues[foundCategories[0]]++;\n                    }\n                }\n            }\n        }\n        //console.log(\"result: \", preparedData);\n        return workData;\n    }\n\n    /**\n     * It creates markers using workData\n     */\n    createMarkers(workData) {\n        // create markers\n        let markers = [];\n\n        let geoCountry;\n        let layer = this.getState().getLayer();\n        let centroids = this.getState().getCentroids();\n        for(let i = 0; i < workData.length; i++) {\n            // get centroid\n            // note: the centroid exists since invalid countries has been filtered\n            geoCountry = centroids.find(x => x.id == workData[i].id);\n            // build message\n            let point = this.createMarker(geoCountry, workData[i]);\n            layer.addLayer(point);\n            markers.push(point);\n        }\n\n        return markers;\n    }\n\n    /**\n     * It creates one marker with respect to the given centroid and data.\n     * \n     * @param {*} centroid \n     * @param {*} data \n     */\n    createMarker(centroid, data) {\n        function thousands_separator(num)\n          {\n            var num_parts = num.toString().split(\".\");\n            num_parts[0] = num_parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n            return num_parts.join(\".\");\n          }\n\n        // build popup message\n        let popupMsg = \"<b>\" + centroid.name + \"</b><br>\";\n        popupMsg += (data.value != null ? thousands_separator(data.value) : \"N/A\") + \"<br>\";\n        for(let [key, value] of Object.entries(data.subvalues)) {\n            popupMsg += key + \": \" + thousands_separator(value) + \"<br>\";\n        }\n\n        // create marker\n        let point = L.marker([centroid.lat, centroid.long], {\n            // create basic icon \n            id: centroid.name,\n            icon: new CountryIcon( {\n                values: data\n            } ) \n        }).bindPopup(popupMsg);\n        return point;\n    }\n\n    /**\n     * It reloads data and redraw the layer.\n     */\n    redraw(onlyStyle) {\n        if(this.getState().getLayer()) {\n            // delete actual items\n            this.deleteLayerItems();\n\n            // prepare data\n            let workData = this.prepareMapData();\n\n            // update map\n            let markers = this.createMarkers(workData);\n\n            // update state\n            this.getState().setMarkers(markers);\n        }\n    }\n\n    /**\n     * This function is called when a custom event is invoked.\n     * \n     * @param {AbstractEvent} event \n     */\n    handleEvent(event) {\n        if(event.getType() == DataChangeEvent.TYPE()) {\n            // data change\n            this.redraw();\n        } else if(event.getType() == SelectionToolEvent.TYPE()) {\n            this.redraw();\n            // TODO\n        } else if(event.getType() == ThemesToolEvent.TYPE()) {\n            // theme change\n            // TODO\n        }\n    }\n}\n\nexport default MarkerLayerTool;","import AbstractLayerToolTabControlDefaults from \"../../abstract/sidebar/AbstractLayerToolTabControlDefaults\";\n\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass ConnectionLayerToolTabControlDefaults extends AbstractLayerToolTabControlDefaults {\n\n    /**\n     * It creates tab control defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns the icon of the tab pane.\n     */\n    getIcon() {\n        return '<i class=\"fa fa-road\"></i>';\n    }\n}\nexport default ConnectionLayerToolTabControlDefaults;","import AbstractLayerToolTabControlState from \"../../abstract/sidebar/AbstractLayerToolTabControlState\";\n\n\n/**\n * This class manages the state of the sidebar tab.\n * It wraps the state since the sidebar tab can work with state objects which needs to be explicitly serialized.\n * \n * @author Jiri Hynek\n */\nclass ConnectionLayerToolTabControlState extends AbstractLayerToolTabControlState {\n\n    /**\n     * It creates a tab control state.\n     */\n    constructor() {\n        super();\n    }\n}\nexport default ConnectionLayerToolTabControlState;","import ConnectionLayerToolTabControlDefaults from './ConnectionLayerToolTabControlDefaults';\nimport ConnectionLayerToolTabControlState from './ConnectionLayerToolTabControlState';\nimport AbstractLayerToolTabControl from '../../abstract/sidebar/AbstractLayerToolTabControl';\nimport SidebarInputFactory from '../../../../inputs/SidebarInputFactory';\n\n/**\n * This class provides controls for management of the layer sidebar tab.\n *\n * @author Jiri Hynek\n */\nclass ConnectionLayerToolTabControl extends AbstractLayerToolTabControl {\n  constructor(tool) {\n    super(tool);\n\n    this.tabContent = undefined;\n  }\n\n  /**\n   * It creates new defaults of the tab control.\n   */\n  createDefaults() {\n    return new ConnectionLayerToolTabControlDefaults();\n  }\n\n  /**\n   * It creates new state of the tab control.\n   */\n  createState() {\n    return new ConnectionLayerToolTabControlState();\n  }\n\n  /**\n   * It acquire selected data mapping from input values.\n   */\n  getInputValues() {\n    // get data mapping model\n    let model = this.getDefaults().getDataMappingModel();\n\n    // create new selection\n    let dataMapping = {};\n\n    // get selected data domains values\n    dataMapping[model.from.name] = this.inputFrom.getValue();\n    dataMapping[model.to.name] = this.inputTo.getValue();\n\n    return dataMapping;\n  }\n\n  /**\n   * It updates selected input values according to the given data mapping.\n   *\n   * @param {*} dataMapping\n   */\n  setInputValues(dataMapping) {\n    // get data mapping model\n    let model = this.getDefaults().getDataMappingModel();\n\n    // update inputs\n    this.inputFrom.setValue(dataMapping[model.from.name]);\n    this.inputTo.setValue(dataMapping[model.to.name]);\n  }\n\n  /**\n   * It returns the sidebar tab pane.\n   */\n  getTabContent() {\n    var _this = this;\n\n    // event handler: change dimension action\n    let changeDimensionAction = function (e) {\n      // get selected values and update layer's data mapping\n      _this.getTool().updateDataMapping(_this.getInputValues());\n    };\n\n    // tab content\n    let tab = document.createElement('div');\n    let elem = tab.appendChild(document.createElement('div'));\n\n    // get data mapping model\n    let model = this.getDefaults().getDataMappingModel();\n    let dataDomainLabels = this.getTool().getMap().getState().getMapData().getDataDomainLabels();\n    console.log({ model });\n    // select from\n    this.inputFrom = SidebarInputFactory.createSidebarInput(model.from.input, {\n      label: model.from.label,\n      options: dataDomainLabels,\n      action: changeDimensionAction,\n    });\n    elem.appendChild(this.inputFrom.create());\n\n    // select to\n    this.inputTo = SidebarInputFactory.createSidebarInput(model.from.input, {\n      label: model.to.label,\n      options: dataDomainLabels,\n      action: changeDimensionAction,\n    });\n    elem.appendChild(this.inputTo.create());\n\n    this.setInputValues(this.getTool().getState().getDataMapping());\n\n    return tab;\n  }\n}\nexport default ConnectionLayerToolTabControl;\n","import ConnectionLayerTool from \"./ConnectionLayerTool\";\nimport AbstractLayerToolDefaults from \"../abstract/AbstractLayerToolDefaults\";\nimport AutocompleteSidebarInput from \"../../../inputs/input/AutocompleteSidebarInput\";\n\n/**\n * TODO: refactorization needed!\n */\nconst TYPE = 'connection';\n\nconst INPUT_ID_PREFIX = \"geovisto-input-\" + TYPE;\n\n/**\n * Data mapping model which can be used in the sidebar form.\n */\nconst MAPPING_MODEL = {\n    from: {\n        id: INPUT_ID_PREFIX + \"-from\",\n        name: \"from\",\n        label: \"From\",\n        input: AutocompleteSidebarInput.ID()\n    },\n    to: {\n        id: INPUT_ID_PREFIX + \"-to\",\n        name: \"to\",\n        label: \"To\",\n        input: AutocompleteSidebarInput.ID()\n    }\n}\n\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass ConnectionLayerToolDefaults extends AbstractLayerToolDefaults {\n\n    /**\n     * It initializes tool defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns a unique type string of the tool which is based on the layer it wraps.\n     */\n    getType() {\n        return ConnectionLayerTool.TYPE();\n    }\n\n    /**\n     * It returns the layer name.\n     */\n    getLayerName() {\n        return \"Connection layer\";\n    }\n\n    /**\n     * It returns the default mapping of data domains to chart dimensions.\n     */\n    getDataMapping() {\n        let dataMapping = {};\n        \n        let dataMappingModel = this.getDataMappingModel();\n        let implicitDataDomainLabel = this.getMapObject().getMap().getState().getMapData().getDataDomainLabels()[0];\n        \n        dataMapping[dataMappingModel.from.name] = implicitDataDomainLabel;\n        dataMapping[dataMappingModel.to.name] = implicitDataDomainLabel;\n\n        return dataMapping;\n    }\n\n    /**\n     * It returns the data mapping model.\n     */\n    getDataMappingModel() {\n        return MAPPING_MODEL;\n    }\n    \n    /**\n     * It returns optiomal zoom for D3 projections.\n     */\n    getProjectionZoom() {\n        return 2;\n    }\n    \n    /**\n     * It returns default centroids.\n     */\n    getCentroids() {\n        return JSON.parse(JSON.stringify(this.getMapObject().getMap().getState().getCentroids()));\n    }\n}\nexport default ConnectionLayerToolDefaults;","import AbstractLayerToolState from \"../abstract/AbstractLayerToolState\";\nimport ConnectionLayerToolDefaults from \"./ConnectionLayerToolDefaults\";\n\n/**\n * This class provide functions for using the state of the layer tool.\n * \n * @author Jiri Hynek\n */\nclass ConnectionLayerToolState extends AbstractLayerToolState {\n\n    /**\n     * It creates a tool state.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It initializes the state using the initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {*} props \n     * @param {*} defaults \n     */\n    initialize(props, defaults) {\n        super.initialize(props, defaults);\n    }\n\n    /**\n     * It resets state with respect to initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {ConnectionLayerToolDefaults} defaults \n     */\n    reset(defaults) {\n        super.reset(defaults);\n    }\n\n    /**\n     * Help function which resets the state properties realated with map if not defined.\n     */\n    resetMapVariables(map, defaults) {\n        super.resetMapVariables(map, defaults);\n        \n        let props = this.getProps();\n        this.setCentroids(props.centroids == undefined && defaults && map ? defaults.getCentroids() : props.centroids);\n    }\n\n    /**\n     * The metod takes config and desrializes the values.\n     * \n     * @param {*} config \n     */\n    deserialize(config) {\n        super.deserialize(config);\n\n        // the layer tool config\n        // TODO\n    }\n\n    /**\n     * The method serializes the tool state. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {ConnectionLayerToolDefaults} defaults\n     */\n    serialize(defaults) {\n        let config = super.serialize(defaults);\n\n        // serialize the layer tool properties\n        // TODO\n\n        return config;\n    }\n\n    /**\n     * It returns a Leaflet svg layer.\n     */\n    getLayer() {\n        return this.layer;\n    }\n\n    /**\n     * It sets a Leaflet svg layer.\n     * \n     * @param {L.svg} layer \n     */\n    setLayer(layer) {\n        this.layer = layer;\n    }\n\n    /**\n     * It returns the centroids.\n     */\n    getCentroids() {\n        return this.centroids;\n    }\n\n    /**\n     * It sets the centroids.\n     * \n     * @param {*} centroids \n     */\n    setCentroids(centroids) {\n        this.centroids = centroids;\n    }\n\n    /**\n     * It returns work data for the force layout algorithm.\n     */\n    getWorkData() {\n        return this.workData;\n    }\n\n    /**\n     * It sets the work data for the force layout algorithm.\n     * \n     * @param {*} workData \n     */\n    setWorkData(workData) {\n        this.workData = workData;\n    }\n\n    // TODO\n}\nexport default ConnectionLayerToolState;","import * as d3 from \"d3\";\n\n/**\n * This class represents the force layout simulator powered by the d3-force library.\n * It takes the nodes and connections and prepares the list paths\n * which can be bent by the D3 force simulation.\n * \n * A former idea to split the lines into line segments and use the D3 force simulation can be found\n * in the prototype writen by S. Engle (https://gist.github.com/ericfischer/dafc36a3d212da4619dde2d392553c7a)\n * demonstarting force‐directed edge bundling for graph visualization (by Danny Holten and Jarke J. van Wijk).\n * Further ideas were found in the D3 docs and examples.\n * \n * Our approach implements a very simple segmentation of the connections\n * which works with the constant maximal length of segments.\n * This causes that short connections won't be segmented,\n * which improves the performance of the simulation.\n * The preferred maximal length of the line segments can be adjusted using props.\n * \n * @author Jiri Hynek\n */\nclass D3PathForceSimulator {\n\n    /**\n     * It initializes the object by setting the props.\n     */\n    constructor(props){\n        this.props = props;\n\n        // maximum number of path items\n        this.props.segmentLength = (props.segmentLength ? props.segmentLength : this.getDefaultSegmentLength());\n    }\n    \n    /**\n     * It returns default size of the segment\n     */\n    getDefaultSegmentLength() {\n        return 50;\n    }\n\n    /**\n     * It returns the paths.\n     */\n    getPaths() {\n        if(this.paths == undefined) {\n            this.paths = this.createPaths();\n        }\n        return this.paths;\n    }\n\n    /**\n     * It creates paths (split connections into segments).\n     */\n    createPaths() {\n        let paths = [];\n\n        // go through all map connections and create paths for every connection\n        // connections represented by a path can be bent\n        for(let i = 0; i < this.props.connections.length; i++) {\n            paths.push(this.createPath(this.props.connections[i]));\n        };\n\n        return paths;\n    }\n\n    /**\n     * Help function which takes a connection and split the connection into segments.\n     * The number of segments is based on the preferred maximal length of segment.\n     * \n     * @param {*} connection \n     */\n    createPath(connection) {\n        let path = [];\n\n        // get connection's nodes\n        let source = connection.source;\n        let target = connection.target;\n\n        // add the first point \n        path.push(source);\n\n        // length of the connection: sqrt((x2-x1)^2 + (y2-y1)^2)\n        let length = Math.sqrt((target.x - source.x) * (target.x - source.x)\n                                 + (target.y - source.y) * (target.y - source.y));\n        \n        // preferred number of segments\n        let numberOfSegments = Math.round(length/this.props.segmentLength);\n\n        // add points\n        if(numberOfSegments > 1) {\n            // calculate distance between the points\n            let dx = (target.x - source.x) / numberOfSegments;\n            let dy = (target.y - source.y) / numberOfSegments;\n\n            // add the middle points\n            let numberOfPoints = numberOfSegments-1;\n            let point = source;\n            for (let i = 0; i <= numberOfPoints; i++) {\n                point = {\n                    x: point.x + dx,\n                    y: point.y + dy\n                }\n                // add a middle point\n                path.push(point);\n            }\n        }\n\n        // add the last point\n        path.push(target);\n\n        return path;\n    }\n\n    /**\n     * It creates creates and runs the D3 force layout simulation.\n     * \n     * @param {*} onTickAction\n     * @param {*} onEndAction\n     */\n    run(onTickAction, onEndAction) {\n        // get D3 force layout simulator\n        let simulation = this.getSimulation();\n        \n        // set run properties to run the simulation\n        simulation\n            .on(\"tick\", onTickAction)\n            .on(\"end\", onEndAction);\n    }\n\n    /**\n     * It returns the definition of D3 force simulation.\n     */\n    getSimulation() {\n        // usage of D3 force layout simulation\n        let props = this.getForceProps();\n        // TODO use dynamic props based on current situation\n\n        return d3.forceSimulation(this.getNodes())\n            .force(\"charge\", d3.forceManyBody()\n                .strength(props.charge.strength)\n                .distanceMin(props.charge.distanceMin)\n                .distanceMax(props.charge.distanceMax)\n            )\n            .force(\"link\", d3.forceLink()\n                .links(this.getLinks())\n                .strength(props.link.strength)\n                .distance(props.link.distance)\n            )\n            .alphaDecay(props.alphaDecay)\n    }\n\n    /**\n     * It returns the D3 force simulation props.\n     */\n    getForceProps() {\n        if(this.forceProps == undefined) {\n            this.forceProps = this.createDefaultForceProps();\n        }\n        return this.forceProps;\n    }\n\n    /**\n     * It returns the default D3 force simulation props.\n     */\n    createDefaultForceProps() {\n        return {\n            charge: {\n                strength: 12,\n                distanceMin: 25,\n                distanceMax: 50\n            },\n            link: {\n                strength: 0.8,\n                distance: 0\n            },\n            // how quickly it gets to the alpha (stops the simulation)\n            alphaDecay: 0.15\n        }\n    }\n\n    /**\n     * It returns the nodes for D3 force layout simulator.\n     */\n    getNodes() {\n        if(this.nodes == undefined) {\n            this.nodes = this.createNodes();\n        }\n        return this.nodes;\n    }\n\n    /**\n     * It prepares the nodes for D3 force layout simulator.\n     */\n    createNodes() {\n        let nodes = []\n\n        // go through all end nodes add them to the list\n        let endNodes = this.props.nodes;\n        let node;\n        for(let i = 0; i < endNodes.length; i++) {\n            node = endNodes[i];\n\n            // setting the fx, fy fixed position\n            // -> these nodes should not be moved by the D3 force simulation\n            node.fx = node.x;\n            node.fy = node.y;\n\n            nodes.push(node);\n        };\n        \n        // go throught all paths and add the remaining points between the end nodes\n        let paths = this.getPaths();\n        let path;\n        for(let i = 0; i < paths.length; i++) {\n            path = paths[i];\n            // go through the middle points\n            // the first and the last points have already been added\n            for(let j = 1; j < path.length-1; j++) {\n                nodes.push(path[j]);\n            }\n        }\n        return nodes;\n    }\n\n    /**\n     * It returns the links for D3 force layout simulator.\n     */\n    getLinks() {\n        if(this.links == undefined) {\n            this.links = this.createLinks();\n        }\n        return this.links;\n    }\n\n    /**\n     * It creates the links for D3 force layout simulator.\n     */\n    createLinks() {\n        let links = [];\n\n        // go throught all paths and contruct links\n        let paths = this.getPaths();\n        let path;\n        for(let i = 0; i < paths.length; i++) {\n            path = paths[i];\n            // path is represented by the list of path points\n            for(let j = 1; j < path.length; j++) {\n                links.push({\n                    source: path[j-1],\n                    target: path[j]\n                });\n            }\n        }\n\n        return links;\n    }\n}\nexport default D3PathForceSimulator;","import * as d3 from \"d3\";\n\n/**\n * This class provides help functions for projections of points used in the Connection tool.\n * \n * @author Jiri Hynek\n */\nclass ProjectionUtil {\n\n    /**\n     * It provides the function which projects the given point to the given leaflet map with the given zoom.\n     * \n     * @param {*} d \n     */\n    static getDataProjectionFunction(map, zoom) {\n        return function(d) {\n            // project the [lat, lng] point to the map with the given zoom\n            let coords = map.project(new L.LatLng(d.lat, d.long), zoom);\n            d.x = coords.x;\n            d.y = coords.y;\n        }\n    }\n\n    /**\n     * It provides the the d3 line function which also:\n     * (1) unprojects the given point from the given leaflet map with given zoom\n     * (2) projects the point of (1) to the current map state\n     * \n     * @param {*} map \n     * @param {*} zoom \n     */\n    static getPathProjectionFunction(map, zoom) {\n        return d3.line()\n            .curve(d3.curveBundle)\n            //.x(function(d) { return d.x; })\n            //.y(function(d) { return d.y; });\n            //.x(function(d) { return map.latLngToLayerPoint(new L.LatLng(d.y, d.x)).x; })\n            //.y(function(d) { return map.latLngToLayerPoint(new L.LatLng(d.y, d.x)).y; });\n\n            // points need to be unprojected first\n            // then they need to be projected to the current map state\n            .x(function(d) {\n                // project [lat, lng] to the current map state\n                return map.latLngToLayerPoint(\n                    // unproject the point to [lat,lng]\n                    map.unproject(new L.Point(d.x, d.y), zoom)\n                ).x;\n            })\n            .y(function(d) {\n                // project [lat, lng] to the current map state\n                return map.latLngToLayerPoint(\n                    // unproject the point to [lat,lng]\n                    map.unproject(new L.Point(d.x, d.y), zoom)\n                ).y\n            });\n    }\n}\nexport default ProjectionUtil;","import L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport * as d3 from \"d3\";\nimport rfdc from 'rfdc';\nimport './style/connectionLayer.scss';\nimport ConnectionLayerToolTabControl from './sidebar/ConnectionLayerToolTabControl';\nimport ConnectionLayerToolState from './ConnectionLayerToolState';\nimport ConnectionLayerToolDefaults from './ConnectionLayerToolDefaults';\nimport SelectionTool from '../../selection/SelectionTool';\nimport AbstractLayerTool from '../abstract/AbstractLayerTool';\nimport DataChangeEvent from '../../../model/event/basic/DataChangeEvent';\nimport SelectionToolEvent from '../../selection/model/event/SelectionToolEvent';\nimport ThemesToolEvent from '../../themes/model/event/ThemesToolEvent';\nimport D3PathForceSimulator from './util/D3PathForceSimulator';\nimport ProjectionUtil from './util/ProjectionUtil';\n\n/**\n * This class represents Connection layer tool. It uses SVG layer and D3 to draw the lines.\n *\n * @author Jiri Hynek\n */\nclass ConnectionLayerTool extends AbstractLayerTool {\n\n    /**\n     * It creates a new tool with respect to the props.\n     *\n     * @param {*} props\n     */\n    constructor(props) {\n        super(props);\n    }\n\n    /**\n     * A unique string of the tool type.\n     */\n    static TYPE() {\n        return \"geovisto-tool-layer-connection\";\n    }\n\n    /**\n     * It creates a copy of the uninitialized tool.\n     */\n    copy() {\n        return new ConnectionLayerTool(this.getProps());\n    }\n\n    /**\n     * It creates new defaults of the tool.\n     */\n    createDefaults() {\n        return new ConnectionLayerToolDefaults();\n    }\n\n    /**\n     * It returns default tool state.\n     */\n    createState() {\n        return new ConnectionLayerToolState();\n    }\n\n    /**\n     * It creates new tab control.\n     */\n    createSidebarTabControl() {\n        return new ConnectionLayerToolTabControl({ tool: this });\n    }\n\n    /**\n     * Help function which acquires and returns the selection tool if available.\n     */\n    getSelectionTool() {\n        if(this.selectionTool == undefined) {\n            let tools = this.getMap().getState().getTools().getByType(SelectionTool.TYPE());\n            if(tools.length > 0) {\n                this.selectionTool = tools[0];\n            }\n        }\n        return this.selectionTool;\n    }\n\n    /**\n     * It creates layer items.\n     */\n    createLayerItems() {\n        // create Leaflet SVG layer\n        let layer = L.svg();\n\n        // update state\n        this.getState().setLayer(layer);\n\n        // prepare data\n        this.prepareMapData(this);\n\n        return [ layer ];\n    }\n\n    /**\n     * It deletes layer items.\n     */\n    deleteLayerItems() {\n        let layer = this.getState().getLayer();\n\n        // get layer element\n        if(layer._container != undefined) {\n            let layerElement = layer._container.childNodes[0];\n            // delete layer element's children (connections)\n            while (layerElement.firstChild) {\n                layerElement.removeChild(layerElement.lastChild);\n            }\n        }\n    }\n\n    /**\n     * It prepares data for connections.\n     */\n    prepareMapData() {\n        //console.log(\"updating map data\", this);\n\n        //this.getState().getlayer()._container.remove();\n        let workData = {\n            nodes: [],\n            connections: []\n        };\n\n        var map = this.getMap().getState().getLeafletMap();\n        let projectPoint = ProjectionUtil.getDataProjectionFunction(map, this.getDefaults().getProjectionZoom());\n\n         // prepare data\n         let mapData = this.getMap().getState().getMapData();\n         let fromDataDomain = mapData.getDataDomain(this.getState().getDataMapping()[this.getDefaults().getDataMappingModel().from.name]);\n         let toDataDomain = mapData.getDataDomain(this.getState().getDataMapping()[this.getDefaults().getDataMappingModel().to.name]);\n         let geoFrom, geoTo, actFrom, actTo, actConnection;\n         let foundFrom, foundTo;\n         let data = this.getMap().getState().getCurrentData();\n         let dataLen = data.length;\n         let clone = new rfdc();\n         let centroids = this.getState().getCentroids();\n         for (let i = 0; i < dataLen; i++) {\n            //console.log(fromDataDomain, toDataDomain);\n\n            // find the 'from' properties\n            foundFrom = mapData.getItemValues(fromDataDomain, data[i]);\n            //console.log(\"search from: \", foundFrom);\n\n            // find the 'to' properties\n            foundTo = mapData.getItemValues(toDataDomain, data[i]);\n            //console.log(\"search to: \", foundTo);\n\n            // since the data are flattened we can expect max one found item\n            if(foundFrom.length == 1 && foundTo.length == 1) {\n                // test if country exists in the map\n                geoFrom = centroids.find(x => x.id == foundFrom[0]);\n                if(geoFrom != undefined) {\n                    // test if country exists in the map\n                    geoTo = centroids.find(x => x.id == foundTo[0]);\n                    if(geoTo != undefined) {\n                        // add 'from' country to node list\n                        actFrom = workData.nodes.find(x => x.id == foundFrom[0]);\n                        if(actFrom == undefined) {\n                            actFrom = clone(geoFrom);\n                            projectPoint(actFrom);\n                            workData.nodes.push(actFrom);\n                        }\n                        // add 'to' country to node list\n                        actTo = workData.nodes.find(x => x.id == foundTo[0]);\n                        if(actTo == undefined) {\n                            actTo = clone(geoTo);\n                            projectPoint(actTo);\n                            workData.nodes.push(actTo);\n                        }\n                        // add connection to connection list\n                        actConnection = workData.connections.find(x => x.source.id == foundFrom[0] && x.target.id == foundTo[0]);\n                        if(actConnection == undefined) {\n                            actConnection = {\n                                source: actFrom,\n                                target: actTo,\n                                count: 1\n                            }\n                            workData.connections.push(actConnection);\n                        } else {\n                            actConnection.count++;\n                        }\n                    }\n                }\n            }\n        }\n\n        // update work data\n        this.getState().setWorkData(workData);\n        //console.log(\"workData\", workData);\n    }\n\n    /**\n     * This function is called when layer items are rendered.\n     * It use the D3 force layout simulation to arrange the connections.\n     */\n    postCreateLayerItems() {\n        let layer = this.getState().getLayer();\n\n        if(layer != null) {\n            // get overleay pane\n            let overlayPane = d3.select(layer._map.getPanes().overlayPane);\n\n            // get <svg> element (expect L.svg() layer)\n            let svg = overlayPane.select(\"svg\");\n            let g = svg.select(\"g\")\n                // uncoment this in case of non-smooth zoom animation\n                //.attr(\"class\", \"leaflet-zoom-hide\")\n            ;\n            g.selectAll(\"*\").remove();\n\n            // create d3 force layout simulator\n            let workData = this.getState().getWorkData();\n            var d3ForceSimulator = new D3PathForceSimulator({\n                nodes: workData.nodes,\n                connections: workData.connections\n            });\n\n            // get projection path function\n            // geographic locations [lat, lng] of nodes needs to be projected to leaflet map\n            // we use the zoom preferred for the force layout simulation\n            var map = this.getMap().getState().getLeafletMap();\n            var projectionPathFunction = ProjectionUtil.getPathProjectionFunction(map, this.getDefaults().getProjectionZoom());\n\n            // draw paths\n            g.selectAll(\"path.abc\")\n                .data(d3ForceSimulator.getPaths())\n                .enter()\n                .append(\"path\")\n                .attr(\"d\", projectionPathFunction)\n                //.attr(\"data-countries\", function(d) { return d[0].id + \" \" + d[d.length-1].id; })\n                .attr(\"class\", \"leaflet-layer-connection\");\n\n            // update paths with respect to actual map state (zoom, move)\n            let updatePaths = function() {\n                g.selectAll(\"path\").attr(\"d\", projectionPathFunction);\n            }\n\n            // highlight connections with respect to the selection of the selection tool if available\n            if(this.getSelectionTool()) {\n                this.onSelectionUpdate(this.getSelectionTool().getState().getSelection());\n            }\n\n            // map move/zoom listener\n            map.on(\"moveend\", updatePaths);\n            // initial update\n            updatePaths();\n\n            // run force layout algorithm\n            d3ForceSimulator.run(\n                updatePaths,\n                function(d) {\n                    // print message when finishes\n                    console.log(\"Force layout algorithm completed!\");\n                }\n            );\n        }\n    }\n\n    /**\n     * It reloads data and redraw the layer.\n     */\n    redraw() {\n        let layer = this.getState().getLayer()\n        if(layer != undefined && layer._container != undefined) {\n            // delete actual items\n            this.deleteLayerItems();\n\n            // prepare data\n            this.prepareMapData();\n\n            // update map\n            this.postCreateLayerItems();\n        }\n    }\n\n    /**\n     * This function is called when a custom event is invoked.\n     *\n     * @param {AbstractEvent} event\n     */\n    handleEvent(event) {\n        if(event.getType() == DataChangeEvent.TYPE()) {\n            // data change\n            this.redraw();\n        } else if(event.getType() == SelectionToolEvent.TYPE()) {\n            // selection change\n            this.onSelectionUpdate(event.getObject())\n        } else if(event.getType() == ThemesToolEvent.TYPE()) {\n            // theme change\n            // TODO\n        }\n    }\n\n    /**\n     * It highlights connections with respect to the given selection.\n     */\n    onSelectionUpdate(selection) {\n        let layer = this.getState().getLayer();\n        if(layer != undefined && layer._container != undefined) {\n\n            // get overleay pane, svg g element and paths\n            let paths = d3.select(layer._map.getPanes().overlayPane)\n                            .select(\"svg\")\n                            .select(\"g\")\n                            .selectAll(\"path\");\n\n            if(selection && selection.getSrcIds().length > 0) {\n                let selectionSrcIds = selection.getSrcIds();\n\n                // process all paths and find the affected ones\n                let from, to;\n                let affectedIds = [];\n                paths.each(function(d) {\n                    // from\n                    from = d[0].id;\n                    to = d[d.length-1].id;\n                    if(selectionSrcIds.includes(from)) {\n                        // highlight\n                        this.setAttribute(\"class\", \"leaflet-layer-connection-highlight\");\n                        // check affected country\n                        if(!affectedIds.includes(to)) {\n                            affectedIds.push(to);\n                        }\n                    } else if(selectionSrcIds.includes(to)) {\n                        // highlight\n                        this.setAttribute(\"class\", \"leaflet-layer-connection-highlight\");\n                        // check affected country\n                        if(!affectedIds.includes(from)) {\n                            affectedIds.push(from);\n                        }\n                    } else {\n                        //if(this.getAttribute(\"class\") == \"leaflet-layer-connection\") {\n                            // deemphasize if it is not already highlighted\n                            this.setAttribute(\"class\", \"leaflet-layer-connection-other\");\n                        //}\n                    }\n                });\n\n                // update selection with respect to the affected countries\n                //console.log(\"affected\", affectedIds);\n                if(affectedIds.length > 0) {\n                    let selectionTool = this.getSelectionTool();\n                    if(selectionTool) {\n                        let length = selection.getIds().length;\n                        selection.addIds(affectedIds);\n                        // check if selection has changed\n                        // take only the paths which have not been already processed\n                        // this prevents cyclic processing\n                        if(length != selection.getIds().length) {\n                            selectionTool.setSelection(selection);\n                        }\n                    }\n                }\n            } else {\n                // set the default path style\n                paths.attr(\"class\", \"leaflet-layer-connection\");\n            }\n        }\n    }\n}\nexport default ConnectionLayerTool;\n","/**\n * This class wraps a filter operation.\n * \n * @author Jiri Hynek\n */\nclass AbstractTheme {\n\n    /**\n     * It initializes the theme.\n     */\n    constructor() {\n    }\n\n    /**\n     * It returns the theme type.\n     */\n    getType() {\n        return \"abstract\";\n    }\n\n    /**\n     * It returns the preferred base map.\n     * \n     * Override this function.\n     */\n    getBaseMap() {\n        return undefined;\n    }\n\n    /**\n     * It returns if the styles preferres inversed dark colors.\n     * \n     * Override this function.\n     */\n    isDark() {\n        return false;\n    }\n\n    // TODO define themes interface\n    \n}\nexport default AbstractTheme;","import AbstractThemesManager from \"../abstract/AbstractThemesManager\";\n\n/**\n * This class provide functions for using themes.\n * \n * @author Jiri Hynek\n */\nclass ThemesManager extends AbstractThemesManager {\n\n    constructor(themes) {\n        super();\n        this.themes = themes;\n    }\n\n    /**\n     * The function returns available themes.\n     */\n    getThemes() {\n        return this.themes;\n    }\n\n    /**\n     * The function returns the default theme.\n     */\n    getDefault() {\n        let objects = this.getThemes();\n        return objects && objects.length > 0 ? objects[0] : undefined;\n    }\n}\nexport default ThemesManager;","/**\n * This class provide functions for using themes.\n * \n * @author Jiri Hynek\n */\nclass AbstractThemesManager {\n\n    /**\n     * It initializes the theme manager.\n     */\n    constructor() {\n    }\n\n    /**\n     * It returns available filter operations\n     */\n    getThemes() {\n        return [];\n    }\n\n    /**\n     * It returns available filter operations\n     */\n    getTheme(label) {\n        let themes = this.getThemes();\n        let resultObjects = [];\n        if(themes != undefined) {\n            for(let i = 0; i < themes.length; i++) {\n                if(themes[i].getType() == label) {\n                    resultObjects.push(themes[i]);\n                }\n            }\n        }\n        return resultObjects;\n    }\n\n    /**\n     * The function returns available theme types.\n     */\n    getThemeLabels() {\n        let labels = [];\n        let themes = this.getThemes();\n        if(themes != undefined) {\n            for(let i = 0; i < themes.length; i++) {\n                labels.push(themes[i].getType());\n            }\n        }\n        return labels;\n    }\n\n    /**\n     * It returns the default theme.\n     */\n    getDefault() {\n        return undefined;\n    }\n    \n}\nexport default AbstractThemesManager;","import AbstractTheme from '../../abstract/AbstractTheme';\n\nimport './style.scss';\n\n/**\n * This class wraps a filter operation.\n * \n * @author Jiri Hynek\n */\nclass Light1Theme extends AbstractTheme {\n\n    /**\n     * It initializes the light theme.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns the theme type.\n     */\n    getType() {\n        return \"light1\";\n    }\n\n    /**\n     * It returns the preferred base map.\n     */\n    getBaseMap() {\n        return 'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png';\n    }\n}\nexport default Light1Theme;","import AbstractTheme from '../../abstract/AbstractTheme';\n\nimport './style.scss';\n\n/**\n * This class wraps a filter operation.\n * \n * @author Jiri Hynek\n */\nclass Light2Theme extends AbstractTheme {\n\n    /**\n     * It initializes the light theme.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns the theme type.\n     */\n    getType() {\n        return \"light2\";\n    }\n\n    /**\n     * It returns the preferred base map.\n     */\n    getBaseMap() {\n        return 'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png';\n    }\n}\nexport default Light2Theme;","import AbstractTheme from '../../abstract/AbstractTheme';\n\nimport './style.scss';\n\n/**\n * This class wraps a filter operation.\n * \n * @author Jiri Hynek\n */\nclass Light3Theme extends AbstractTheme {\n\n    /**\n     * It initializes the light theme.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns the theme type.\n     */\n    getType() {\n        return \"light3\";\n    }\n\n    /**\n     * It returns the preferred base map.\n     */\n    getBaseMap() {\n        return 'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png';\n    }\n}\nexport default Light3Theme;","import AbstractTheme from '../../abstract/AbstractTheme';\n\nimport './style.scss';\n\n/**\n * This class wraps a filter operation.\n * \n * @author Jiri Hynek\n */\nclass Dark1Theme extends AbstractTheme {\n\n    /**\n     * It initializes the dark theme.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns the theme type.\n     */\n    getType() {\n        return \"dark1\";\n    }\n\n    /**\n     * This theme prefers dark colors.\n     */\n    isDark() {\n        return true;\n    }\n\n    /**\n     * It returns the preferred base map.\n     */\n    getBaseMap() {\n        return 'https://{s}.basemaps.cartocdn.com/rastertiles/dark_all/{z}/{x}/{y}.png';\n    }\n}\nexport default Dark1Theme;","import AbstractTheme from '../../abstract/AbstractTheme';\n\nimport './style.scss';\n\n/**\n * This class wraps a filter operation.\n * \n * @author Jiri Hynek\n */\nclass Dark2Theme extends AbstractTheme {\n\n    /**\n     * It initializes the dark theme.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns the theme type.\n     */\n    getType() {\n        return \"dark2\";\n    }\n\n    /**\n     * This theme prefers dark colors.\n     */\n    isDark() {\n        return true;\n    }\n\n    /**\n     * It returns the preferred base map.\n     */\n    getBaseMap() {\n        return 'https://{s}.basemaps.cartocdn.com/rastertiles/dark_all/{z}/{x}/{y}.png';\n    }\n}\nexport default Dark2Theme;","import AbstractTheme from '../../abstract/AbstractTheme';\n\nimport './style.scss';\n\n/**\n * This class wraps a filter operation.\n * \n * @author Jiri Hynek\n */\nclass Dark3Theme extends AbstractTheme {\n\n    /**\n     * It initializes the dark theme.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It returns the theme type.\n     */\n    getType() {\n        return \"dark3\";\n    }\n\n    /**\n     * This theme prefers dark colors.\n     */\n    isDark() {\n        return true;\n    }\n\n    /**\n     * It returns the preferred base map.\n     */\n    getBaseMap() {\n        return 'https://{s}.basemaps.cartocdn.com/rastertiles/dark_all/{z}/{x}/{y}.png';\n    }\n}\nexport default Dark3Theme;","import ThemesManager from \"./model/theme/generic/ThemesManager\";\nimport Light1Theme from \"./model/theme/basic/light1/Light1Theme\";\nimport Light2Theme from \"./model/theme/basic/light2/Light2Theme\";\nimport Light3Theme from \"./model/theme/basic/light3/Light3Theme\";\nimport Dark1Theme from \"./model/theme/basic/dark1/Dark1Theme\";\nimport Dark2Theme from \"./model/theme/basic/dark2/Dark2Theme\";\nimport Dark3Theme from \"./model/theme/basic/dark3/Dark3Theme\";\nimport ThemesTool from \"./ThemesTool\";\nimport AbstractToolDefaults from \"../../model/tool/abstract/AbstractToolDefaults\";\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass ThemesToolDefaults extends AbstractToolDefaults {\n\n    /**\n     * It creates tool defaults.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * Only one themes tool should be present in the Geovisto map.\n     */\n    isSingleton() {\n       return true; \n    }\n\n    /**\n     * It returns a unique string of the tool type.\n     */\n    getType() {\n        return ThemesTool.TYPE();\n    }\n\n    /**\n     * It returns default themes manager.\n     */\n    getThemesManager() {\n        return new ThemesManager([\n            new Light1Theme(),\n            new Light2Theme(),\n            new Light3Theme(),\n            new Dark1Theme(),\n            new Dark2Theme(),\n            new Dark3Theme()\n        ]);\n    }\n\n    /**\n     * It returns default theme.\n     */\n    getTheme() {\n        return this.getMapObject().getState().getThemesManager().getDefault();\n    }\n}\nexport default ThemesToolDefaults;","import AbstractToolState from \"../../model/tool/abstract/AbstractToolState\";\nimport AbstractTheme from \"./model/theme/abstract/AbstractTheme\";\nimport ThemesToolDefaults from \"./ThemesToolDefaults\";\n\n/**\n * This class provide functions for using themes.\n * \n * @author Jiri Hynek\n */\nclass ThemesToolState extends AbstractToolState {\n\n    /**\n     * It creates a tool state.\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * It resets state with respect to initial props. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {ThemesToolDefaults} defaults \n     */\n    reset(defaults) {\n        super.reset(defaults);\n\n        let props = this.getProps();\n\n        // set theme manager - needs to be set before the theme\n        this.setThemesManager(props.manager == undefined && defaults ? defaults.getThemesManager() : props.manager);\n\n        // set theme\n        this.setTheme(props.theme == undefined && defaults ? defaults.getTheme() : props.theme);\n    }\n\n    /**\n     * The metod takes config and desrializes the values.\n     * \n     * @param {*} config \n     */\n    deserialize(config) {\n        super.deserialize(config);\n\n        // deserialize theme id\n        if(config.theme != undefined) {\n            // get filter and data manegers which are need for proper deserialization of filter rules\n            let themesManager = this.getThemesManager();\n            if(themesManager != undefined) {\n                let theme = themesManager.getTheme(config.theme);\n                if(theme && theme.length > 0) {\n                    this.setTheme(theme[0]);\n                }\n            }\n        }\n    }\n\n    /**\n     * The method serializes the tool state. Optionally, defaults can be set if property is undefined.\n     * \n     * @param {ThemesToolDefaults} defaults\n     */\n    serialize(defaults) {\n        let config = super.serialize(defaults);\n\n        // serialize the theme\n        config.theme = defaults && this.getTheme() == undefined ? undefined : this.getTheme().getType();\n\n        return config;\n    }\n\n    /**\n     * It returns themes manager.\n     */\n    getThemesManager() {\n        return this.manager;\n    }\n\n    /**\n     * It sets themes manager.\n     * \n     * @param {AbstractThemesManager} manager \n     */\n    setThemesManager(manager) {\n        this.manager = manager;\n    }\n\n    /**\n     * It returns the theme property of the tool state.\n     */\n    getTheme() {\n        return this.theme;\n    }\n\n    /**\n     * It sets the theme property of the tool state.\n     * \n     * @param {AbstractTheme} theme \n     */\n    setTheme(theme) {\n       this.theme = theme;\n    }\n}\nexport default ThemesToolState;","import AbstractTabFragmentDefaults from \"../../sidebar/model/fragment/AbstractTabFragmentDefaults\";\n\n/**\n * This class provide functions which return the default state values.\n * \n * @author Jiri Hynek\n */\nclass ThemesToolTabFragmentDefaults extends AbstractTabFragmentDefaults {\n\n    /**\n     * It creates sidebar tab fragment defaults.\n     */\n    constructor() {\n        super();\n    }\n}\nexport default ThemesToolTabFragmentDefaults;","import AbstractTabFragmentState from \"../../sidebar/model/fragment/AbstractTabFragmentState\";\n\n/**\n * This class manages the state of the sidebar fragment.\n * It wraps the state since the sidebar fragment can work with state objects which needs to be explicitly serialized.\n * \n * @author Jiri Hynek\n */\nclass ThemesToolTabFragmentState extends AbstractTabFragmentState {\n\n    /**\n     * It creates a tab fragment state.\n     */\n    constructor() {\n        super();\n    }\n}\nexport default ThemesToolTabFragmentState;","import AbstractTabFragment from '../../sidebar/model/fragment/AbstractTabFragment';\nimport SettingsTool from '../../settings/SettingsTool';\nimport ThemesToolTabFragmentDefaults from './ThemesToolTabFragmentDefaults';\nimport ThemesToolTabFragmentState from './ThemesToolTabFragmentState';\nimport AutocompleteSidebarInput from '../../../inputs/input/AutocompleteSidebarInput';\nimport SidebarInputFactory from '../../../inputs/SidebarInputFactory';\n\n/**\n * This class represents tab fragment for Themes tool.\n * \n * TODO: exclude defaults and state variables\n * \n * @author Jiri Hynek\n */\nclass ThemesToolTabFragment extends AbstractTabFragment {\n\n    constructor(props) {\n        super(props);\n\n        // tab content\n        this.tabContent = undefined;\n    }\n\n    /**\n     * It creates new defaults of the tab fragment.\n     */\n    createDefaults() {\n        return new ThemesToolTabFragmentDefaults();\n    }\n\n    /**\n     * It creates new state of the tab fragment.\n     */\n    createState() {\n        return new ThemesToolTabFragmentState();\n    }\n\n    /**\n     * The function returns true if the tab fragment should be included in the tab control.\n     * \n     * @param {*} tabControl \n     */\n    isChild(tabControl) {\n        return tabControl.getState().getTool().getType() == SettingsTool.TYPE();\n    }\n\n    /**\n     * It returns fragment of tab pane which will be placed in sidebar tab.\n     * \n     * This function can be extended.\n     */\n    getTabContent() {\n        if(this.tabContent == undefined) {\n            this.createTabContent();\n        }\n        return this.tabContent;\n    }\n\n    /**\n     * Help function which creates tab content.\n     */\n    createTabContent() {\n        // tab pane\n        this.tabContent = document.createElement('div');\n\n        // theme input\n        var tool = this.getState().getTool();\n        var themesManager = tool.getState().getThemesManager();\n        let changeTheme = function(e) {\n            let newTheme = themesManager.getTheme(e.target.value);\n            if(newTheme && newTheme.length > 0) {\n                tool.setTheme(newTheme[0]);\n            }\n        }\n        let themeInput = SidebarInputFactory.createSidebarInput(AutocompleteSidebarInput.ID(), { label: \"Theme\", options: themesManager.getThemeLabels(), action: changeTheme });\n        this.tabContent.appendChild(themeInput.create());\n        themeInput.setValue(tool.getState().getTheme().getType());\n    }\n\n}\nexport default ThemesToolTabFragment;","import AbstractTool from \"../../model/tool/abstract/AbstractTool\";\nimport ThemesToolState from \"./ThemesToolState\";\nimport ThemesToolEvent from \"./model/event/ThemesToolEvent\";\nimport ThemesToolDefaults from \"./ThemesToolDefaults\";\nimport ThemesToolTabFragment from \"./sidebar/ThemesToolTabFragment\";\n\n/**\n * Attribute which is set to the map container.\n */\nconst THEME_ATTR_NAME = \"data-theme\";\n\n/**\n * This class provides the themes tool.\n * \n * @author Jiri Hynek\n */\nclass ThemesTool extends AbstractTool {\n\n    /**\n     * It creates a new tool with respect to the props.\n     * \n     * @param {*} props \n     */\n    constructor(props) {\n        super(props);\n\n        // the tab fragment for a sidebar tab will be created only if needed\n        this.tabFragment = undefined\n    }\n\n    /**\n     * A unique string of the tool type.\n     */\n    static TYPE() {\n        return \"geovisto-tool-themes\";\n    }\n\n    /**\n     * It creates a copy of the uninitialized tool.\n     */\n    copy() {\n        return new ThemesTool(this.getProps());\n    }\n\n    /**\n     * It creates new defaults of the tool.\n     */\n    createDefaults() {\n        return new ThemesToolDefaults();\n    }\n\n    /**\n     * It returns the tool state.\n     */\n    createState() {\n        return new ThemesToolState();\n    }\n\n    /**\n     * It creates new filter tool.\n     */\n    create() {\n        // set theme\n        this.setTheme(this.getState().getTheme());\n    }\n\n    /**\n     * \n     * @param {*} theme \n     */\n    setTheme(theme) {\n        if(theme != undefined) {\n            // if the theme tool is enabled, update map theme\n            if(this.isEnabled()) {\n                // update map container theme attribute (used by CSS selectors)\n                document.getElementById(this.getMap().getId()).setAttribute(THEME_ATTR_NAME, theme.getType());\n\n                // update tool state\n                this.getState().setTheme(theme);\n\n                // dispatch event\n                this.getMap().dispatchEvent(new ThemesToolEvent(this, theme));\n            }\n        }\n    }\n\n    /**\n     * It returns tab control with respect to the configuration\n     */\n    getSidebarTabFragment() {\n        if(this.tabFragment == undefined) {\n            this.tabFragment = this.createSidebarTabFragment();\n        }\n        return this.tabFragment;\n    }\n\n    /**\n     * It creates new tab fragment.\n     */\n    createSidebarTabFragment() {\n        return new ThemesToolTabFragment({ tool: this });\n    }\n}\nexport default ThemesTool;","import React from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nimport circle from '@turf/circle';\r\nimport union from '@turf/union';\r\nimport difference from '@turf/difference';\r\nimport * as turf from '@turf/turf';\r\n\r\nimport {\r\n  convertOptionsToProperties,\r\n  getGeoJSONFeatureFromLayer,\r\n  getSimplifiedPoly,\r\n  highlightStyles,\r\n  normalStyles,\r\n  simplifyFeature,\r\n} from '../util/Poly';\r\n\r\nimport { STROKES } from '../sidebar/DrawingLayerToolTabControlState';\r\n\r\nconst DEFAULT_COLOR = '#333333';\r\nconst DEFAULT_RADIUS = 30;\r\nconst ERASE_KEY = 'X';\r\nconst ERASER_COLOR = '#ee000055';\r\n\r\nclass PaintPoly {\r\n  constructor(props) {\r\n    this.tabState = props.tabState;\r\n    // this._map = window.map;\r\n\r\n    this._action = null;\r\n    this._circle = null;\r\n    this._mouseDown = false;\r\n    this._latlng = [0, 0];\r\n\r\n    this._maxCircleRadius = 100;\r\n    this._minCircleRadius = 10;\r\n    this._circleRadius = DEFAULT_RADIUS;\r\n\r\n    this.keyIndex = 0;\r\n\r\n    this._accumulatedShapes = {};\r\n    this._shapeLayers = {};\r\n\r\n    this._active = false;\r\n  }\r\n\r\n  getMouseDown = () => {\r\n    return this._mouseDown;\r\n  };\r\n\r\n  getBrushSize = () => {\r\n    return this._circleRadius;\r\n  };\r\n\r\n  getBrushSizeConstraints = () => {\r\n    return { maxBrushSize: this._maxCircleRadius, minBrushSize: this._minCircleRadius };\r\n  };\r\n\r\n  resizeBrush = (val) => {\r\n    if (val && val <= this._maxCircleRadius && val >= this._minCircleRadius) {\r\n      this._circleRadius = val;\r\n      this._circle.setRadius(val);\r\n    }\r\n  };\r\n\r\n  stop = () => {\r\n    this._action = null;\r\n    if (this._circle) {\r\n      this._circle.remove();\r\n    }\r\n    this._removeMouseListener();\r\n  };\r\n\r\n  startPaint = () => {\r\n    this.stop();\r\n    this._action = 'draw';\r\n    this._addMouseListener();\r\n    this._circle = L.circleMarker(this._latlng, {\r\n      color: DEFAULT_COLOR,\r\n    })\r\n      .setRadius(this._circleRadius)\r\n      .addTo(window.map);\r\n  };\r\n\r\n  startErase = () => {\r\n    this.stop();\r\n    this._action = 'erase';\r\n    this._addMouseListener();\r\n    this._circle = L.circleMarker(this._latlng, {\r\n      color: ERASER_COLOR,\r\n    })\r\n      .setRadius(this._circleRadius)\r\n      .addTo(window.map);\r\n  };\r\n\r\n  clearPaintedPolys = (kIdx) => {\r\n    if (kIdx === undefined) return;\r\n\r\n    if (this._shapeLayers[kIdx]) {\r\n      this._shapeLayers[kIdx].remove();\r\n      delete this._shapeLayers[kIdx];\r\n    }\r\n    delete this._accumulatedShapes[kIdx];\r\n  };\r\n\r\n  clearAllAccumulated = () => {\r\n    Object.keys(this._accumulatedShapes).forEach((key) => {\r\n      delete this._accumulatedShapes[key];\r\n    });\r\n  };\r\n\r\n  updatePaintedPolys = (kIdx, layer) => {\r\n    if (kIdx === undefined) return;\r\n\r\n    if (this._shapeLayers[kIdx]) {\r\n      this._shapeLayers[kIdx] = layer;\r\n    }\r\n    let feature = layer.toGeoJSON();\r\n    feature.properties = convertOptionsToProperties(layer.options);\r\n\r\n    this._accumulatedShapes[kIdx] = feature;\r\n  };\r\n\r\n  // taken from https://stackoverflow.com/questions/27545098/leaflet-calculating-meters-per-pixel-at-zoom-level\r\n  _pixelsToMeters = () => {\r\n    const metersPerPixel =\r\n      (40075016.686 * Math.abs(Math.cos((this._latlng.lat * Math.PI) / 180))) /\r\n      Math.pow(2, window.map.getZoom() + 8);\r\n\r\n    return this._circleRadius * metersPerPixel;\r\n  };\r\n\r\n  drawCircle = (erase) => {\r\n    const brushColor = this.tabState.getSelectedColor() || DEFAULT_COLOR;\r\n    const brushStroke = this.tabState.getSelectedStroke() || STROKES[1].value;\r\n    const turfCircle = circle([this._latlng.lng, this._latlng.lat], this._pixelsToMeters(), {\r\n      steps: 16,\r\n      units: 'meters',\r\n    });\r\n\r\n    const kIdx = erase ? ERASE_KEY : this.keyIndex;\r\n\r\n    if (!this._accumulatedShapes[kIdx]) {\r\n      this._accumulatedShapes[kIdx] = turfCircle;\r\n    } else {\r\n      this._accumulatedShapes[kIdx] = union(this._accumulatedShapes[kIdx], turfCircle);\r\n    }\r\n\r\n    this._accumulatedShapes[kIdx].properties = { fill: brushColor, 'stroke-width': brushStroke };\r\n    // console.log({\r\n    //   accShapes: this._accumulatedShapes,\r\n    //   shape: this._accumulatedShapes[kIdx],\r\n    //   kIdx: kIdx,\r\n    // });\r\n    this._redrawShapes();\r\n  };\r\n\r\n  _redrawShapes = () => {\r\n    const selectedLayer = this.tabState.getToolState().selectedLayer;\r\n    Object.keys(this._accumulatedShapes).forEach((key) => {\r\n      let simplified = simplifyFeature(this._accumulatedShapes[key]);\r\n      let coords = simplified.geometry.coordinates;\r\n      let isMultiPoly = this._accumulatedShapes[key].geometry.type === 'MultiPolygon';\r\n      let depth = isMultiPoly ? 2 : 1;\r\n      let latlngs = L.GeoJSON.coordsToLatLngs(coords, depth);\r\n      let color = this._accumulatedShapes[key]?.properties?.fill || DEFAULT_COLOR;\r\n      let weight = this._accumulatedShapes[key]?.properties['stroke-width'] || STROKES[1].value;\r\n\r\n      let styles = selectedLayer?.kIdx === key ? highlightStyles : normalStyles;\r\n\r\n      let opts =\r\n        key === ERASE_KEY\r\n          ? { color: ERASER_COLOR, draggable: false, transform: false }\r\n          : {\r\n              color,\r\n              weight,\r\n              draggable: true,\r\n              transform: true,\r\n            };\r\n\r\n      let result = new L.polygon(latlngs, { ...opts, ...styles });\r\n\r\n      result?.dragging?.disable();\r\n\r\n      if (this._shapeLayers[key] !== undefined) {\r\n        this._shapeLayers[key].remove();\r\n      }\r\n\r\n      this._shapeLayers[key] = result.addTo(window.map);\r\n    });\r\n  };\r\n\r\n  _fireCreatedShapes = () => {\r\n    // console.log('%cfired', 'color: #085f89');\r\n    const layerState = this.tabState.getToolState();\r\n    Object.keys(this._shapeLayers).forEach((key) => {\r\n      const found = layerState.getLayerByIdx(key);\r\n      if (found) {\r\n        layerState.removeLayer(found);\r\n        this._shapeLayers[key].kIdx = key;\r\n        this._shapeLayers[key].layerType = 'painted';\r\n        layerState.addLayer(this._shapeLayers[key]);\r\n      } else {\r\n        window.map.fire(L.Draw.Event.CREATED, {\r\n          layer: this._shapeLayers[key],\r\n          layerType: key === ERASE_KEY ? 'erased' : 'painted',\r\n          keyIndex: key,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  // ================= EVENT LISTENERS =================\r\n  _addMouseListener = () => {\r\n    window.map.on('mousemove', this._onMouseMove);\r\n    window.map.on('mousedown', this._onMouseDown);\r\n    window.map.on('mouseup', this._onMouseUp);\r\n  };\r\n  _removeMouseListener = () => {\r\n    window.map.off('mousemove', this._onMouseMove);\r\n    window.map.off('mousedown', this._onMouseDown);\r\n    window.map.off('mouseup', this._onMouseUp);\r\n  };\r\n  _onMouseDown = (event) => {\r\n    window.map.dragging.disable();\r\n    this._mouseDown = true;\r\n    this._onMouseMove(event);\r\n  };\r\n  _onMouseUp = (event) => {\r\n    window.map.dragging.enable();\r\n    this._mouseDown = false;\r\n    this.keyIndex += 1;\r\n    this._fireCreatedShapes();\r\n  };\r\n  _onMouseMove = (event) => {\r\n    this._setLatLng(event.latlng);\r\n    if (this._mouseDown) {\r\n      this.drawCircle(this._action === 'erase');\r\n    }\r\n  };\r\n  // ================= EVENT LISTENERS END =================\r\n\r\n  _setLatLng = (latlng) => {\r\n    if (latlng !== undefined) {\r\n      this._latlng = latlng;\r\n    }\r\n    if (this._circle) {\r\n      this._circle.setLatLng(this._latlng);\r\n    }\r\n  };\r\n\r\n  clickDraw = (event) => {\r\n    if (event.type == 'mousedown') {\r\n      L.DomEvent.stop(event);\r\n      return;\r\n    }\r\n    if (this._action == 'draw') {\r\n      this.disable();\r\n    } else {\r\n      this.enablePaint();\r\n    }\r\n  };\r\n\r\n  erase = (event) => {\r\n    if (event.type == 'mousedown') {\r\n      L.DomEvent.stop(event);\r\n      return;\r\n    }\r\n    if (this._action == 'erase') {\r\n      this.disable();\r\n    } else {\r\n      this.startErase();\r\n      this._active = true;\r\n    }\r\n  };\r\n\r\n  enableErase = () => {\r\n    this.startErase();\r\n    this._active = true;\r\n  };\r\n\r\n  enablePaint = () => {\r\n    this.startPaint();\r\n    this._active = true;\r\n  };\r\n\r\n  disable = () => {\r\n    this.stop();\r\n    this._active = false;\r\n  };\r\n\r\n  isActive = () => {\r\n    return this._active;\r\n  };\r\n}\r\n\r\nexport default PaintPoly;\r\n","import React from 'react';\nimport L, { popup } from 'leaflet';\nimport 'leaflet-path-drag';\n\nimport 'leaflet/dist/leaflet.css';\nimport { ICON_SRCS } from '../sidebar/DrawingLayerToolTabControlState';\nimport { OpenStreetMapProvider } from 'leaflet-geosearch';\nimport { MapLayerTool } from '../../map';\n\nL.Draw.ExtendedMarker = L.Draw.Marker.extend({\n  setIconOptions: function (iconOpts) {\n    this.options.icon = iconOpts;\n  },\n});\n\nexport const iconStarter = {\n  shadowUrl: null,\n  iconAnchor: new L.Point(12, 12),\n  iconSize: new L.Point(24, 24),\n};\n\n// * opted for this approach instead of extending L.Icon\n// * it led to some bugs/errors and this way we have an access to icon options\nconst iconOptions = {\n  ...iconStarter,\n};\n\nexport const markerCreate = (map, sidebar, connectClick = false) => {\n  const additionalOpts = { iconUrl: sidebar.getState().getSelectedIcon(), connectClick };\n  const icon = new L.Icon({ ...iconOptions, ...additionalOpts });\n  const { guideLayers } = sidebar.getState();\n\n  const x = new L.Draw.ExtendedMarker(map, {\n    icon,\n    draggable: true,\n    transform: true,\n    repeatMode: true,\n    guideLayers,\n    snapVertices: false,\n  });\n  if (x) sidebar.getState().setEnabledEl(x);\n  x.enable();\n  return x;\n};\n\nexport const connectClick = (map, sidebar) => {\n  const marker = markerCreate(map, sidebar, true);\n};\n\nexport const putMarkerOnMap = (featureGroup, latlng, popup, iconUrl, connectClick = false) => {\n  const additionalOpts = { iconUrl: iconUrl || ICON_SRCS[0], connectClick };\n  const icon = new L.Icon({\n    ...iconOptions,\n    ...additionalOpts,\n  });\n\n  let marker = new L.Marker.Touch(latlng, { icon });\n  if (popup) {\n    marker.bindPopup(popup, { closeOnClick: false, autoClose: false });\n    marker.popupContent = popup;\n  }\n\n  marker.layerType = 'marker';\n  console.log({ marker });\n  featureGroup.addLayer(marker);\n  // map.fire(L.Draw.Event.CREATED, { layer: marker, layerType: 'marker' });\n  return marker;\n};\n\nexport const geoSearch = async (featureGroup, query = '') => {\n  if (!query) return;\n\n  // setup\n  const provider = new OpenStreetMapProvider();\n\n  // search\n  const results = await provider.search({ query });\n\n  return results;\n};\n","export function debounce(func, wait, immediate) {\r\n  var timeout;\r\n  return function () {\r\n    var context = this,\r\n      args = arguments;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(function () {\r\n      timeout = null;\r\n      if (!immediate) func.apply(context, args);\r\n    }, wait);\r\n    if (immediate && !timeout) func.apply(context, args);\r\n  };\r\n}\r\n\r\n/**\r\n * @brief is array or object empty\r\n *\r\n * @param {Object | Array} obj\r\n * @returns {boolean}\r\n */\r\nexport const isEmpty = (obj) => {\r\n  return typeof obj === 'object' && obj !== null && Object.keys(obj).length === 0;\r\n};\r\n\r\nexport const sortReverseAlpha = (a, b) => {\r\n  if (a < b) return 1;\r\n  if (a > b) return -1;\r\n  return 0;\r\n};\r\n\r\nexport const sortAlpha = (a, b) => {\r\n  if (a < b) return -1;\r\n  if (a > b) return 1;\r\n  return 0;\r\n};\r\n\r\nexport const isInt = (n) => Number(n) === n && n % 1 === 0;\r\n\r\nexport const isFloat = (n) => Number(n) === n && n % 1 !== 0;\r\n\r\nexport const getIntervalStep = (n) => {\r\n  if (!n) return 0.0;\r\n  let split = String(n).split('.');\r\n  if (split.length === 2) {\r\n    let after = split[1];\r\n    let length = after.length - 1 < 0 ? 0 : after.length;\r\n    let allZeros = [...Array(length)].join('0');\r\n\r\n    if (length === 1) return 0.01;\r\n    else if (length === 0) return 0.1;\r\n    else return Number(`0.${allZeros}1`);\r\n  }\r\n\r\n  return 0.0;\r\n};\r\n","export const createIntervalInput = (label, min, max, onChange, value, step = 1) => {\r\n  const controlWrapper = document.createElement('div');\r\n  controlWrapper.style.display = 'flex';\r\n  controlWrapper.style.justifyContent = 'space-between';\r\n  controlWrapper.style.alignItems = 'center';\r\n\r\n  const inputWrapper = document.createElement('div');\r\n  inputWrapper.appendChild(document.createTextNode(label));\r\n  const control = document.createElement('input');\r\n  control.setAttribute('type', 'range');\r\n  control.setAttribute('min', min);\r\n  control.setAttribute('max', max);\r\n  control.setAttribute('step', step);\r\n  control.onchange = (e) => {\r\n    onChange(e.target.value);\r\n    displayAmount.innerText = e.target.value;\r\n  };\r\n  control.value = value;\r\n  inputWrapper.appendChild(control);\r\n\r\n  controlWrapper.appendChild(inputWrapper);\r\n\r\n  const displayAmount = document.createElement('span');\r\n  displayAmount.innerText = value;\r\n  controlWrapper.appendChild(displayAmount);\r\n\r\n  return controlWrapper;\r\n};\r\n\r\nexport const createCheck = (value, onCheck, prefix, label) => {\r\n  const onChange = (e) => {\r\n    const val = e.target.checked;\r\n    onCheck(val);\r\n  };\r\n  const ID = prefix + '-check-input';\r\n  const inputWrapper = document.createElement('div');\r\n  inputWrapper.className = `${ID}-wrapper check-wrapper`;\r\n  const check = document.createElement('input');\r\n  check.type = 'checkbox';\r\n  check.checked = value;\r\n  check.id = ID;\r\n  check.onchange = onChange;\r\n  const checkLabel = document.createElement('label');\r\n  checkLabel.for = ID;\r\n  checkLabel.innerText = label;\r\n  inputWrapper.appendChild(check);\r\n  inputWrapper.appendChild(checkLabel);\r\n  return inputWrapper;\r\n};\r\n","import AbstractLayerToolTabControlState from '../../abstract/sidebar/AbstractLayerToolTabControlState';\r\nimport PaintPoly from '../components/paintPoly';\r\n\r\nimport '../style/drawingLayerTabControl.scss';\r\nimport { geoSearch, iconStarter, putMarkerOnMap } from '../util/Marker';\r\nimport { highlightStyles, normalStyles, simplifyFeature } from '../util/Poly';\r\nimport { debounce } from '../util/functionUtils';\r\nimport { createIntervalInput, createCheck } from '../components/inputs';\r\n\r\nimport * as osmtogeojson from 'osmtogeojson';\r\nimport * as turf from '@turf/turf';\r\nimport { FIRST } from '../util/constants';\r\n\r\nexport const ICON_SRCS = [\r\n  'https://upload.wikimedia.org/wikipedia/commons/0/0a/Marker_location.png',\r\n  'https://icons.iconarchive.com/icons/icons-land/vista-map-markers/32/Map-Marker-Flag-1-Right-Azure-icon.png',\r\n];\r\nexport const COLORS = [\r\n  '#1ABC9C',\r\n  '#16A085',\r\n  '#2ECC71',\r\n  '#27AE60',\r\n  '#3498DB',\r\n  '#2980B9',\r\n  '#9B59B6',\r\n  '#8E44AD',\r\n  '#34495E',\r\n  '#2C3E50',\r\n  '#F1C40F',\r\n  '#F39C12',\r\n  '#E67E22',\r\n  '#D35400',\r\n  '#E74C3C',\r\n  '#C0392B',\r\n  '#ECF0F1',\r\n  '#BDC3C7',\r\n  '#95A5A6',\r\n  '#7F8C8D',\r\n];\r\nexport const STROKES = [\r\n  { label: 'thin', value: 3 },\r\n  { label: 'medium', value: 5, selected: true },\r\n  { label: 'bold', value: 7 },\r\n];\r\nexport const ADMIN_LEVELS = [\r\n  { label: 'State', value: 2 },\r\n  { label: 'Province', value: 4, selected: true },\r\n  { label: 'Region (does not work with every country)', value: 6 },\r\n];\r\n\r\n/**\r\n * This class manages the state of the sidebar tab.\r\n * It wraps the state since the sidebar tab can work with state objects which needs to be explicitly serialized.\r\n *\r\n * @author Andrej Tlcina\r\n */\r\nclass DrawingLayerToolTabControlState extends AbstractLayerToolTabControlState {\r\n  /**\r\n   * It creates a tab control state.\r\n   */\r\n  constructor(tabControl) {\r\n    super();\r\n    this.tabControl = tabControl;\r\n\r\n    this.colors = COLORS;\r\n    this.selectedColor = COLORS[0];\r\n\r\n    this.strokes = STROKES;\r\n    this.selectedStroke = STROKES[1].value;\r\n\r\n    this.iconSrcs = new Set(ICON_SRCS);\r\n    this.selectedIcon = ICON_SRCS[0];\r\n\r\n    // * element/layer that was enabled and not created yet\r\n    this.enabledEl = null;\r\n\r\n    this.identifierType = '';\r\n\r\n    this.searchOpts = [];\r\n\r\n    this.guideLayers = [];\r\n\r\n    this.connectActivated = false;\r\n\r\n    this.intersectActivated = false;\r\n\r\n    this.paintPoly = new PaintPoly({\r\n      tabState: this,\r\n    });\r\n\r\n    this.pather = new L.Pather({\r\n      strokeWidth: 3,\r\n      smoothFactor: 5,\r\n      moduleClass: 'leaflet-pather',\r\n      pathColour: '#333',\r\n    });\r\n    this.patherActive = false;\r\n\r\n    this.countries = require('../../../../../static/geo/iso3166_countries.json');\r\n    this.countryCode = '';\r\n    this.adminLevel = ADMIN_LEVELS[1].value;\r\n    this.highQuality = false;\r\n  }\r\n\r\n  setCountryCode(val) {\r\n    this.countryCode = val;\r\n  }\r\n  setAdminLevel(val) {\r\n    this.adminLevel = val;\r\n  }\r\n  setHighQuality(val) {\r\n    this.highQuality = val;\r\n  }\r\n\r\n  getToolState() {\r\n    return this.getTool().getState();\r\n  }\r\n\r\n  setPatherStatus(val) {\r\n    this.patherActive = val;\r\n  }\r\n\r\n  setConnectActivated(val) {\r\n    this.connectActivated = val;\r\n  }\r\n\r\n  setIntersectActivated(val) {\r\n    this.intersectActivated = val;\r\n  }\r\n\r\n  pushGuideLayer(layer) {\r\n    this.guideLayers.push(layer);\r\n  }\r\n\r\n  setEnabledEl(val) {\r\n    this.enabledEl?.disable();\r\n    this.enabledEl = val;\r\n  }\r\n\r\n  getIdentifierType() {\r\n    return this.identifierType;\r\n  }\r\n\r\n  setIdentifierType(val) {\r\n    this.identifierType = val;\r\n  }\r\n\r\n  getEnabledEl() {\r\n    return this.enabledEl;\r\n  }\r\n\r\n  getSelectedColor() {\r\n    return this.selectedColor;\r\n  }\r\n\r\n  getSelectedStroke() {\r\n    return this.selectedStroke;\r\n  }\r\n\r\n  getSelectedIcon() {\r\n    return this.selectedIcon;\r\n  }\r\n\r\n  setSelectedColor(value) {\r\n    this.selectedColor = value;\r\n  }\r\n\r\n  setSelectedStroke(value) {\r\n    this.selectedStroke = value;\r\n  }\r\n\r\n  setSelectedIcon(value) {\r\n    this.selectedIcon = value;\r\n  }\r\n\r\n  setSearchOpts(opts) {\r\n    this.searchOpts = opts;\r\n  }\r\n\r\n  appendToIconSrcs(iconUrl) {\r\n    this.iconSrcs.add(iconUrl);\r\n  }\r\n\r\n  getSelectCountries() {\r\n    const result = this.countries.map((c) => ({ value: c['alpha-2'], label: c['name'] }));\r\n    return [{ value: '', label: '' }, ...result];\r\n  }\r\n\r\n  changeColorAction = (color) => {\r\n    const selectedEl = this._getSelected();\r\n    this.setSelectedColor(color);\r\n    if (selectedEl?.setStyle) selectedEl.setStyle({ color });\r\n    // this.tabControl.redrawTabContent(selectedEl?.layerType);\r\n  };\r\n\r\n  changeIconOpts = (iconOpt = {}) => {\r\n    const { enabledEl } = this;\r\n\r\n    let selectedEl = this._getSelected();\r\n    let marker = selectedEl;\r\n\r\n    if (enabledEl?.type === 'marker') {\r\n      selectedEl = enabledEl;\r\n      marker = enabledEl._marker;\r\n    }\r\n\r\n    let oldIconOptions = selectedEl?.options?.icon?.options || {};\r\n    let newIconOptions = {\r\n      ...oldIconOptions,\r\n      ...iconOpt,\r\n    };\r\n\r\n    const markerIcon = new L.Icon(newIconOptions);\r\n    if (marker) marker.setIcon(markerIcon);\r\n    if (enabledEl?.type === 'marker') enabledEl.setIconOptions(markerIcon);\r\n\r\n    return marker;\r\n  };\r\n\r\n  changeIconAction = (icon) => {\r\n    this.changeIconOpts({ iconUrl: icon });\r\n\r\n    this.setSelectedIcon(icon);\r\n    this.tabControl.redrawTabContent('marker');\r\n  };\r\n\r\n  changeDescriptionAction = (e) => {\r\n    this.changeDesc(e.target.value);\r\n  };\r\n\r\n  changeDesc = (inputText) => {\r\n    const selectedEl = this._getSelected();\r\n    const modInputText = this.tabControl.convertDescToPopText(inputText);\r\n\r\n    let popup1 = selectedEl.getPopup();\r\n    if (popup1) {\r\n      popup1.setContent(modInputText);\r\n    } else {\r\n      selectedEl.bindPopup(modInputText, { closeOnClick: false, autoClose: false });\r\n    }\r\n    // store for import\r\n    selectedEl.popupContent = modInputText;\r\n    // this.setSelectedColor(color);\r\n    if (selectedEl?.setStyle) selectedEl.setStyle(modInputText);\r\n  };\r\n\r\n  changeWeightAction = (e) => {\r\n    const weight = Number(e.target.value);\r\n    const selectedEl = this._getSelected();\r\n    this.setSelectedStroke(weight);\r\n    if (selectedEl?.setStyle) selectedEl.setStyle({ weight });\r\n  };\r\n\r\n  changeIdentifierAction = (e) => {\r\n    const id = e.target.value;\r\n    const selectedEl = this._getSelected();\r\n    if (selectedEl) selectedEl.identifier = id;\r\n\r\n    const data = this.getTool()?.getState()?.map?.state?.data;\r\n\r\n    const found = data.find(({ identifier }) => identifier === id);\r\n\r\n    let popupText = '';\r\n    Object.keys(found).forEach((key) => {\r\n      popupText += `${key}: ${found[key]}<br />`;\r\n    });\r\n\r\n    this.changeDesc(popupText);\r\n    this.tabControl.redrawTabContent(selectedEl?.layerType);\r\n  };\r\n\r\n  changeWhichIdUseAction = (e) => {\r\n    const id = e.target.value;\r\n    const selectedEl = this._getSelected();\r\n\r\n    this.setIdentifierType(id);\r\n\r\n    this.tabControl.redrawTabContent(selectedEl?.layerType);\r\n  };\r\n\r\n  searchAction = async (e) => {\r\n    const value = e.target.value;\r\n    const featureGroup = this.getTool()?.getState()?.featureGroup;\r\n\r\n    const opts = await geoSearch(featureGroup, value);\r\n\r\n    this.setSearchOpts(opts);\r\n    this.tabControl.inputSearch.changeOptions(opts ? opts.map((opt) => opt.label || '') : []);\r\n    // this.inputSearch.redrawMenu();\r\n  };\r\n\r\n  onInputOptClick = (value) => {\r\n    const featureGroup = this.getTool()?.getState().featureGroup;\r\n    const { searchOpts: opts, connectActivated } = this;\r\n\r\n    const found = opts.find((opt) => opt.label === value);\r\n\r\n    let latlng = L.latLng(0, 0);\r\n    latlng.lat = found?.y || 0;\r\n    latlng.lng = found?.x || 0;\r\n    const iconUrl = found?.raw?.icon || ICON_SRCS[0];\r\n    const marker = putMarkerOnMap(featureGroup, latlng, found?.label, iconUrl, connectActivated);\r\n    this.getTool().applyEventListeners(marker);\r\n    this.getTool().applyTopologyMarkerListeners(marker);\r\n    this.setSelectedIcon(iconUrl);\r\n    this.appendToIconSrcs(iconUrl);\r\n    if (connectActivated) {\r\n      this.getTool().plotTopology();\r\n    }\r\n    this.tabControl.redrawTabContent('search');\r\n  };\r\n\r\n  addIconAction = (e) => {\r\n    const iconUrl = e.target.value;\r\n    this.appendToIconSrcs(iconUrl);\r\n    this.tabControl.redrawTabContent('marker');\r\n  };\r\n\r\n  fetchAreas = async () => {\r\n    const { countryCode, adminLevel, highQuality } = this;\r\n\r\n    if (!countryCode || !adminLevel) return;\r\n\r\n    const toolState = this.getTool().getState();\r\n\r\n    const endPoint = 'https://overpass-api.de/api/interpreter?data=[out:json];';\r\n    const query = `area[\"ISO3166-1\"=\"${countryCode}\"]->.searchArea;(relation[\"admin_level\"=\"${adminLevel}\"](area.searchArea););out;>;out skel qt;`;\r\n\r\n    document.querySelector('.leaflet-container').style.cursor = 'wait';\r\n    this.tabControl.searchForAreasBtn.setAttribute('disabled', true);\r\n\r\n    fetch(endPoint + query)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const gJSON = osmtogeojson(data);\r\n\r\n        const opts = {\r\n          color: this.selectedColor,\r\n          draggable: true,\r\n          transform: true,\r\n        };\r\n\r\n        toolState.featureGroup.eachLayer((layer) => {\r\n          if (layer.countryCode === countryCode) toolState.removeLayer(layer);\r\n        });\r\n\r\n        gJSON?.features\r\n          ?.filter((feat) => feat?.geometry?.type === 'Polygon')\r\n          ?.forEach((feat) => {\r\n            let coords = feat.geometry.coordinates;\r\n            if (!highQuality) {\r\n              let simplified = simplifyFeature(feat, 0.01);\r\n              coords = simplified.geometry.coordinates;\r\n            }\r\n            let latlngs = L.GeoJSON.coordsToLatLngs(coords, 1);\r\n            let result = new L.polygon(latlngs, { ...opts, ...normalStyles });\r\n            result?.dragging?.disable();\r\n            result.layerType = 'polygon';\r\n            result.countryCode = countryCode;\r\n            toolState.addLayer(result);\r\n          });\r\n        this.tabControl.errorMsg.innerText = '';\r\n      })\r\n      .catch((err) => {\r\n        this.tabControl.errorMsg.innerText = 'There was a problem, re-try later.';\r\n        console.error(err);\r\n      })\r\n      .finally(() => {\r\n        document.querySelector('.leaflet-container').style.cursor = '';\r\n        this.tabControl.searchForAreasBtn.removeAttribute('disabled');\r\n      });\r\n  };\r\n\r\n  searchForAreaAction = (e) => {\r\n    const val = e.target.value;\r\n    this.setCountryCode(val);\r\n  };\r\n\r\n  pickAdminLevelAction = (e) => {\r\n    const val = e.target.value;\r\n    this.setAdminLevel(val);\r\n  };\r\n\r\n  changeIconAnchor = (val, coordinate) => {\r\n    const selectedEl = this.enabledEl || this._getSelected();\r\n    let iconOptions = selectedEl?.options?.icon?.options || {};\r\n    const iconAnchor = iconOptions.iconAnchor || iconStarter.iconAnchor;\r\n    iconAnchor[coordinate] = val;\r\n    this.changeIconOpts({ iconAnchor });\r\n  };\r\n\r\n  _getSelected() {\r\n    return this.getTool().getState().selectedLayer;\r\n  }\r\n}\r\nexport default DrawingLayerToolTabControlState;\r\n","import L from 'leaflet';\r\nimport 'leaflet-draw';\r\n\r\nL.Draw.Slice = L.Draw.Polyline.extend({\r\n  statics: {\r\n    TYPE: 'knife',\r\n  },\r\n  // @method initialize(): void\r\n  initialize: function (map, options) {\r\n    // if touch, switch to touch icon\r\n    if (L.Browser.touch) {\r\n      this.options.icon = this.options.touchIcon;\r\n    }\r\n\r\n    // Need to set this here to ensure the correct message is used.\r\n    this.options.drawError.message = L.drawLocal.draw.handlers.polyline.error;\r\n\r\n    // Merge default drawError options with custom options\r\n    if (options && options.drawError) {\r\n      options.drawError = L.Util.extend({}, this.options.drawError, options.drawError);\r\n    }\r\n\r\n    // Save the type so super can fire, need to do this as cannot do this.TYPE :(\r\n    this.type = L.Draw.Slice.TYPE;\r\n\r\n    L.Draw.Feature.prototype.initialize.call(this, map, options);\r\n  },\r\n  _calculateFinishDistance: function (potentialLatLng) {\r\n    var lastPtDistance;\r\n    if (this._markers.length > 0) {\r\n      var finishMarker;\r\n      if (this.type === L.Draw.Polyline.TYPE || this.type === L.Draw.Slice.TYPE) {\r\n        finishMarker = this._markers[this._markers.length - 1];\r\n      } else if (this.type === L.Draw.Polygon.TYPE) {\r\n        finishMarker = this._markers[0];\r\n      } else {\r\n        return Infinity;\r\n      }\r\n      var lastMarkerPoint = this._map.latLngToContainerPoint(finishMarker.getLatLng()),\r\n        potentialMarker = new L.Marker(potentialLatLng, {\r\n          icon: this.options.icon,\r\n          zIndexOffset: this.options.zIndexOffset * 2,\r\n        });\r\n      var potentialMarkerPint = this._map.latLngToContainerPoint(potentialMarker.getLatLng());\r\n      lastPtDistance = lastMarkerPoint.distanceTo(potentialMarkerPint);\r\n    } else {\r\n      lastPtDistance = Infinity;\r\n    }\r\n    return lastPtDistance;\r\n  },\r\n});\r\n","import L from 'leaflet';\r\nimport 'leaflet-draw';\r\n\r\nL.Edit.ExtendedPoly = L.Edit.Poly.extend({\r\n  _initHandlers: function () {\r\n    this._verticesHandlers = [];\r\n    for (var i = 0; i < this.latlngs.length; i++) {\r\n      this._verticesHandlers.push(\r\n        new L.Edit.ReducedPolyVerticesEdit(this._poly, this.latlngs[i], this._poly.options.poly),\r\n      );\r\n    }\r\n  },\r\n});\r\n\r\nL.Edit.ReducedPolyVerticesEdit = L.Edit.PolyVerticesEdit.extend({\r\n  _initMarkers: function () {\r\n    if (!this._markerGroup) {\r\n      this._markerGroup = new L.LayerGroup();\r\n    }\r\n    this._markers = [];\r\n\r\n    var latlngs = this._defaultShape(),\r\n      i,\r\n      j,\r\n      len,\r\n      marker;\r\n\r\n    // const DECIMAL_PLACE = 4;\r\n    // const TRESHOLD = 0.5;\r\n    // const res = new Set();\r\n    // for (let index = 0; index < latlngs.length; index++) {\r\n    //   let currIdx = index;\r\n    //   let prevIdx = index - 1;\r\n    //   if (prevIdx !== -1) {\r\n    //     let currEl = latlngs[currIdx];\r\n    //     let prevEl = latlngs[prevIdx];\r\n    //     let prevLat = Number(prevEl.lat.toFixed(DECIMAL_PLACE));\r\n    //     let currLat = Number(currEl.lat.toFixed(DECIMAL_PLACE));\r\n    //     let prevLng = Number(prevEl.lng.toFixed(DECIMAL_PLACE));\r\n    //     let currLng = Number(currEl.lng.toFixed(DECIMAL_PLACE));\r\n    //     let timesLat = (prevLat > 0 && currLat > 0) || (prevLat < 0 && currLat < 0) ? -1 : 1;\r\n    //     let timesLng = (prevLng > 0 && currLng > 0) || (prevLng < 0 && currLng < 0) ? -1 : 1;\r\n    //     let diffLats = currLat + prevLat * timesLat;\r\n    //     let diffLngs = currLng + prevLng * timesLng;\r\n    //     if (diffLats < 0) diffLats = diffLats * -1;\r\n    //     if (diffLngs < 0) diffLngs = diffLngs * -1;\r\n    //     if (diffLats > TRESHOLD && diffLngs > TRESHOLD) {\r\n    //       let temp = L.latLng(currEl.lat, currEl.lng);\r\n    //       res.add(temp);\r\n    //     }\r\n    //   }\r\n    // }\r\n    // latlngs = Array.from(res);\r\n\r\n    console.log({ latlngs, shape: this._defaultShape() });\r\n\r\n    for (i = 0, len = latlngs.length; i < len; i++) {\r\n      marker = this._createMarker(latlngs[i], i);\r\n      marker.on('click', this._onMarkerClick, this);\r\n      marker.on('contextmenu', this._onContextMenu, this);\r\n      this._markers.push(marker);\r\n    }\r\n\r\n    var markerLeft, markerRight;\r\n\r\n    for (i = 0, j = len - 1; i < len; j = i++) {\r\n      if (i === 0 && !(L.Polygon && this._poly instanceof L.Polygon)) {\r\n        continue;\r\n      }\r\n\r\n      markerLeft = this._markers[j];\r\n      markerRight = this._markers[i];\r\n\r\n      this._createMiddleMarker(markerLeft, markerRight);\r\n      this._updatePrevNext(markerLeft, markerRight);\r\n    }\r\n  },\r\n});\r\n","import L from 'leaflet';\nimport 'leaflet-path-drag';\nimport 'leaflet-path-transform';\nimport 'leaflet-draw';\n\nimport 'leaflet/dist/leaflet.css';\n\nimport { STROKES, COLORS } from '../sidebar/DrawingLayerToolTabControlState';\n\nimport '../components/Knife';\nimport '../components/Edit';\n\nimport * as turf from '@turf/turf';\n\nexport const highlightStyles = { fillOpacity: 0.5, opacity: 0.2 };\nexport const normalStyles = { fillOpacity: 0.2, opacity: 0.5 };\n\nexport const polygonCreate = (map, sidebar) => {\n  const x = new L.Draw.Polygon(map, {\n    allowIntersection: false,\n    drawError: {\n      color: '#e1e100',\n      message: '<strong>You cannot draw that!<strong>',\n    },\n    shapeOptions: {\n      color: sidebar.getState().getSelectedColor(),\n      weight: sidebar.getState().getSelectedStroke(),\n      draggable: true,\n      transform: true,\n    },\n    guideLayers: sidebar.getState().guideLayers,\n    snapDistance: 5,\n    repeatMode: true,\n  });\n  if (x) sidebar.getState().setEnabledEl(x);\n  x.enable();\n  return x;\n};\n\nexport const polylineCreate = (map, sidebar) => {\n  const x = new L.Draw.Polyline(map, {\n    shapeOptions: {\n      color: sidebar.getState().getSelectedColor(),\n      weight: sidebar.getState().getSelectedStroke(),\n      draggable: true,\n      transform: true,\n    },\n    guideLayers: sidebar.getState().guideLayers,\n    repeatMode: true,\n  });\n  if (x) sidebar.getState().setEnabledEl(x);\n  x.enable();\n  return x;\n};\n\nexport const slicePoly = (map, sidebar) => {\n  const pather = sidebar.getState().pather;\n  const patherStatus = sidebar.getState().patherActive;\n  if (!patherStatus) {\n    map.addLayer(pather);\n    sidebar.getState().setEnabledEl({\n      disable: () => {\n        map.removeLayer(pather);\n        sidebar.getState().setPatherStatus(false);\n      },\n    });\n  } else {\n    map.removeLayer(pather);\n    sidebar.getState().setEnabledEl(null);\n  }\n\n  sidebar.getState().setPatherStatus(!patherStatus);\n};\n\nexport const getGeoJSONFeatureFromLayer = (layer) => {\n  let geoFeature = layer.toGeoJSON();\n  let feature = geoFeature.type === 'FeatureCollection' ? geoFeature.features[0] : geoFeature;\n  return feature;\n};\n\nexport const featureToLeafletCoordinates = (featureCoordinates, type = 'Polygon') => {\n  let point;\n  if (type === 'Point') {\n    point = L.latLng(featureCoordinates.reverse());\n    if (point) {\n      featureCoordinates = [point.lng, point.lat];\n    }\n    return featureCoordinates;\n  } else if (type === 'LineString') {\n    for (let i = 0; i < featureCoordinates.length; i++) {\n      point = L.latLng(featureCoordinates[i]);\n      if (point) {\n        featureCoordinates[i] = [point.lng, point.lat];\n      }\n    }\n    return featureCoordinates;\n  } else if (type === 'Polygon') {\n    for (let i = 0; i < featureCoordinates.length; i++) {\n      for (let j = 0; j < featureCoordinates[i].length; j++) {\n        point = L.latLng(featureCoordinates[i][j]);\n        if (point) {\n          featureCoordinates[i][j] = [point.lng, point.lat];\n        }\n      }\n    }\n  }\n\n  return featureCoordinates;\n};\n\nexport const getLeafletTypeFromFeature = (feature) => {\n  switch (feature?.geometry?.type) {\n    case 'Polygon':\n      return 'polygon';\n    case 'LineString':\n      return 'polyline';\n    case 'Point':\n      return 'marker';\n    default:\n      return '';\n  }\n};\n\nexport const convertPropertiesToOptions = (properties) => {\n  let options = { draggable: true, transform: true };\n  if (!properties) return options;\n  options.weight = properties['stroke-width'] || STROKES[1].value;\n  options.color = properties['fill'] || COLORS[0];\n  options.fillOpacity = properties['fill-opacity'] || normalStyles.fillOpacity;\n  options.opacity = properties['stroke-opacity'] || normalStyles.opacity;\n\n  return options;\n};\n\nexport const convertOptionsToProperties = (options) => {\n  let properties = { draggable: true, transform: true };\n  properties['stroke-width'] = options.weight || STROKES[1].value;\n  properties['fill'] = options.color || COLORS[0];\n  // * so we don't save selected polygon\n  properties['fill-opacity'] = normalStyles.fillOpacity;\n  properties['stroke-opacity'] = normalStyles.opacity;\n\n  return properties;\n};\n\nexport const getFeatFromLayer = (layer) => {\n  if (!layer) return null;\n  let drawnGeoJSON = layer.toGeoJSON();\n  let feature;\n  feature = drawnGeoJSON.type === 'FeatureCollection' ? drawnGeoJSON.features : [drawnGeoJSON];\n  return feature;\n};\n\nexport const isFeaturePoly = (feature) => {\n  if (!feature) return false;\n  if (feature?.type === 'FeatureCollection') {\n    let f = feature.features[0];\n    return f?.geometry?.type === 'Polygon' || f?.geometry?.type === 'MultiPolygon';\n  }\n  return feature?.geometry?.type === 'Polygon' || feature?.geometry?.type === 'MultiPolygon';\n};\n\nexport const getSimplifiedPoly = (param_latlngs) => {\n  let latlngs = param_latlngs || [];\n  let points;\n  let simplified;\n  let tolerance = 0.505;\n\n  if (latlngs.length) {\n    // latlng to x/y\n    points = latlngs.map((a) => ({\n      x: a.lat,\n      y: a.lng,\n    }));\n\n    // simplified points (needs x/y keys)\n    simplified = L.LineUtil.simplify(points, tolerance);\n\n    // console.log({ latlngs, simplified, points });\n    try {\n      // x/y back to latlng\n      latlngs = simplified.map((a) => new L.LatLng(a.x, a.y));\n    } catch (error) {\n      console.error({ error, param_latlngs: [...param_latlngs], simplified, points });\n    }\n  }\n\n  return [latlngs];\n};\n\nexport const simplifyFeature = (feature, pixels) => {\n  const tolerance = pixels || window.customTolerance;\n\n  const result = turf.simplify(feature, { tolerance });\n  return result;\n};\n\nexport const isLayerPoly = (layer) => {\n  let feature = getGeoJSONFeatureFromLayer(layer);\n  return isFeaturePoly(feature);\n};\n\nexport const morphFeatureToPolygon = (feature, options = {}, simplify = true) => {\n  let depth = 1;\n  if (feature.geometry.type === 'MultiPolygon') {\n    depth = 2;\n  }\n  let simplified = simplify ? simplifyFeature(feature) : feature;\n  let coords = simplified.geometry.coordinates;\n  let latlngs = L.GeoJSON.coordsToLatLngs(coords, depth);\n  let result = new L.polygon(latlngs, {\n    ...options,\n    draggable: true,\n    transform: true,\n  });\n  result.layerType = 'polygon';\n  if (result.dragging) result.dragging.disable();\n  return result;\n};\n","import { AbstractLayerToolState } from '../abstract';\nimport L from 'leaflet';\nimport {\n  convertOptionsToProperties,\n  convertPropertiesToOptions,\n  featureToLeafletCoordinates,\n  getLeafletTypeFromFeature,\n  highlightStyles,\n  isLayerPoly,\n  normalStyles,\n} from './util/Poly';\nimport { isEmpty, sortReverseAlpha } from './util/functionUtils';\nimport { iconStarter } from './util/Marker';\nimport { FIRST, NOT_FOUND } from './util/constants';\n\nconst MAX_CHOSEN = 2;\n\n/**\n * This class provide functions for using the state of the layer tool.\n *\n * @author Andrej Tlcina\n */\nclass DrawingLayerToolState extends AbstractLayerToolState {\n  /**\n   * It creates a tool state.\n   */\n  constructor(tool) {\n    super();\n    // * element/layer that was created\n    this.currEl = null;\n\n    this.featureGroup = new L.FeatureGroup();\n    this.activeIndex = 0;\n    // * for knowing if we are using select tool\n    this.selecting = false;\n    // * for knowing if we already selected layer\n    this.selectedLayer = null;\n\n    this.tool = tool;\n\n    this.createdVertices = [];\n    this.mappedMarkersToVertices = {};\n\n    this.chosenLayers = [];\n  }\n\n  chosenLayersMaxed = () => {\n    return this.chosenLayers.length === MAX_CHOSEN;\n  };\n\n  pushChosenLayer = (layer) => {\n    if (this.chosenLayers.length >= MAX_CHOSEN) {\n      this.chosenLayers.shift();\n    }\n    this.tool.highlightElement(layer);\n    this.chosenLayers.push(layer);\n  };\n\n  deselectChosenLayers = () => {\n    this.chosenLayers.forEach((chosen) => this.tool.normalizeElement(chosen));\n    this.chosenLayers = [];\n  };\n\n  clearChosenLayers = () => {\n    this.chosenLayers.forEach((chosen) => this.removeLayer(chosen));\n    this.chosenLayers = [];\n  };\n\n  pushJoinedToChosenLayers = (joined) => {\n    this.clearChosenLayers();\n    this.tool.highlightElement(joined);\n    this.chosenLayers.push(joined);\n    this.addLayer(joined);\n  };\n\n  isConnectMarker = (marker) => {\n    return marker?.layerType === 'marker' && marker?.options?.icon?.options?.connectClick;\n  };\n\n  selectedLayerIsConnectMarker = () => {\n    return this.isConnectMarker(this.selectedLayer);\n  };\n\n  canPushToChosen = (layer) => {\n    const acceptableType = this.isConnectMarker(layer) || isLayerPoly(layer);\n    if (isEmpty(this.chosenLayers)) {\n      if (acceptableType) return true;\n    } else {\n      let firstChosen = this.chosenLayers[FIRST];\n      if (this.isConnectMarker(firstChosen) && this.isConnectMarker(layer)) return true;\n      if (isLayerPoly(firstChosen) && isLayerPoly(layer)) return true;\n    }\n\n    return false;\n  };\n\n  chosenLayersArePolys = () => {\n    let firstChosen = this.chosenLayers[FIRST];\n    return isLayerPoly(firstChosen);\n  };\n\n  chosenLayersAreMarkers = () => {\n    let firstChosen = this.chosenLayers[FIRST];\n    return this.isConnectMarker(firstChosen);\n  };\n\n  pushVertice = (vertice) => {\n    this.createdVertices.push(vertice);\n  };\n\n  removeGivenVertice = (lId) => {\n    const idsOfVerticesToRemove = new Set([lId]);\n\n    const result = this.removeMappedVertices(idsOfVerticesToRemove);\n\n    const index = this.createdVertices.map((v) => v._leaflet_id).indexOf(lId);\n    if (index !== NOT_FOUND) {\n      this.createdVertices.splice(index, 1);\n    }\n\n    this.mappedMarkersToVertices = result;\n  };\n\n  /**\n   *\n   * @param {Set} idsOfVerticesToRemove\n   * @returns {Object} mappedMarkersToVertices\n   */\n  removeMappedVertices = (idsOfVerticesToRemove) => {\n    // * copy object\n    const newMapped = { ...this.mappedMarkersToVertices };\n    console.log({ newMapped });\n\n    // *  go through each marker object containing { [index]: vertice } pairs\n    Object.values(newMapped).forEach((vertObj) => {\n      // * now go through each index\n      Object.keys(vertObj).forEach((key) => {\n        let vert = vertObj[key];\n        if (idsOfVerticesToRemove.has(vert._leaflet_id)) {\n          this.removeLayer(vert);\n          delete vertObj[key];\n        }\n      });\n    });\n\n    return newMapped;\n  };\n\n  removeMarkersMappedVertices = (lId) => {\n    const markerVertices = this.mappedMarkersToVertices[lId];\n    console.log({ markerVertices });\n    const idsOfVerticesToRemove = new Set();\n    // * save vertices' ids\n    Object.values(markerVertices)?.forEach((v) => idsOfVerticesToRemove.add(v._leaflet_id));\n    console.log({ idsOfVerticesToRemove });\n    // * remove vertices\n    const newMapped = this.removeMappedVertices(idsOfVerticesToRemove);\n\n    // * marker no longer has vertices, so remove it\n    delete newMapped[lId];\n\n    this.mappedMarkersToVertices = newMapped;\n  };\n\n  setActiveIndex(idx) {\n    this.activeIndex = idx;\n  }\n\n  increaseActiveIndex() {\n    this.activeIndex += 1;\n  }\n\n  getActiveIndex() {\n    return this.activeIndex;\n  }\n\n  getPrevLayer() {\n    let layersObj = this.featureGroup._layers;\n    let layersArr = [...Object.values(layersObj)];\n    return layersArr.pop();\n  }\n\n  setCurrEl(val) {\n    this.currEl = val;\n  }\n\n  setSelecting(is) {\n    this.selecting = is;\n  }\n\n  getSelecting() {\n    return this.selecting;\n  }\n\n  addLayer(layer) {\n    this.featureGroup.addLayer(layer);\n    this.tool.applyEventListeners(layer);\n    return layer;\n  }\n\n  removeLayer(layer) {\n    this.featureGroup.removeLayer(layer);\n  }\n\n  removeSelectedLayer(layer) {\n    this.featureGroup.removeLayer(layer || this.selectedLayer);\n    this.selectedLayer = null;\n  }\n\n  getLayerByIdx(idx) {\n    const found = Object.values(this.featureGroup._layers).find((l) => l.kIdx === idx);\n    return found;\n  }\n\n  removeLayerByIdx(idx) {\n    if (idx === undefined) return;\n    const found = Object.values(this.featureGroup._layers).find((l) => l.kIdx === idx);\n    if (found) this.removeLayer(found);\n  }\n\n  setSelectedLayer(layer) {\n    this.selectedLayer = layer;\n    this.tool.highlightElement(layer);\n  }\n\n  clearSelectedLayer() {\n    this.selectedLayer = null;\n  }\n\n  setVerticesToMarker(lId, val) {\n    this.mappedMarkersToVertices[lId] = val;\n  }\n\n  addMappedVertices = (layer, result) => {\n    let lId = layer._leaflet_id;\n    let mappedVertices = this.mappedMarkersToVertices[lId];\n    let mappedProperty = {};\n    Object.keys(mappedVertices).forEach((key) => {\n      mappedProperty[key] = mappedVertices[key]._leaflet_id;\n    });\n    if (!isEmpty(mappedProperty)) result.mappedVertices = mappedProperty;\n  };\n\n  initMappedMarkersToVertices = (lType, result, source) => {\n    if (lType === 'marker' && source.mappedVertices) {\n      this.mappedMarkersToVertices[result._leaflet_id] = source.mappedVertices;\n    }\n    if (lType === 'polyline' || lType === 'vertice') {\n      // * keys are marker leaflet ids\n      Object.keys(this.mappedMarkersToVertices).forEach((markerId) => {\n        // * values are index of vertice\n        let verticesKeyArr = Object.keys(this.mappedMarkersToVertices[markerId]);\n        // * leaflet id of vertice\n        let vertLeafId = source.mappedVerticeId;\n        let verticesObj = this.mappedMarkersToVertices[markerId];\n        verticesKeyArr.forEach((vertKey) => {\n          if (verticesObj[vertKey] === vertLeafId) {\n            let spreadable = this.mappedMarkersToVertices[markerId] || {};\n            this.mappedMarkersToVertices[markerId] = {\n              ...spreadable,\n              [vertKey]: result,\n            };\n          }\n        });\n      });\n    }\n  };\n\n  serializeToGeoJSON() {\n    const geo = {\n      type: 'FeatureCollection',\n      features: [],\n    };\n\n    this.featureGroup.eachLayer((l) => {\n      let feature = l.toGeoJSON();\n\n      let properties = convertOptionsToProperties(l.options);\n      feature.properties = properties;\n\n      if (l.popupContent) feature.properties.popupContent = l.popupContent;\n      if (l.identifier) feature.id = l.identifier;\n\n      let iconOptions = l?.options?.icon?.options;\n      if (iconOptions) feature.properties.iconOptions = iconOptions;\n\n      if (this.isConnectMarker(l)) {\n        this.addMappedVertices(l, feature.properties);\n      }\n      if (l.layerType === 'vertice') feature.properties.mappedVerticeId = l._leaflet_id;\n\n      geo.features.push(feature);\n    });\n\n    return geo;\n  }\n\n  deserializeGeoJSON(geojson) {\n    const sidebarState = this.tool.getSidebarTabControl().getState();\n    // console.log({ geojson });\n    if (geojson.type === 'FeatureCollection' && geojson.features) {\n      geojson.features\n        .sort((a, b) => sortReverseAlpha(a.geometry.type, b.geometry.type))\n        .forEach((f) => {\n          let opts = convertPropertiesToOptions(f.properties);\n          let lType = getLeafletTypeFromFeature(f);\n          featureToLeafletCoordinates(f.geometry.coordinates, f.geometry.type);\n          let result;\n          if (lType === 'polygon') {\n            result = new L.polygon(f.geometry.coordinates, opts);\n          } else if (lType === 'polyline') {\n            result = new L.polyline(f.geometry.coordinates, opts);\n          } else if (lType === 'marker') {\n            let spreadable = f?.properties?.iconOptions || {};\n            if (spreadable.iconUrl) sidebarState.appendToIconSrcs(spreadable.iconUrl);\n            let options = {\n              ...iconStarter,\n              iconUrl: sidebarState.getSelectedIcon(),\n              ...spreadable,\n            };\n\n            let icon = new L.Icon(options);\n            result = new L.Marker.Touch(f.geometry.coordinates, { icon });\n          }\n          if (result) {\n            result.layerType = lType;\n            if (f?.properties?.popupContent) {\n              result.popupContent = f.properties.popupContent;\n              result.bindPopup(f.properties.popupContent, {\n                closeOnClick: false,\n                autoClose: false,\n              });\n            }\n            if (f.id) {\n              result.identifier = f.id;\n            }\n            if (result.dragging) result.dragging.disable();\n            this.addLayer(result);\n          }\n          this.initMappedMarkersToVertices(lType, result, f.properties);\n        });\n    }\n\n    return;\n  }\n\n  serialize(defaults) {\n    let config = super.serialize(defaults);\n\n    const exportSettings = [];\n\n    const pushPolygon = (layer, layerType, extra = {}) => {\n      const { options, _latlngs: latlngs, popupContent = '' } = layer;\n      exportSettings.push({\n        layerType,\n        options: { ...options, ...normalStyles, draggable: true, transform: true },\n        latlngs,\n        popupContent,\n        ...extra,\n      });\n    };\n\n    const pushMarker = (layer, layerType) => {\n      const { popupContent = '' } = layer;\n      let extra = {};\n      if (this.isConnectMarker(layer)) {\n        this.addMappedVertices(layer, extra);\n      }\n      exportSettings.push({\n        layerType,\n        options: { ...layer?.options?.icon?.options, draggable: true, transform: true },\n        latlngs: layer._latlng,\n        popupContent,\n        ...extra,\n      });\n    };\n\n    this.featureGroup.eachLayer((layer) => {\n      const { layerType } = layer;\n      if (layerType === 'marker') {\n        pushMarker(layer, layerType);\n      } else {\n        if (layer._layers) {\n          layer.eachLayer((l) => {\n            pushPolygon(l, layerType);\n          });\n        } else {\n          let extra = layerType === 'vertice' ? { mappedVerticeId: layer._leaflet_id } : {};\n          pushPolygon(layer, layerType, extra);\n        }\n      }\n    });\n\n    config.data = exportSettings;\n    return config;\n  }\n\n  deserialize(config) {\n    super.deserialize(config);\n\n    const sidebarState = this.tool.getSidebarTabControl().getState();\n\n    const { data = [] } = config;\n\n    data.forEach((layer) => {\n      let layerToAdd;\n      // decide what type they are according to it render what is needed\n      if (layer.layerType === 'marker') {\n        let { latlngs } = layer;\n        let latlng = L.latLng(latlngs.lat, latlngs.lng);\n        if (layer?.options?.iconUrl) sidebarState.appendToIconSrcs(layer.options.iconUrl);\n        let options = {\n          ...layer.options,\n          iconAnchor: new L.Point(layer.options.iconAnchor.x, layer.options.iconAnchor.y),\n          iconSize: new L.Point(layer.options.iconSize.x, layer.options.iconSize.y),\n        };\n        let MyCustomMarker = L.Icon.extend({\n          options,\n        });\n\n        let icon = new MyCustomMarker();\n        icon.options = options;\n        let marker = new L.Marker.Touch(latlng, { icon });\n\n        layerToAdd = marker;\n      } else {\n        let _latlng;\n        let poly;\n        if (layer.layerType === 'polyline' || layer.layerType === 'vertice') {\n          _latlng = layer.latlngs.map((l) => L.latLng(l.lat, l.lng));\n          poly = new L.polyline(_latlng, layer.options);\n        }\n        if (layer.layerType === 'polygon' || layer.layerType === 'painted') {\n          _latlng = layer.latlngs[0].map((l) => L.latLng(l.lat, l.lng));\n          poly = new L.polygon(_latlng, layer.options);\n        }\n\n        layerToAdd = poly;\n      }\n\n      if (layer.popupContent) {\n        layerToAdd.bindPopup(layer.popupContent, { closeOnClick: false, autoClose: false });\n        layerToAdd.popupContent = layer.popupContent;\n      }\n      layerToAdd.layerType = layer.layerType;\n      if (layerToAdd.dragging) layerToAdd.dragging.disable();\n      this.addLayer(layerToAdd);\n      this.initMappedMarkersToVertices(layer.layerType, layerToAdd, layer);\n    });\n  }\n}\nexport default DrawingLayerToolState;\n","export const NOT_FOUND = -1;\r\n\r\nexport const FIRST = 0;\r\n\r\nexport const SPACE_BAR = 32;\r\n","import { AbstractLayerToolDefaults } from '../abstract';\r\nimport DrawingLayerTool from './DrawingLayerTool';\r\nimport LabeledTextSidebarInput from '../../../inputs/input/LabeledTextSidebarInput';\r\nimport LabeledTextAreaSidebarInput from '../../../inputs/input/LabeledTextAreaSidebarInput';\r\nimport LabeledSelectSidebarInput from '../../../inputs/select/LabeledSelectSidebarInput';\r\nimport AutocompleteSidebarInput from '../../../inputs/input/AutocompleteSidebarInput';\r\n\r\n/**\r\n * TODO: refactorization needed!\r\n */\r\nconst TYPE = 'drawing';\r\n\r\nconst INPUT_ID_PREFIX = 'geovisto-input-' + TYPE;\r\n\r\n/**\r\n * Data mapping model which can be used in the sidebar form.\r\n */\r\nconst MAPPING_MODEL = {\r\n  idKey: {\r\n    id: INPUT_ID_PREFIX + '-idKey',\r\n    name: 'idKey',\r\n    label: 'ID key',\r\n    input: LabeledSelectSidebarInput.ID(),\r\n  },\r\n  identifier: {\r\n    id: INPUT_ID_PREFIX + '-identifier',\r\n    name: 'identifier',\r\n    label: 'Identifier',\r\n    input: AutocompleteSidebarInput.ID(),\r\n  },\r\n  description: {\r\n    id: INPUT_ID_PREFIX + '-description',\r\n    name: 'description',\r\n    label: 'Description',\r\n    input: LabeledTextAreaSidebarInput.ID(),\r\n  },\r\n  strokeThickness: {\r\n    id: INPUT_ID_PREFIX + '-stroke-thickness',\r\n    name: 'stroke-thickness',\r\n    label: 'Stroke thickness',\r\n    input: LabeledSelectSidebarInput.ID(),\r\n  },\r\n  search: {\r\n    id: INPUT_ID_PREFIX + '-search',\r\n    name: 'search',\r\n    label: 'Search',\r\n    input: AutocompleteSidebarInput.ID(),\r\n  },\r\n  searchForArea: {\r\n    id: INPUT_ID_PREFIX + '-search-for-area',\r\n    name: 'search-for-area',\r\n    label: 'Search',\r\n    input: LabeledSelectSidebarInput.ID(),\r\n  },\r\n  adminLevel: {\r\n    id: INPUT_ID_PREFIX + '-admin-level',\r\n    name: 'admin-level',\r\n    label: 'Pick level of administration',\r\n    input: LabeledSelectSidebarInput.ID(),\r\n  },\r\n  iconUrl: {\r\n    id: INPUT_ID_PREFIX + '-iconUrl',\r\n    name: 'iconUrl',\r\n    label: 'Icon URL',\r\n    input: LabeledTextSidebarInput.ID(),\r\n  },\r\n};\r\n\r\n/**\r\n * This class provide functions which return the default state values.\r\n *\r\n * @author Andrej Tlcina\r\n */\r\nclass DrawingLayerToolDefaults extends AbstractLayerToolDefaults {\r\n  /**\r\n   * It initializes tool defaults.\r\n   */\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * It returns a unique type string of the tool which is based on the layer it wraps.\r\n   */\r\n  getType() {\r\n    return DrawingLayerTool.TYPE();\r\n  }\r\n\r\n  /**\r\n   * It returns the layer name.\r\n   */\r\n  getName() {\r\n    return 'Drawing layer';\r\n  }\r\n\r\n  /**\r\n   * It returns the default mapping of data domains to chart dimensions.\r\n   */\r\n  getDataMapping() {\r\n    let dataMapping = {};\r\n\r\n    let dataMappingModel = this.getDataMappingModel();\r\n    let implicitDataDomainLabel = this.getMapObject()\r\n      .getMap()\r\n      .getState()\r\n      .getMapData()\r\n      .getDataDomainLabels()[0];\r\n    console.log({ implicitDataDomainLabel });\r\n\r\n    dataMapping[dataMappingModel.identifier.name] = implicitDataDomainLabel;\r\n    dataMapping[dataMappingModel.description.name] = implicitDataDomainLabel;\r\n\r\n    return dataMapping;\r\n  }\r\n\r\n  /**\r\n   * It returns the data mapping model.\r\n   */\r\n  getDataMappingModel() {\r\n    return MAPPING_MODEL;\r\n  }\r\n}\r\nexport default DrawingLayerToolDefaults;\r\n","import AbstractLayerToolTabControlDefaults from \"../../abstract/sidebar/AbstractLayerToolTabControlDefaults\";\r\n\r\n/**\r\n * This class provide functions which return the default state values.\r\n *\r\n * @author Andrej Tlcina\r\n */\r\nclass DrawingLayerToolTabControlDefaults extends AbstractLayerToolTabControlDefaults {\r\n  /**\r\n   * It creates tab control defaults.\r\n   */\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * It returns the icon of the tab pane.\r\n   */\r\n  getIcon() {\r\n    return '<i class=\"fa fa-pencil\"></i>';\r\n  }\r\n}\r\nexport default DrawingLayerToolTabControlDefaults;\r\n","import DrawingLayerToolTabControlDefaults from './DrawingLayerToolTabControlDefaults';\nimport DrawingLayerToolTabControlState, { ADMIN_LEVELS } from './DrawingLayerToolTabControlState';\nimport AbstractLayerToolTabControl from '../../abstract/sidebar/AbstractLayerToolTabControl';\nimport SidebarInputFactory from '../../../../inputs/SidebarInputFactory';\n\nimport '../style/drawingLayerTabControl.scss';\nimport { geoSearch, iconStarter, putMarkerOnMap } from '../util/Marker';\nimport { highlightStyles, normalStyles, simplifyFeature } from '../util/Poly';\nimport { debounce, getIntervalStep, isFloat } from '../util/functionUtils';\nimport { createIntervalInput, createCheck } from '../components/inputs';\n\nimport * as osmtogeojson from 'osmtogeojson';\nimport * as turf from '@turf/turf';\nimport { FIRST } from '../util/constants';\n\nconst POLYS = ['polyline', 'polygon', 'painted', 'vertice'];\n\nconst C_sidebar_tab_content_class = 'leaflet-sidebar-tab-content';\n\n/**\n * This class provides controls for management of the layer sidebar tab.\n *\n * @author Andrej Tlcina\n */\nclass DrawingLayerToolTabControl extends AbstractLayerToolTabControl {\n  constructor(tool) {\n    super(tool);\n  }\n\n  /**\n   * It creates new defaults of the tab control.\n   */\n  createDefaults() {\n    return new DrawingLayerToolTabControlDefaults();\n  }\n\n  /**\n   * It creates new state of the tab control.\n   */\n  createState() {\n    return new DrawingLayerToolTabControlState(this);\n  }\n\n  createPalette(label, opts, activeIdx, changeAction, img = false) {\n    const inputPalette = document.createElement('div');\n    if (label) inputPalette.appendChild(document.createTextNode(label + ': '));\n    const wrapper = document.createElement('div');\n    wrapper.style.display = 'grid';\n    wrapper.style.gridTemplateColumns = 'repeat(4, 1fr)';\n    inputPalette.appendChild(wrapper);\n    opts.forEach((opt, idx) => {\n      let elem = document.createElement('div');\n      elem.style.boxSizing = 'border-box';\n      elem.style.background = img ? `url(${opt})` : opt;\n      elem.style.backgroundRepeat = 'no-repeat';\n      elem.style.backgroundPosition = 'center';\n      elem.style.backgroundSize = 'contain';\n      elem.style.height = '20px';\n      elem.style.display = 'inline-block';\n      elem.style.cursor = 'pointer';\n      if (idx === activeIdx) {\n        elem.style.border = '1px solid #333';\n      }\n      elem.addEventListener('click', () => changeAction(opt));\n      wrapper.appendChild(elem);\n    });\n    return inputPalette;\n  }\n\n  createColorPicker() {\n    const inputWrapper = document.createElement('div');\n    inputWrapper.appendChild(document.createTextNode('Pick color: '));\n    const colorPicker = document.createElement('input');\n    colorPicker.setAttribute('type', 'color');\n    colorPicker.onchange = (e) => this.getState().changeColorAction(e.target.value);\n    colorPicker.value = this._getSelected()?.options?.color || this.getState().getSelectedColor();\n    inputWrapper.appendChild(colorPicker);\n    return inputWrapper;\n  }\n\n  createColorPalette() {\n    const colors = this.getState().colors;\n    const activeColor = this.getState().getSelectedColor();\n    const activeIndex = colors.indexOf(activeColor);\n    const res = this.createPalette(\n      'Pick color',\n      colors,\n      activeIndex,\n      this.getState().changeColorAction,\n    );\n    return res;\n  }\n\n  createIconPalette() {\n    const iconsSet = this.getState().iconSrcs;\n    const iconUrl = this._getSelected()?.options?.icon?.options?.iconUrl;\n    if (iconUrl) iconsSet.add(iconUrl);\n    const activeIcon = this.getState().getSelectedIcon();\n    const iconsArr = Array.from(iconsSet);\n    const activeIndex = iconsArr.indexOf(activeIcon);\n    const res = this.createPalette(\n      'Pick icon',\n      iconsArr,\n      activeIndex,\n      this.getState().changeIconAction,\n      true,\n    );\n    return res;\n  }\n\n  /**\n   * It acquire selected data mapping from input values.\n   */\n  getInputValues() {\n    // get data mapping model\n    let model = this.getDefaults().getDataMappingModel();\n\n    // create new selection\n    let dataMapping = {};\n\n    // get selected data domains values\n    dataMapping[model.identifier.name] = this.inputId.getValue();\n\n    return dataMapping;\n  }\n\n  /**\n   * It updates selected input values according to the given data mapping.\n   *\n   * @param {*} dataMapping\n   */\n  setInputValues(dataMapping) {\n    // get data mapping model\n    let model = this.getDefaults().getDataMappingModel();\n\n    // update inputs\n    this.inputId.setValue(dataMapping[model.identifier.name]);\n  }\n\n  redrawTabContent(layerType, enabled = false) {\n    console.log('redrawing sidebar...');\n    // get rendered sidebar tab\n    let tabElement = document.getElementById(this.getState().getId());\n\n    // create sidebar tab content\n    let tabContent = tabElement.getElementsByClassName(C_sidebar_tab_content_class)[0];\n\n    while (tabContent.firstChild) {\n      tabContent.removeChild(tabContent.firstChild);\n    }\n\n    tabContent.appendChild(this.getTabContent(layerType, enabled));\n  }\n\n  _getSelected() {\n    return this.getTool().getState().selectedLayer;\n  }\n\n  createBrushSizeControl = () => {\n    let paintPoly = this.getState().paintPoly;\n\n    if (!paintPoly.isActive()) return null;\n\n    let { maxBrushSize, minBrushSize } = paintPoly.getBrushSizeConstraints();\n\n    const controlWrapper = document.createElement('div');\n    const brushControl = createIntervalInput(\n      'Brush size: ',\n      minBrushSize,\n      maxBrushSize,\n      paintPoly.resizeBrush,\n      paintPoly.getBrushSize(),\n    );\n    controlWrapper.appendChild(brushControl);\n\n    const customToleranceCheck = this.createCustomToleranceCheck();\n    controlWrapper.appendChild(customToleranceCheck);\n\n    this.customToleranceInput = document.createElement('div');\n    controlWrapper.appendChild(this.customToleranceInput);\n    return controlWrapper;\n  };\n\n  createIdentifierInput = (model) => {\n    const data = this.getTool()?.getState()?.map?.state?.data;\n\n    const idKey = this.state.getIdentifierType();\n\n    const idOpts = data && data[0][idKey] ? data.map((d) => d[idKey]) : [];\n\n    const result = SidebarInputFactory.createSidebarInput(model.identifier.input, {\n      label: model.identifier.label,\n      action: this.getState().changeIdentifierAction,\n      value: this._getSelected()?.identifier || '',\n      options: idOpts,\n      placeholder: 'e.g. CZ',\n    });\n\n    return result;\n  };\n\n  createPickIdentifier = (model) => {\n    const data = this.getTool()?.getState()?.map?.state?.data;\n\n    const idOpts = data[0] ? Object.keys(data[0]).map((k) => ({ value: k, label: k })) : [];\n\n    const result = SidebarInputFactory.createSidebarInput(model.idKey.input, {\n      label: model.idKey.label,\n      action: this.getState().changeWhichIdUseAction,\n      value: this.state.getIdentifierType(),\n      options: [{ value: '', label: '' }, ...idOpts],\n    });\n\n    return result;\n  };\n\n  convertDescToPopText = (descText) => {\n    if (!descText) return '';\n    return descText.replaceAll('\\n', '<br />');\n  };\n\n  convertDescfromPopText = (popText) => {\n    if (!popText) return '';\n    return popText.replaceAll('<br />', '\\n');\n  };\n\n  createConnectCheck = () => {\n    const onChange = (val) => this.getState().setConnectActivated(val);\n    const { connectActivated } = this.getState();\n\n    const result = createCheck(\n      connectActivated,\n      onChange,\n      'connect',\n      'By creating new marker while having this choice selected, you will create path between newly created marker and selected marker or last created marker via Topology tool',\n    );\n\n    return result;\n  };\n\n  createIntersectionCheck = () => {\n    const onChange = (val) => this.getState().setIntersectActivated(val);\n    const { intersectActivated } = this.getState();\n\n    const result = createCheck(\n      intersectActivated,\n      onChange,\n      'intersect',\n      'By selecting the option you can create intersects with selected polygon',\n    );\n    return result;\n  };\n\n  createHighQualityCheck = () => {\n    const onChange = (val) => this.getState().setHighQuality(val);\n    const { highQuality } = this.getState();\n\n    const result = createCheck(\n      highQuality,\n      onChange,\n      'high-quality',\n      'By selecting the option displayed polygons will be in higher quality, which however means that some operations will take longer to execute',\n    );\n    return result;\n  };\n\n  createChangeConnectCheck = () => {\n    const toolState = this.getTool().getState();\n    const onChange = (connectClick) => {\n      let selected = this.getState().changeIconOpts({ connectClick });\n\n      if (selected) {\n        this.getTool().highlightElement(selected);\n      }\n    };\n    const isConnect = toolState.selectedLayerIsConnectMarker();\n\n    const result = createCheck(\n      isConnect,\n      onChange,\n      'change-connect',\n      'By selecting the option marker will be able to create topology',\n    );\n    return result;\n  };\n\n  createCustomToleranceCheck = () => {\n    const { paintPoly } = this.getState();\n    const toleranceChange = (val) => {\n      window.customTolerance = val;\n      paintPoly.clearAllAccumulated();\n    };\n\n    window.map.on('zoomend', () => {\n      let firstChild = this.customToleranceInput.firstChild;\n      if (firstChild) {\n        let interval = firstChild.firstChild.lastChild;\n        let display = firstChild.lastChild;\n        let val = window.customTolerance;\n        if (display) display.innerText = val;\n        if (interval) {\n          interval.value = val;\n          let step = getIntervalStep(val);\n          interval.step = step;\n          interval.max = val * 2;\n        }\n      }\n    });\n\n    const onChange = (check) => {\n      if (check) {\n        let val = window.customTolerance;\n        let step = getIntervalStep(val);\n        const customTolerance = createIntervalInput(\n          'Custom tolerance',\n          0.0,\n          val * 2,\n          toleranceChange,\n          val || '',\n          step,\n        );\n        this.customToleranceInput.appendChild(customTolerance);\n      } else {\n        let firstChild = this.customToleranceInput.firstChild;\n        if (firstChild) this.customToleranceInput.removeChild(firstChild);\n        this.getTool().setGlobalSimplificationTolerance();\n      }\n    };\n\n    const result = createCheck(\n      '',\n      onChange,\n      'custom-tolerance',\n      'By selecting the option you can custom level of detail for brush strokes',\n    );\n    return result;\n  };\n\n  createIconAnchorSlider = (coordinate) => {\n    const selectedEl = this._getSelected();\n\n    let iconOptions = selectedEl?.options?.icon?.options || {};\n    const iconAnchor = iconOptions.iconAnchor || iconStarter.iconAnchor;\n    const value = iconAnchor[coordinate] || '';\n\n    const customAnchor = createIntervalInput(\n      `Icon '${coordinate.toUpperCase()}' anchor`,\n      0,\n      50,\n      (val) => this.getState().changeIconAnchor(val, coordinate),\n      value,\n      1,\n    );\n\n    return customAnchor;\n  };\n\n  createXAnchorSlider = () => this.createIconAnchorSlider('x');\n  createYAnchorSlider = () => this.createIconAnchorSlider('y');\n\n  addHeading = (title, elem) => {\n    let headingTag = document.createElement('h3');\n    headingTag.innerText = title;\n    elem.appendChild(headingTag);\n  };\n\n  renderSearchInputs = (elem, model) => {\n    this.addHeading('Search for place', elem);\n    // * labeled text Search\n    this.inputSearch = SidebarInputFactory.createSidebarInput(model.search.input, {\n      label: model.search.label,\n      action: this.getState().searchAction,\n      options: [],\n      placeholder: 'Press enter for search',\n      setData: this.getState().onInputOptClick,\n    });\n    elem.appendChild(this.inputSearch.create());\n\n    this.inputConnect = this.createConnectCheck();\n    elem.appendChild(this.inputConnect);\n    // * divider\n    elem.appendChild(document.createElement('hr'));\n\n    this.addHeading('Search for area', elem);\n    // * labeled text Search\n    this.inputSearchForArea = SidebarInputFactory.createSidebarInput(model.searchForArea.input, {\n      label: model.searchForArea.label,\n      options: this.getState().getSelectCountries(),\n      action: this.getState().searchForAreaAction,\n      value: this.getState().countryCode || '',\n    });\n    elem.appendChild(this.inputSearchForArea.create());\n\n    this.inputAdminLevel = SidebarInputFactory.createSidebarInput(model.adminLevel.input, {\n      label: model.adminLevel.label,\n      options: ADMIN_LEVELS,\n      action: this.getState().pickAdminLevelAction,\n      value: this.getState().adminLevel,\n    });\n    elem.appendChild(this.inputAdminLevel.create());\n\n    const hqCheck = this.createHighQualityCheck();\n    elem.appendChild(hqCheck);\n\n    this.errorMsg = document.createElement('div');\n    this.errorMsg.className = 'error-text';\n    this.errorMsg.innerText = '';\n    elem.appendChild(this.errorMsg);\n\n    this.searchForAreasBtn = document.createElement('button');\n    this.searchForAreasBtn.innerText = 'Submit';\n    this.searchForAreasBtn.addEventListener('click', this.getState().fetchAreas);\n    elem.appendChild(this.searchForAreasBtn);\n  };\n\n  renderDataInputs = (elem, model) => {\n    let disableTextFields = !Boolean(this._getSelected());\n    // Select Pick Identifier\n    this.inputPickIdentifier = this.createPickIdentifier(model);\n    elem.appendChild(this.inputPickIdentifier.create());\n    this.inputPickIdentifier.setDisabled(disableTextFields);\n    // textfield Identifier\n    this.inputId = this.createIdentifierInput(model);\n    elem.appendChild(this.inputId.create());\n    this.inputId.setDisabled(disableTextFields);\n    // textarea Description\n    this.inputDesc = SidebarInputFactory.createSidebarInput(model.description.input, {\n      label: model.description.label,\n      action: this.getState().changeDescriptionAction,\n      value: this.convertDescfromPopText(this._getSelected()?.getPopup()?.getContent()),\n    });\n    elem.appendChild(this.inputDesc.create());\n    this.inputDesc.setDisabled(disableTextFields);\n  };\n\n  renderPolyInputs = (elem, model) => {\n    // select stroke thickness\n    const thicknessOpts = this.getState().strokes;\n    this.inputThickness = SidebarInputFactory.createSidebarInput(model.strokeThickness.input, {\n      label: model.strokeThickness.label,\n      options: thicknessOpts,\n      action: this.getState().changeWeightAction,\n      value: this._getSelected()?.options?.weight || this.getState().getSelectedStroke(),\n    });\n    elem.appendChild(this.inputThickness.create());\n\n    // palette Colors\n    this.inputColor = this.createColorPicker();\n    elem.appendChild(this.inputColor);\n  };\n\n  renderIconInputs = (elem, model) => {\n    // palette Icons\n    this.inputIcon = this.createIconPalette();\n    elem.appendChild(this.inputIcon);\n\n    this.inputUrl = SidebarInputFactory.createSidebarInput(model.iconUrl.input, {\n      label: model.iconUrl.label,\n      action: this.getState().addIconAction,\n      value: '',\n    });\n\n    elem.appendChild(this.inputUrl.create());\n\n    const changeConnect = this.createChangeConnectCheck();\n    elem.appendChild(changeConnect);\n\n    elem.appendChild(this.createXAnchorSlider());\n    elem.appendChild(this.createYAnchorSlider());\n  };\n\n  /**\n   * It returns the sidebar tab pane.\n   *\n   * @param {string} layerType\n   * @param {boolean} enabled\n   * @returns\n   */\n  getTabContent(layerType = null, enabled = false) {\n    // tab content\n    let tab = document.createElement('div');\n    let elem = tab.appendChild(document.createElement('div'));\n    elem.classList.add('drawing-sidebar');\n\n    // get data mapping model\n    let model = this.getDefaults().getDataMappingModel();\n\n    let paintPolyControl = this.createBrushSizeControl();\n    if (paintPolyControl) elem.appendChild(paintPolyControl);\n\n    if (!layerType) return tab;\n\n    if (layerType === 'search') {\n      this.renderSearchInputs(elem, model);\n\n      return tab;\n    }\n\n    this.renderDataInputs(elem, model);\n\n    if (layerType === 'painted' || layerType === 'polygon') {\n      this.inputIntersect = this.createIntersectionCheck();\n      elem.appendChild(this.inputIntersect);\n    }\n\n    if (POLYS.includes(layerType)) {\n      this.renderPolyInputs(elem, model);\n    }\n\n    if (layerType === 'marker') {\n      this.renderIconInputs(elem, model);\n    }\n\n    // this.setInputValues(this.getTool().getState().getDataMapping());\n\n    return tab;\n  }\n}\nexport default DrawingLayerToolTabControl;\n","import React from 'react';\n\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nimport 'leaflet-draw';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport { normalStyles, polygonCreate, polylineCreate, slicePoly } from '../util/Poly';\nimport { connectClick, markerCreate } from '../util/Marker';\n\nimport '../style/drawingLayer.scss';\nimport paintPoly from './paintPoly';\n\nimport '../components/Edit';\n\nimport * as turf from '@turf/turf';\n\nconst UNABLE_TO_CLICK_DISABLE = ['lineBtn', 'markerBtn', 'polygonBtn'];\n\nexport default function useDrawingToolbar() {\n  L.Control.DrawingToolbar = L.Control.extend({\n    options: {\n      position: 'topleft',\n      drawingBtns: {},\n    },\n    initialize: function (options) {\n      if (options) {\n        L.setOptions(this, options);\n      }\n    },\n    onAdd: function (map) {\n      this.options.map = map;\n      return this.createUi();\n    },\n    createUi: function (map) {\n      const topContainer = L.DomUtil.create('div', 'drawingtoolbar');\n      const toolContainer = L.DomUtil.create('div', 'leaflet-bar leaflet-control', topContainer);\n      toolContainer.style.cursor = 'pointer';\n\n      this.options.drawingBtns.lineBtn = this.createToolbarBtn(\n        'lineBtn',\n        toolContainer,\n        'Line',\n        'fa fa-minus',\n        true,\n      );\n      this.options.drawingBtns.markerBtn = this.createToolbarBtn(\n        'markerBtn',\n        toolContainer,\n        'Marker',\n        'fa fa-map-marker',\n        true,\n      );\n      this.options.drawingBtns.polygonBtn = this.createToolbarBtn(\n        'polygonBtn',\n        toolContainer,\n        'Polygon',\n        'fa fa-star',\n        true,\n      );\n\n      this.options.drawingBtns.deselectBtn = this.createToolbarBtn(\n        'deselectBtn',\n        toolContainer,\n        'Deselect',\n        'fa fa-star-half-o',\n      );\n\n      this.options.drawingBtns.transformBtn = this.createToolbarBtn(\n        'transformBtn',\n        toolContainer,\n        'Transform',\n        'fa fa-arrows-alt',\n      );\n\n      this.options.drawingBtns.editBtn = this.createToolbarBtn(\n        'editBtn',\n        toolContainer,\n        'Edit',\n        'fa fa-square',\n      );\n\n      this.options.drawingBtns.joinBtn = this.createToolbarBtn(\n        'joinBtn',\n        toolContainer,\n        'Join',\n        'fa fa-plus-circle',\n        true,\n      );\n\n      this.options.drawingBtns.sliceBtn = this.createToolbarBtn(\n        'sliceBtn',\n        toolContainer,\n        'Slice polygon',\n        'fa fa-cutlery',\n        true,\n      );\n\n      this.options.drawingBtns.connectBtn = this.createToolbarBtn(\n        'connectBtn',\n        toolContainer,\n        'Connect',\n        'fa fa-sitemap',\n        true,\n      );\n\n      this.options.drawingBtns.searchBtn = this.createToolbarBtn(\n        'searchBtn',\n        toolContainer,\n        'Search',\n        'fa fa-search',\n      );\n\n      this.options.drawingBtns.paintBtn = this.createToolbarBtn(\n        'paintBtn',\n        toolContainer,\n        'Paint',\n        'fa fa-paint-brush',\n        true,\n      );\n\n      this.options.drawingBtns.eraserBtn = this.createToolbarBtn(\n        'eraseBtn',\n        toolContainer,\n        'Erase',\n        'fa fa-eraser',\n        true,\n      );\n\n      this.options.drawingBtns.removeBtn = this.createToolbarBtn(\n        'removeBtn',\n        toolContainer,\n        'Remove',\n        'fa fa-fire',\n      );\n\n      this.addEventListeners();\n      L.DomEvent.disableClickPropagation(topContainer);\n      return topContainer;\n    },\n\n    onRemove: function (map) {},\n\n    _disableDrawing: function (e) {\n      e.stopPropagation();\n      e?.target?.classList?.toggle('hide');\n      const sidebar = this.getSidebar();\n      let enabled = sidebar.getState().getEnabledEl();\n      if (enabled) {\n        sidebar.getState().setEnabledEl(null);\n        this.redrawSidebar();\n      }\n    },\n\n    _disableTransform: function () {\n      const layer = this.getCurrEl();\n\n      if (layer?.transform?._enabled) {\n        layer.transform.disable();\n        layer.dragging.disable();\n        let paintPoly = this.getSidebar().getState().paintPoly;\n        paintPoly.updatePaintedPolys(layer.kIdx, layer);\n      }\n    },\n\n    addEventListeners: function () {\n      const {\n        lineBtn,\n        markerBtn,\n        polygonBtn,\n        transformBtn,\n        editBtn,\n        sliceBtn,\n        joinBtn,\n        deselectBtn,\n        connectBtn,\n        searchBtn,\n        paintBtn,\n        eraserBtn,\n        removeBtn,\n      } = this.options.drawingBtns;\n      const map = this.options.map;\n      const sidebar = this.getSidebar();\n\n      const btnsArr = Object.values(this.options.drawingBtns);\n      btnsArr.forEach((btn) => {\n        if (btn.className !== 'transformBtn') {\n          L.DomEvent.on(btn, 'click', this._disableTransform, this);\n        }\n      });\n\n      const toggleExtra = (e) => {\n        withExtra.forEach((btn) => btn.lastChild.classList.add('hide'));\n        let extraBtn = e.target.lastChild;\n        if (!extraBtn) extraBtn = e.target.nextSibling;\n        extraBtn.classList.toggle('hide');\n        L.DomEvent.on(extraBtn, 'click', this._disableDrawing, this);\n      };\n      const withExtra = [\n        lineBtn,\n        markerBtn,\n        polygonBtn,\n        connectBtn,\n        sliceBtn,\n        paintBtn,\n        eraserBtn,\n        joinBtn,\n      ];\n      withExtra.forEach((btn) => {\n        L.DomEvent.on(btn, 'click', toggleExtra, this);\n      });\n\n      L.DomEvent.on(lineBtn, 'click', () => this.initCreatePolyline(map, sidebar), this);\n      L.DomEvent.on(markerBtn, 'click', L.DomEvent.stopPropagation)\n        .on(markerBtn, 'click', L.DomEvent.preventDefault)\n        .on(markerBtn, 'click', () => this.initCreateMarker(map, sidebar), this);\n      L.DomEvent.on(polygonBtn, 'click', () => this.initCreatePolygon(map, sidebar), this);\n      L.DomEvent.on(transformBtn, 'click', this.initTransform, this);\n      L.DomEvent.on(editBtn, 'click', this.initNodeEdit, this);\n      L.DomEvent.on(sliceBtn, 'click', () => this.initSlicePoly(map, sidebar), this);\n      L.DomEvent.on(deselectBtn, 'click', this.deselect, this);\n      L.DomEvent.on(joinBtn, 'click', this.initJoin, this);\n      L.DomEvent.on(connectBtn, 'click', L.DomEvent.stopPropagation)\n        .on(connectBtn, 'click', L.DomEvent.preventDefault)\n        .on(connectBtn, 'click', () => this.initConnect(map, sidebar), this);\n      L.DomEvent.on(searchBtn, 'click', this.initSearch, this);\n      L.DomEvent.on(paintBtn, 'click', this.initPainting, this);\n      L.DomEvent.on(eraserBtn, 'click', this.initErasing, this);\n      L.DomEvent.on(removeBtn, 'click', this.initRemove, this);\n    },\n\n    initJoin: function (evt) {\n      const sidebar = this.getSidebar();\n      const init = this.options.tool.initSelecting;\n      init();\n      sidebar.getState().setEnabledEl({\n        enable: init,\n        disable: () => {\n          init();\n          this.options.tool.getState().deselectChosenLayers();\n        },\n      });\n    },\n\n    initConnect: function (map, sidebar) {\n      this.redrawSidebar('marker', true);\n      connectClick(map, sidebar);\n    },\n\n    initRemove: function (evt) {\n      this.options.tool.removeElement();\n    },\n\n    initErasing: function (evt) {\n      let sidebar = this.getSidebar();\n      let paintPoly = sidebar.getState().paintPoly;\n      sidebar.getState().paintPoly.erase(evt);\n\n      sidebar\n        .getState()\n        .setEnabledEl({ enable: paintPoly.enableErase, disable: paintPoly.disable });\n      this.redrawSidebar(null);\n    },\n\n    initPainting: function (e) {\n      let sidebar = this.getSidebar();\n      let paintPoly = sidebar.getState().paintPoly;\n      sidebar.getState().paintPoly.clickDraw(e);\n\n      sidebar\n        .getState()\n        .setEnabledEl({ enable: paintPoly.enablePaint, disable: paintPoly.disable });\n      this.redrawSidebar('painted');\n    },\n\n    initSearch: function () {\n      this.options.tool.search();\n    },\n\n    initCreatePolyline: function (map, sidebar) {\n      this.redrawSidebar('polyline');\n      polylineCreate(map, sidebar);\n    },\n    initCreatePolygon: function (map, sidebar) {\n      this.redrawSidebar('polygon');\n      polygonCreate(map, sidebar);\n    },\n    initCreateMarker: function (map, sidebar) {\n      this.redrawSidebar('marker', true);\n      markerCreate(map, sidebar);\n    },\n    initSlicePoly: function (map, sidebar) {\n      this.redrawSidebar(null);\n      slicePoly(map, sidebar);\n    },\n\n    deselect: function () {\n      const currEl = this.getCurrEl();\n      // console.log({ currEl });\n\n      if (currEl?.editing?._enabled) {\n        currEl.editing.disable();\n      }\n      let selected = this.options.tool.getState().selectedLayer;\n      if (selected) {\n        this.options.tool.normalizeElement(selected);\n        this.options.tool.initNodeEdit(true);\n        this.options.tool.getState().clearSelectedLayer();\n        this.redrawSidebar();\n        this.setCurrEl(null);\n        document.querySelector('.leaflet-container').style.cursor = '';\n      }\n    },\n\n    initNodeEdit: function () {\n      this.options.tool.initNodeEdit();\n    },\n\n    initTransform: function () {\n      const currEl = this.getCurrEl();\n\n      this.options.tool.initTransform(currEl);\n    },\n\n    createToolbarBtn: function (className, btnContainer, title, icon, extra = false) {\n      const returnBtn = L.DomUtil.create('a', `${className} d-side-button`, btnContainer);\n      returnBtn.title = title;\n      returnBtn.innerHTML = `<i class=\"${icon}\" aria-hidden=\"true\"></i>`;\n      returnBtn.role = 'button';\n      if (extra) {\n        const extraBtn = L.DomUtil.create('a', 'extra-btn hide', returnBtn);\n        extraBtn.innerHTML = `Cancel`;\n        extraBtn.role = 'button';\n      }\n      return returnBtn;\n    },\n\n    getCurrEl: function () {\n      return this.options.tool.getState().currEl;\n    },\n\n    setCurrEl: function (el) {\n      this.options.tool.getState().setCurrEl(el);\n    },\n\n    redrawSidebar: function (val, enabled = false) {\n      this.options.tool.redrawSidebarTabControl(val, enabled);\n    },\n\n    getSidebar: function () {\n      return this.options.tool.getSidebarTabControl();\n    },\n  });\n\n  L.control.drawingToolbar = function (options) {\n    if (!options) {\n      options = {};\n    }\n    return new L.Control.DrawingToolbar(options);\n  };\n}\n","import L from 'leaflet';\nimport AbstractLayerTool from '../abstract/AbstractLayerTool';\nimport DrawingLayerToolState from './DrawingLayerToolState';\nimport DrawingLayerToolDefaults from './DrawingLayerToolDefaults';\nimport DrawingLayerToolTabControl from './sidebar/DrawingLayerToolTabControl';\nimport useDrawingToolbar from './components/useDrawingToolbar';\nimport union from '@turf/union';\nimport {\n  convertOptionsToProperties,\n  convertPropertiesToOptions,\n  featureToLeafletCoordinates,\n  getGeoJSONFeatureFromLayer,\n  getLeafletTypeFromFeature,\n  highlightStyles,\n  normalStyles,\n  getFeatFromLayer,\n  isFeaturePoly,\n  getSimplifiedPoly,\n  isLayerPoly,\n  simplifyFeature,\n  morphFeatureToPolygon,\n} from './util/Poly';\n\nimport 'leaflet/dist/leaflet.css';\nimport './style/drawingLayer.scss';\nimport difference from '@turf/difference';\nimport MapCreatedEvent from '../../../model/event/basic/MapCreatedEvent';\nimport { iconStarter } from './util/Marker';\nimport { filter } from 'd3-array';\nimport lineToPolygon from '@turf/line-to-polygon';\nimport * as turf from '@turf/turf';\nimport * as martinez from 'martinez-polygon-clipping';\nimport * as polyClipping from 'polygon-clipping';\nimport './components/Edit';\nimport 'leaflet-snap';\nimport 'leaflet-geometryutil';\nimport 'leaflet-draw';\nimport 'proj4leaflet';\nimport proj4 from 'proj4';\n\nimport * as d33 from 'd3-3-5-5';\nimport Pather from 'leaflet-pather';\nimport { isEmpty, sortReverseAlpha, sortAlpha } from './util/functionUtils';\nimport { FIRST, NOT_FOUND, SPACE_BAR } from './util/constants';\n\n// !inject in rollup config doesn't work and pather throws errors without this line\nwindow.d3 = d33;\n\n// * as advised in https://github.com/makinacorpus/Leaflet.Snap/issues/52\nL.Draw.Feature.include(L.Evented.prototype);\nL.Draw.Feature.include(L.Draw.Feature.SnapMixin);\nL.Draw.Feature.addInitHook(L.Draw.Feature.SnapMixin._snap_initialize);\n\nexport const DRAWING_TOOL_LAYER_TYPE = 'geovisto-tool-layer-drawing';\n\n// proj4.defs('urn:ogc:def:crs:EPSG::3857', '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs ');\n\n/**\n * This class represents Drawing layer tool.\n *\n * @author Andrej Tlcina\n */\nclass DrawingLayerTool extends AbstractLayerTool {\n  /**\n   * It creates a new tool with respect to the props.\n   *\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n    useDrawingToolbar();\n  }\n\n  /**\n   * A unique string of the tool type.\n   */\n  static TYPE() {\n    return DRAWING_TOOL_LAYER_TYPE;\n  }\n\n  /**\n   * It creates a copy of the uninitialized tool.\n   */\n  copy() {\n    return new DrawingLayerTool(this.getProps());\n  }\n\n  /**\n   * It creates new defaults of the tool.\n   */\n  createDefaults() {\n    return new DrawingLayerToolDefaults();\n  }\n\n  /**\n   * It returns default tool state.\n   */\n  createState() {\n    return new DrawingLayerToolState(this);\n  }\n\n  /**\n   * It returns a tab control.\n   */\n  getSidebarTabControl() {\n    if (this.tabControl == undefined) {\n      this.tabControl = this.createSidebarTabControl();\n    }\n    return this.tabControl;\n  }\n\n  redrawSidebarTabControl(layerType, enabled = false) {\n    if (this.tabControl == undefined) return;\n    this.tabControl.redrawTabContent(layerType, enabled);\n  }\n\n  /**\n   * It creates new tab control.\n   */\n  createSidebarTabControl() {\n    return new DrawingLayerToolTabControl({ tool: this });\n  }\n\n  search() {\n    this.redrawSidebarTabControl('search');\n  }\n\n  applyEventListeners(layer) {\n    layer.on('click', L.DomEvent.stopPropagation).on('click', this.initChangeStyle, this);\n    layer.on('mouseover', this.hightlightOnHover, this);\n    layer.on('mouseout', this.normalizeOnHover, this);\n    if (layer.layerType === 'marker') this.applyTopologyMarkerListeners(layer);\n  }\n\n  polyDiff(layer) {\n    let selectedLayer = this.getState().selectedLayer;\n    let paintPoly = this.getSidebarTabControl().getState().paintPoly;\n    let fgLayers = this.getState().featureGroup._layers;\n\n    let layerFeature = getGeoJSONFeatureFromLayer(layer);\n    let isCurrentLayerPoly = isLayerPoly(layer);\n\n    // let createdIsNotEraser = layer.layerType !== 'erased';\n    let createdIsEraser = layer.layerType === 'erased';\n\n    const replaceLayer = (replacement, replacedLayer, replacementCoords) => {\n      replacement?.dragging?.disable();\n      replacement.layerType = 'polygon';\n      if (replacementCoords) replacement._latlngs = replacementCoords;\n      this.getState().addLayer(replacement);\n      this.getState().removeLayer(replacedLayer);\n      paintPoly.clearPaintedPolys(replacedLayer.kIdx);\n    };\n\n    if (isCurrentLayerPoly) {\n      Object.values(fgLayers)\n        .filter((l) => isLayerPoly(l))\n        .forEach((l) => {\n          let feature = getGeoJSONFeatureFromLayer(l);\n\n          let layerIsNotSelected = l?._leaflet_id !== selectedLayer?._leaflet_id;\n          let canDiff = !createdIsEraser ? true : layerIsNotSelected;\n          if (canDiff) {\n            let diffFeature = difference(feature, layerFeature);\n\n            if (diffFeature) {\n              let coords;\n              let latlngs;\n              coords = diffFeature.geometry.coordinates;\n              let isMultiPoly = diffFeature.geometry.type === 'MultiPolygon';\n              let isJustPoly = diffFeature.geometry.type === 'Polygon';\n              // * when substracting you can basically slice polygon into more parts\n              // * then we have to increase depth by one because we have an array within array\n              let depth = isMultiPoly ? 2 : 1;\n              try {\n                // * this conditional asks if created polygon is polygon with hole punched in it\n                // * for the rest of cases i.e. when polygon is split into multiple parts or not we use loop\n                // * otherwise we create polygon where hole should be\n                if (isJustPoly && coords.length !== 1) {\n                  latlngs = L.GeoJSON.coordsToLatLngs(coords, 1);\n                  let result = new L.polygon(latlngs, {\n                    ...l.options,\n                  });\n                  replaceLayer(result, l);\n                } else {\n                  coords.forEach((coord) => {\n                    latlngs = L.GeoJSON.coordsToLatLngs([coord], depth);\n                    let result = new L.polygon(latlngs, {\n                      ...l.options,\n                    });\n                    let newLatLngs = depth === 1 ? result._latlngs : result._latlngs[FIRST];\n                    replaceLayer(result, l, newLatLngs);\n                  });\n                }\n              } catch (error) {\n                console.error({ coords, latlngs, error, depth });\n              }\n            } else {\n              this.getState().removeLayer(l);\n              paintPoly.clearPaintedPolys(l.kIdx);\n            }\n          }\n        });\n    }\n  }\n\n  operateOnSelectedAndCurrectLayer = (layer, eKeyIndex, operation, selectNew = false) => {\n    let paintPoly = this.getSidebarTabControl().getState().paintPoly;\n\n    let feature = getFeatFromLayer(layer);\n    // * gets only first one because MultiPolygon is not expected to be created\n    feature = Array.isArray(feature) ? feature[0] : feature;\n    let isFeatPoly = isFeaturePoly(feature);\n    if (!isFeatPoly) return layer;\n\n    let summedFeature = feature;\n\n    let selectedLayer = this.getState().selectedLayer;\n    // * this can be multipolygon whenever user joins 2 unconnected polygons\n    let selectedFeatures = getFeatFromLayer(selectedLayer);\n    if (!selectedFeatures) return layer;\n\n    selectedFeatures.forEach((selectedFeature) => {\n      let isSelectedFeaturePoly = isFeaturePoly(selectedFeature);\n\n      if (isSelectedFeaturePoly) {\n        summedFeature = operation(selectedFeature, summedFeature);\n      }\n    });\n\n    layer = morphFeatureToPolygon(summedFeature, layer.options, false);\n    paintPoly.clearPaintedPolys(eKeyIndex);\n    if (selectNew) {\n      this.getState().removeSelectedLayer();\n      this.getState().setSelectedLayer(layer);\n    }\n    return layer;\n  };\n\n  polyIntersect(layer, eKeyIndex) {\n    const updatedLayer = this.operateOnSelectedAndCurrectLayer(layer, eKeyIndex, turf.intersect);\n\n    return updatedLayer;\n  }\n\n  polyJoin(layer, eKeyIndex) {\n    const updatedLayer = this.operateOnSelectedAndCurrectLayer(layer, eKeyIndex, union, true);\n    return updatedLayer;\n  }\n\n  polySlice(layer) {\n    let lineFeat = getGeoJSONFeatureFromLayer(layer);\n    let selectedLayer = this.getState().selectedLayer;\n\n    if (selectedLayer) {\n      const THICK_LINE_WIDTH = 0.001;\n      const THICK_LINE_UNITS = 'kilometers';\n      let offsetLine;\n      let selectedFeature = getGeoJSONFeatureFromLayer(selectedLayer);\n\n      let isFeatPoly = isFeaturePoly(selectedFeature);\n\n      if (isFeatPoly) {\n        let coords;\n        let latlngs;\n        try {\n          offsetLine = turf.lineOffset(lineFeat, THICK_LINE_WIDTH, {\n            units: THICK_LINE_UNITS,\n          });\n\n          let polyCoords = [];\n          // * push all of the coordinates of original line\n          for (let j = 0; j < lineFeat.geometry.coordinates.length; j++) {\n            polyCoords.push(lineFeat.geometry.coordinates[j]);\n          }\n          // * push all of the coordinates of offset line\n          for (let j = offsetLine.geometry.coordinates.length - 1; j >= 0; j--) {\n            polyCoords.push(offsetLine.geometry.coordinates[j]);\n          }\n          // * to create linear ring\n          polyCoords.push(lineFeat.geometry.coordinates[0]);\n\n          let thickLineString = turf.lineString(polyCoords);\n          let thickLinePolygon = turf.lineToPolygon(thickLineString);\n          let clipped = turf.difference(selectedFeature, thickLinePolygon);\n          // clipped = simplifyFeature(clipped);\n\n          coords = clipped.geometry.coordinates;\n          coords.forEach((coord) => {\n            latlngs = L.GeoJSON.coordsToLatLngs(coord, 1);\n            let result = new L.polygon(latlngs, {\n              ...selectedLayer.options,\n              ...normalStyles,\n            });\n            result.layerType = 'polygon';\n            this.getState().removeSelectedLayer(selectedLayer);\n            this.getState().addLayer(result);\n          });\n        } catch (error) {\n          console.error({ coords, latlngs, error });\n        }\n      }\n    }\n  }\n\n  haveSameVertice(current) {\n    const found = this.state.createdVertices.find((vertice) => {\n      return (\n        (vertice.getLatLngs()[0].equals(current.getLatLngs()[0]) &&\n          vertice.getLatLngs()[1].equals(current.getLatLngs()[1])) ||\n        (vertice.getLatLngs()[0].equals(current.getLatLngs()[1]) &&\n          vertice.getLatLngs()[1].equals(current.getLatLngs()[0]))\n      );\n    });\n\n    return Boolean(found);\n  }\n\n  plotTopology(chosen = null) {\n    const selectedLayer = this.getState().selectedLayer;\n\n    const layersObj = this.state.featureGroup._layers;\n    const layerArr = [...Object.values(layersObj)];\n    const allConnected = layerArr.filter((_) => this.getState().isConnectMarker(_)).reverse();\n    const _markers = chosen || allConnected;\n    // console.log({ _markers });\n    const index = 0;\n    const firstMarker = _markers[index];\n\n    const selectedLayerIsConnectMarker = this.getState().selectedLayerIsConnectMarker();\n\n    const secondMarker =\n      selectedLayerIsConnectMarker && !chosen ? selectedLayer : _markers[index + 1];\n    if (secondMarker) {\n      const { lat: fLat, lng: fLng } = firstMarker.getLatLng();\n      const { lat: sLat, lng: sLng } = secondMarker.getLatLng();\n\n      let _latlng = [L.latLng(fLat, fLng), L.latLng(sLat, sLng)];\n      let poly = new L.polyline(_latlng, {\n        color: '#563412',\n        weight: 3,\n        ...normalStyles,\n      });\n      poly.layerType = 'vertice';\n      if (!this.haveSameVertice(poly)) {\n        this.state.pushVertice(poly);\n        this.getState().addLayer(poly);\n      }\n    }\n\n    this.mapMarkersToVertices(_markers);\n  }\n\n  mapMarkersToVertices(_markers) {\n    console.log({ _markers, mapped: this.state.mappedMarkersToVertices });\n    _markers\n      .map((marker) => ({ latlng: marker.getLatLng(), lId: marker._leaflet_id, marker }))\n      .forEach(({ latlng, lId, marker }) => {\n        this.state.createdVertices.forEach((vertice, index) => {\n          // * used indexing instead of another loop (vertices have only 2 points)\n\n          let spread = this.state.mappedMarkersToVertices[lId] || {};\n          if (vertice.getLatLngs()[0].equals(latlng)) {\n            this.getState().setVerticesToMarker(lId, { ...spread, [`${index}-0`]: vertice });\n          } else if (vertice.getLatLngs()[1].equals(latlng)) {\n            this.getState().setVerticesToMarker(lId, { ...spread, [`${index}-1`]: vertice });\n          }\n        });\n      });\n  }\n\n  changeVerticesLocation(latlng, oldlatlng, markerID) {\n    console.log({ m: this.state.mappedMarkersToVertices });\n    const markerVertices = this.state.mappedMarkersToVertices[markerID];\n    if (!markerVertices) return;\n\n    this.setVerticesCoordinates(markerVertices, latlng);\n  }\n\n  setVerticesCoordinates(markerVertices, latlng) {\n    Object.keys(markerVertices).forEach((key) => {\n      let vertice = markerVertices[key];\n      let splitKey = key?.split('-');\n      let idx = splitKey ? splitKey[1] : undefined;\n      if (idx === undefined) return;\n      let latLngs = L.LatLngUtil.cloneLatLngs(vertice.getLatLngs());\n      latLngs[idx] = latlng;\n      vertice.setLatLngs(latLngs);\n    });\n  }\n\n  createdListener = (e) => {\n    let layer = e.layer;\n    layer.layerType = e.layerType;\n    if (e.keyIndex) layer.kIdx = e.keyIndex;\n\n    const { intersectActivated } = this.getSidebarTabControl().getState();\n\n    if (e.layerType === 'polygon' || e.layerType === 'painted') {\n      // * JOIN\n      if (intersectActivated) layer = this.polyIntersect(layer, e.keyIndex);\n      else layer = this.polyJoin(layer, e.keyIndex);\n    }\n\n    if (e.layerType === 'polygon' || e.layerType === 'painted' || e.layerType === 'erased') {\n      // * DIFFERENCE\n      this.polyDiff(layer);\n    }\n\n    if (layer.dragging) layer.dragging.disable();\n\n    if (e.layerType !== 'knife' && e.layerType !== 'erased') {\n      this.getState().addLayer(layer);\n      this.getState().setCurrEl(layer);\n      this.getSidebarTabControl().getState().pushGuideLayer(layer);\n    }\n\n    if (e.layerType === 'erased') {\n      const map = this.getMap().getState().getLeafletMap();\n      map.removeLayer(layer);\n      let paintPoly = this.getSidebarTabControl().getState().paintPoly;\n      paintPoly.clearPaintedPolys(e.keyIndex);\n    }\n\n    // * MARKER\n    if (this.getState().isConnectMarker(layer)) {\n      this.plotTopology();\n    }\n  };\n\n  applyTopologyMarkerListeners(layer) {\n    layer.on('drag', (event) => {\n      const { latlng, oldLatLng, target } = event;\n\n      // console.log({ lat: latlng.lat, lng: latlng.lng, oldlat: oldLatLng.lat, oldlng: oldLatLng.lng });\n\n      this.changeVerticesLocation(latlng, oldLatLng, target._leaflet_id);\n    });\n  }\n\n  createdPath = (e) => {\n    // * get polyline object\n    const layer = e.polyline.polyline;\n\n    // * get Leaflet map\n    const combinedMap = this.getMap();\n    const map = combinedMap.state.map;\n\n    // * get sidebar state and pather object\n    const sidebarState = this.getSidebarTabControl().getState();\n    const pather = sidebarState.pather;\n    // * SLICE\n    this.polySlice(layer);\n\n    // * we do not want path to stay\n    pather.removePath(layer);\n    // * we do not want to keep cutting (drawing)\n    map.removeLayer(pather);\n    sidebarState.setPatherStatus(false);\n    // * restore state\n    let enabled = sidebarState.getEnabledEl();\n    if (enabled) {\n      sidebarState.setEnabledEl(null);\n      this.redrawSidebarTabControl();\n    }\n    const knifeBtn = document.querySelector('.drawingtoolbar .sliceBtn .extra-btn');\n    if (knifeBtn) knifeBtn.classList.add('hide');\n  };\n\n  /**\n   * It creates layer items.\n   */\n  createLayerItems() {\n    console.log('%c ...creating', 'color: #ff5108');\n    const map = this.getMap().getState().getLeafletMap();\n\n    this.setGlobalSimplificationTolerance();\n\n    map.addControl(L.control.drawingToolbar({ tool: this }));\n    // * eventlistener for when object is created\n    map.on('draw:created', this.createdListener);\n\n    map.on('zoomend', () => this.setGlobalSimplificationTolerance());\n\n    map.on('click', () => {\n      const sidebar = this.getSidebarTabControl();\n      if (Boolean(sidebar.getState().enabledEl)) return;\n      if (document.querySelector('.leaflet-container').style.cursor === 'wait') return;\n      let selected = this.getState().selectedLayer;\n      if (selected) {\n        this.normalizeElement(selected);\n        this.initNodeEdit(true);\n        this.redrawSidebarTabControl();\n        this.getState().setCurrEl(null);\n        this.initTransform(selected, true);\n        this.getState().clearSelectedLayer();\n        document.querySelector('.leaflet-container').style.cursor = '';\n      }\n    });\n\n    document.addEventListener('keydown', (e) => {\n      if (e.keyCode === SPACE_BAR) {\n        let enabledEl = this.getSidebarTabControl().getState().enabledEl;\n        if (enabledEl) {\n          enabledEl.disable();\n          // map.dragging.enable(); // we do not have to do this, it is already on always\n        }\n      }\n    });\n    document.addEventListener('keyup', (e) => {\n      if (e.keyCode === SPACE_BAR) {\n        let enabledEl = this.getSidebarTabControl().getState().enabledEl;\n        if (enabledEl) {\n          enabledEl.enable();\n          // map.dragging.disable(); // we do not have to do this, it is already on always\n        }\n      }\n    });\n\n    const pather = this.getSidebarTabControl().getState().pather;\n    pather.on('created', this.createdPath);\n\n    const layer = this.getState().featureGroup;\n    layer.eachLayer((layer) => {\n      layer.addTo(map);\n      this.applyEventListeners(layer);\n    });\n    return [layer];\n  }\n\n  setGlobalSimplificationTolerance() {\n    const map = window.map;\n    const metersPerPixel =\n      (40075016.686 * Math.abs(Math.cos((map.getCenter().lat * Math.PI) / 180))) /\n      Math.pow(2, map.getZoom() + 8);\n    const zoom = map.getZoom();\n\n    // ! this is tried out, so no real calculation\n    window.customTolerance = zoom >= 4 ? 0.0001 * metersPerPixel : 1.5;\n  }\n\n  highlightElement(el) {\n    if (el._icon) {\n      L.DomUtil.addClass(el._icon, 'highlight-marker');\n    } else {\n      if (el.setStyle) el.setStyle(highlightStyles);\n    }\n  }\n\n  hightlightOnHover(e) {\n    if (!this.getState().getSelecting()) return;\n    this.highlightElement(e.target);\n  }\n\n  normalizeElement(el) {\n    if (el._icon) {\n      L.DomUtil.removeClass(el._icon, 'highlight-marker');\n    } else {\n      if (el.setStyle) el.setStyle(normalStyles);\n    }\n  }\n\n  normalizeOnHover(e) {\n    if (!this.getState().getSelecting()) return;\n    const { chosenLayers } = this.getState();\n    const isChosen = chosenLayers.map((x) => x._leaflet_id).includes(e.target._leaflet_id);\n    if (isChosen) return;\n    this.normalizeElement(e.target);\n  }\n\n  getSummedFeature = (features) => {\n    if (!features || !Array.isArray(features)) return null;\n\n    let summedFeature = features[0];\n    for (let index = 1; index < features.length; index++) {\n      const feature = features[index];\n      let isfeaturePoly = isFeaturePoly(feature);\n\n      if (isfeaturePoly) {\n        summedFeature = union(feature, summedFeature);\n      }\n    }\n\n    return summedFeature;\n  };\n\n  joinChosen = (drawObject) => {\n    const layerState = this.getState();\n    const unfit = !layerState.canPushToChosen(drawObject);\n    if (unfit) return;\n    layerState.pushChosenLayer(drawObject);\n    if (layerState.chosenLayersMaxed()) {\n      if (layerState.chosenLayersArePolys()) {\n        const { chosenLayers } = layerState;\n        const chosenFeatures = chosenLayers\n          .filter((c) => isLayerPoly(c))\n          .map((chosen) => getFeatFromLayer(chosen));\n\n        if (chosenFeatures.length !== chosenLayers.length) return;\n\n        const first = this.getSummedFeature(chosenFeatures[0]);\n        const second = this.getSummedFeature(chosenFeatures[1]);\n\n        const resultFeature = union(first, second);\n        const opts = { ...chosenLayers[0].options, ...chosenLayers[1].options };\n        const result = morphFeatureToPolygon(resultFeature, opts, false);\n        layerState.pushJoinedToChosenLayers(result);\n\n        this.redrawSidebarTabControl(drawObject.layerType);\n      }\n      if (layerState.chosenLayersAreMarkers()) {\n        const { chosenLayers } = layerState;\n\n        this.plotTopology(chosenLayers);\n\n        layerState.deselectChosenLayers();\n        layerState.clearChosenLayers();\n\n        this.redrawSidebarTabControl(null);\n      }\n    }\n  };\n\n  initChangeStyle = (e) => {\n    const drawObject = e.target;\n\n    const selecting = this.getState().getSelecting();\n    if (selecting) {\n      this.joinChosen(drawObject);\n      return;\n    }\n\n    let fgLayers = this.getState().featureGroup._layers;\n    Object.values(fgLayers).forEach((_) => {\n      this.normalizeElement(_);\n      _?.dragging?.disable();\n      if (_?.transform?._enabled) {\n        _.transform.disable();\n        let paintPoly = this.getSidebarTabControl().getState().paintPoly;\n        paintPoly.updatePaintedPolys(_.kIdx, _);\n      }\n    });\n    this.getState().setSelectedLayer(drawObject);\n    this.getState().setCurrEl(drawObject);\n    this.initTransform(drawObject);\n    this.redrawSidebarTabControl(drawObject.layerType);\n\n    document.querySelector('.leaflet-container').style.cursor = '';\n  };\n\n  initTransform(drawObject, disable = false) {\n    const layer = drawObject;\n    if (layer?.transform) {\n      if (layer.transform._enabled || disable) {\n        layer.transform.disable();\n        layer.dragging.disable();\n        let paintPoly = this.getSidebarTabControl().getState().paintPoly;\n        paintPoly.updatePaintedPolys(layer.kIdx, layer);\n      } else {\n        layer.transform.enable({ rotation: true, scaling: true });\n        layer.dragging.enable();\n      }\n    } else if (layer.layerType === 'marker') {\n      if (layer.dragging._enabled || disable) {\n        layer.dragging.disable();\n      } else {\n        layer.dragging.enable();\n      }\n    }\n  }\n\n  initNodeEdit(disable = false) {\n    const selectedLayer = this.getState().selectedLayer;\n\n    if (selectedLayer.editing) {\n      // selectedLayer.editing = new L.Edit.ExtendedPoly(selectedLayer);\n      if (selectedLayer.editing._enabled || disable) {\n        selectedLayer.editing.disable();\n        // let paintPoly = this.options.tool.getSidebarTabControl().getState().paintPoly;\n        // paintPoly.updatePaintedPolys(layer.kIdx, layer);\n      } else {\n        selectedLayer.editing.enable();\n      }\n    }\n  }\n\n  removeElement() {\n    const selectedLayer = this.getState().selectedLayer;\n    if (this.getState().selectedLayerIsConnectMarker()) {\n      this.getState().removeMarkersMappedVertices(selectedLayer._leaflet_id);\n    }\n    if (selectedLayer.layerType === 'vertice') {\n      this.getState().removeGivenVertice(selectedLayer._leaflet_id);\n    }\n    let paintPoly = this.getSidebarTabControl().getState().paintPoly;\n    paintPoly.clearPaintedPolys(selectedLayer.kIdx);\n    this.getState().removeSelectedLayer();\n    this.redrawSidebarTabControl(null);\n  }\n\n  initSelecting = () => {\n    const selecting = this.getState().getSelecting();\n    this.getState().setSelecting(!selecting);\n    if (!selecting) document.querySelector('.leaflet-container').style.cursor = 'crosshair';\n    else document.querySelector('.leaflet-container').style.cursor = '';\n  };\n\n  /**\n   * This function is called when layer items are rendered.\n   */\n  postCreateLayerItems() {}\n\n  /**\n   * It reloads data and redraw the layer.\n   */\n  redraw(onlyStyle) {\n    console.log('%c ...redrawing', 'color: #08ff51');\n  }\n\n  /**\n   * This function is called when a custom event is invoked.\n   *\n   * @param {AbstractEvent} event\n   */\n  handleEvent(event) {}\n}\n\nexport default DrawingLayerTool;\n","import AbstractMapObjectDefaults from '../model/object/abstract/AbstractMapObjectDefaults';\nimport ToolsManager from '../model/tool/generic/ToolsManager';\nimport SidebarTool from '../tools/sidebar/SidebarTool';\nimport FiltersTool from '../tools/filters/FiltersTool';\nimport SettingsTool from '../tools/settings/SettingsTool';\nimport BasicMapConfig from '../model/config/basic/BasicMapConfig';\nimport MapLayerTool from '../tools/layers/map/MapLayerTool';\nimport ChoroplethLayerTool from '../tools/layers/choropleth/ChoroplethLayerTool';\nimport MarkerLayerTool from '../tools/layers/marker/MarkerLayerTool';\nimport ConnectionLayerTool from '../tools/layers/connection/ConnectionLayerTool';\nimport ThemesTool from '../tools/themes/ThemesTool';\nimport SelectionTool from '../tools/selection/SelectionTool';\nimport GeovistoMap from './GeovistoMap';\n\nimport countryCentroids from '../../static/geo/country_centroids.json';\nimport countryPolygons from '../../static/geo/country_polygons.json';\nimport { DrawingLayerTool } from '../tools/layers/drawing';\n\n/**\n * This class provide functions which return the default state values.\n *\n * @author Jiri Hynek\n */\nclass GeovistoMapDefaults extends AbstractMapObjectDefaults {\n  /**\n   * It creates map defaults.\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * It returns a unique type string of the object.\n   */\n  getType() {\n    return GeovistoMap.TYPE();\n  }\n\n  /**\n   * It returns default managers.\n   *\n   * This function can be overriden;\n   */\n  getTemplates() {\n    return {\n      tools: this.getToolTemplates(),\n    };\n  }\n\n  /**\n   * It returns default tools manager.\n   *\n   * This function can be overriden;\n   */\n  getToolTemplates() {\n    return new ToolsManager([\n      new SidebarTool(),\n      new SettingsTool(),\n      new FiltersTool(),\n      new ThemesTool(),\n      new SelectionTool(),\n      new MapLayerTool(),\n      new ChoroplethLayerTool({ zindex: 350 }),\n      new MarkerLayerTool(),\n      new ConnectionLayerTool(),\n      new DrawingLayerTool(),\n    ]);\n  }\n\n  /**\n   * It returns a default tools manager.\n   */\n  getTools() {\n    return new ToolsManager([]);\n  }\n\n  /**\n   * It returns default map config.\n   */\n  getMapData() {\n    return new FlattenedMapData([]);\n  }\n\n  /**\n   * It returns default geo polygons.\n   */\n  getPolygons() {\n    if (!this.polygons) {\n      this.polygons = countryPolygons;\n    }\n    return this.polygons;\n  }\n\n  /**\n   * It returns default geo centroids.\n   */\n  getCentroids() {\n    if (!this.centroids) {\n      this.centroids = countryCentroids;\n    }\n    return this.centroids;\n  }\n\n  /**\n   * It returns default global state variables.\n   */\n  getGlobals() {\n    return {\n      zoom: this.getZoom(),\n      mapCenter: this.getMapCenter(),\n      mapStructure: this.getMapStructure(),\n    };\n  }\n\n  /**\n   * It returns default zoom level.\n   */\n  getZoom() {\n    return 2;\n  }\n\n  /**\n   * It returns default center coordinates in Leaflet map.\n   */\n  getMapCenter() {\n    return {\n      lat: 50,\n      lng: -0.1,\n    };\n  }\n\n  /**\n   * It returns the map structure defined with respect to the leaflet library.\n   */\n  getMapStructure() {\n    return {\n      maxZoom: 10,\n      maxBounds: [\n        [-100, -400],\n        [2000, 400],\n      ],\n    };\n  }\n\n  /**\n   * It returns default map config.\n   */\n  getConfig() {\n    return new BasicMapConfig({});\n  }\n}\nexport default GeovistoMapDefaults;\n","import AbstractToolsManager from '../model/tool/abstract/AbstractToolsManager';\nimport AbstractMapData from '../model/data/AbstractMapData';\nimport AbstractMapObjectState from '../model/object/abstract/AbstractMapObjectState';\nimport AbstractMapConfig from '../model/config/AbstractMapConfig';\nimport { DRAWING_TOOL_LAYER_TYPE } from '../tools/layers/drawing/DrawingLayerTool';\n\n/**\n * This class manages state of the map.\n * It wraps the state since the map can work with state objects which needs to be explicitly serialized.\n *\n * @author Jiri Hynek\n */\nclass GeovistoMapState extends AbstractMapObjectState {\n  /**\n   * It initializes a map state.\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * It resets state with respect to initial props. Optionally, defaults can be set if property is undefined.\n   *\n   * @param {*} defaults\n   */\n  reset(defaults) {\n    super.reset(defaults);\n\n    let props = this.getProps();\n\n    // templates\n    let templates =\n      props.templates == undefined && defaults ? defaults.getTemplates() : props.templates;\n    this.setToolTemplates(\n      templates.tools == undefined && defaults ? defaults.getToolTemplates() : templates.tools,\n    );\n\n    // tools\n    this.setTools(props.tools == undefined && defaults ? defaults.getTools() : props.tools);\n\n    // data\n    this.setMapData(props.data == undefined && defaults ? defaults.getMapData() : props.data);\n\n    // geo data - TODO convert to generic geo data\n    this.setPolygons(\n      props.polygons == undefined && defaults ? defaults.getPolygons() : props.polygons,\n    );\n    this.setCentroids(\n      props.centroids == undefined && defaults ? defaults.getCentroids() : props.centroids,\n    );\n\n    // globals (state variables which are common for all geovisto tools) - can be undefined and set by initialize function\n    let globals = props.globals == undefined && defaults ? defaults.getGlobals() : props.globals;\n    this.setInitialZoom(globals.zoom == undefined && defaults ? defaults.getZoom() : globals.zoom);\n    this.setInitialMapCenter(\n      globals.mapCenter == undefined && defaults ? defaults.getMapCenter() : globals.mapCenter,\n    );\n    this.setInitialMapStructure(\n      globals.mapStructure == undefined && defaults\n        ? defaults.getMapStructure()\n        : globals.mapStructure,\n    );\n  }\n\n  /**\n   * It takes config and desrializes the values.\n   *\n   * @param {*} config\n   */\n  deserialize(config, geojson) {\n    super.deserialize(config);\n\n    if (config.zoom != undefined) this.setInitialZoom(config.zoom);\n    if (config.mapCenter != undefined) this.setInitialMapCenter(config.mapCenter);\n    if (config.mapStructure != undefined) this.setInitialMapStructure(config.mapStructure);\n\n    this.deserializeGeoJSON(geojson);\n  }\n\n  deserializeGeoJSON(geojson) {\n    if (!geojson) return;\n    // tools\n    let tools = this.getTools().getObjects();\n    // get drawing tool\n    let found = tools.find((t) => t.getState().type === DRAWING_TOOL_LAYER_TYPE);\n    if (found) {\n      found.getState().deserializeGeoJSON(geojson);\n    }\n  }\n\n  /**\n   * It serializes the map state. Optionally, a serialed value can be let undefined if it equals the default value.\n   *\n   * @param {*} defaults\n   */\n  serialize(defaults) {\n    // do not serialize the id and type for map\n    //let config = super.serialize(defaults);\n    let config = {};\n\n    // initialize config\n    let map = this.getLeafletMap();\n    config.zoom = defaults && map.getZoom() == defaults.getZoom() ? undefined : map.getZoom();\n    config.mapCenter =\n      defaults && map.getCenter() == defaults.getMapCenter() ? undefined : map.getCenter();\n    // TODO map structure\n    config.tools = [];\n\n    // tools\n    let tools = this.getTools().getObjects();\n    for (let i = 0; i < tools.length; i++) {\n      config.tools.push(tools[i].getState().serialize());\n    }\n\n    return config;\n  }\n\n  serializeGeoJSON() {\n    // tools\n    let tools = this.getTools().getObjects();\n    // get drawing tool\n    let found = tools.find((t) => t.getState().type === DRAWING_TOOL_LAYER_TYPE);\n    if (found) {\n      const config = found.getState().serializeToGeoJSON();\n      return config;\n    }\n    return {};\n  }\n\n  /**\n   * It returns the Leaflet map.\n   */\n  getLeafletMap() {\n    return this.map;\n  }\n\n  /**\n   * It returns the Leaflet map.\n   *\n   * @param {L.Map} map\n   */\n  setLeafletMap(map) {\n    return (this.map = map);\n  }\n\n  /**\n   * It returns tool templates.\n   */\n  getToolTemplates() {\n    return this.toolTemplates;\n  }\n\n  /**\n   * It sets tool templates.\n   *\n   * @param {AbstractToolsManager} toolTemplates\n   */\n  setToolTemplates(toolTemplates) {\n    this.toolTemplates = toolTemplates;\n  }\n\n  /**\n   * It returns tools.\n   */\n  getTools() {\n    return this.tools;\n  }\n\n  /**\n   * It sets tools.\n   *\n   * @param {AbstractToolsManager} tools\n   */\n  setTools(tools) {\n    // we use copies of predefined tools due to later multiple imports of configs\n    this.tools = tools.copy();\n  }\n\n  /**\n   * It returns the MapData object.\n   */\n  getMapData() {\n    return this.mapData;\n  }\n\n  /**\n   * It sets the MapData object.\n   * note: It also updates the current data.\n   *\n   * @param {AbstractMapData} mapData\n   */\n  setMapData(mapData) {\n    this.mapData = mapData;\n    this.setCurrentData(mapData.getData());\n  }\n\n  /**\n   * It returns current data (might be filtered).\n   */\n  getCurrentData() {\n    return this.data;\n  }\n\n  /**\n   * It sets current data.\n   *\n   * @param {[any]} data\n   */\n  setCurrentData(data) {\n    return (this.data = data);\n  }\n\n  /**\n   * It returns the MapConfig object.\n   */\n  getMapConfig() {\n    return this.mapConfig;\n  }\n\n  /**\n   * It sets the MapConfig object.\n   *\n   * @param {AbstractMapConfig} mapData\n   */\n  setMapConfig(mapConfig) {\n    this.mapConfig = mapConfig;\n  }\n\n  /**\n   * It returns polygons.\n   */\n  getPolygons() {\n    return this.polygons;\n  }\n\n  /**\n   * It sets polygons.\n   *\n   * @param {[any]} polygons\n   */\n  setPolygons(polygons) {\n    return (this.polygons = polygons);\n  }\n\n  /**\n   * It returns centroids.\n   */\n  getCentroids() {\n    return this.centroids;\n  }\n\n  /**\n   * It sets centroids.\n   *\n   * @param {[any]} centroids\n   */\n  setCentroids(centroids) {\n    return (this.centroids = centroids);\n  }\n\n  /**\n   * It returns the initial zoom level.\n   */\n  getInitialZoom() {\n    return this.zoom;\n  }\n\n  /**\n   * It sets initial zoom level.\n   *\n   * @param {number} zoom\n   */\n  setInitialZoom(zoom) {\n    return (this.zoom = zoom);\n  }\n\n  /**\n   * It returns the initial map center.\n   */\n  getInitialMapCenter() {\n    return this.mapCenter;\n  }\n\n  /**\n   * It sets initial map center.\n   *\n   * @param {*} mapCenter\n   */\n  setInitialMapCenter(mapCenter) {\n    return (this.mapCenter = mapCenter);\n  }\n\n  /**\n   * It returns the initial structure.\n   */\n  getInitialMapStructure() {\n    return this.mapCenter;\n  }\n\n  /**\n   * It sets initial map structure.\n   *\n   * @param {*} mapStructure\n   */\n  setInitialMapStructure(mapStructure) {\n    return (this.mapStructure = mapStructure);\n  }\n}\nexport default GeovistoMapState;\n","import L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport '../styles/common.scss';\nimport AbstractMapObject from '../model/object/abstract/AbstractMapObject';\nimport AbstractEvent from '../model/event/abstract/AbstractEvent';\nimport DataChangeEvent from '../model/event/basic/DataChangeEvent';\nimport GeovistoMapDefaults from './GeovistoMapDefaults';\nimport GeovistoMapState from './GeovistoMapState';\nimport MapCreatedEvent from '../model/event/basic/MapCreatedEvent';\n\n/**\n * Representation of map wrapper which handles map layers, sidebar and other tools\n *\n * @author Jiri Hynek\n */\nclass GeovistoMap extends AbstractMapObject {\n  /**\n   * Initializes object.\n   *\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n  }\n\n  /**\n   * It creates new defaults of the object.\n   */\n  createDefaults() {\n    return new GeovistoMapDefaults();\n  }\n\n  /**\n   * It creates new state if the object.\n   */\n  createState() {\n    return new GeovistoMapState();\n  }\n\n  /**\n   * The function draws a new map.\n   */\n  draw(mapConfig, geojson) {\n    // reset variables, use defaults\n    this.getState().reset(this.getDefaults());\n\n    // initialize map and tools\n    this.initialize(mapConfig, geojson);\n\n    // render map and tools\n    this.create();\n  }\n\n  /**\n   * This function redraws the current map.\n   */\n  redraw(mapConfig, props, geojson) {\n    // get map and remove map children\n    let mapContainer = document.getElementById(this.getState().getId());\n    if (mapContainer && mapContainer.childNodes.length > 0) {\n      mapContainer.childNodes[0].remove();\n    }\n\n    // creates a new state with a new props\n    if (props) {\n      this.state = this.createState();\n      this.state.initialize(props, this.getDefaults());\n    } else {\n      this.state.reset(this.getDefaults());\n    }\n\n    // initialize map and tools\n    this.initialize(mapConfig, geojson);\n\n    // render map and tools\n    this.create();\n  }\n\n  /**\n   * Resets variables.\n   */\n  initialize(mapConfig, geojson) {\n    mapConfig = mapConfig == undefined ? this.getDefaults().getConfig() : mapConfig;\n    this.getState().setMapConfig(mapConfig);\n\n    // override state by Geovisto config if specified in argument\n    // this also initializes child map objects - e.g., tools\n    this.getState().deserialize(mapConfig.getConfig(), geojson);\n\n    // initialize existing tools\n    let toolsManager = this.getState().getTools();\n    if (!toolsManager.isEmpty()) {\n      // a) tool is already created, initialize them and try to find their config\n      let tools = toolsManager.getObjects();\n      for (let i = 0; i < tools.length; i++) {\n        // initialize tool (provide map and config)\n        tools[i].initialize(this, mapConfig.getToolConfig(tools[i].getId()));\n      }\n    }\n\n    // deserialize remaining tools with respect to the config\n    let toolsConfigs = mapConfig.getToolsConfigs();\n    if (toolsConfigs != undefined) {\n      let toolTemplatesManager = this.getState().getToolTemplates();\n      let tool;\n      let toolConfig;\n      for (let i = 0; i < toolsConfigs.length; i++) {\n        toolConfig = toolsConfigs[i];\n\n        // filter already initialized tools\n        if (toolConfig.id != undefined) {\n          tool = toolsManager.getById(toolConfig.id);\n          if (tool != undefined) {\n            continue;\n          }\n        }\n\n        // b) tool has not been created yet, use config and tool template to create the tool\n        let toolTemplates = toolTemplatesManager.getByType(toolConfig.type);\n        if (toolTemplates.length > 0) {\n          // filter singleton duplicates\n          if (\n            toolTemplates[0].isSingleton() &&\n            toolsManager.getByType(toolConfig.type).length > 0\n          ) {\n            continue;\n          }\n          // create copy of the tool template\n          tool = toolTemplates[0].copy();\n          // initialize tool\n          tool.initialize(this, toolConfig);\n          // add to the list of tools\n          toolsManager.add(tool);\n        }\n\n        // if there is no template, the tool config is ignored\n      }\n    }\n  }\n\n  /**\n   * It exports the serialized representation of the current state of the map.\n   */\n  export() {\n    return this.getState().getMapConfig().export(this.getState().serialize(this.getDefaults()));\n  }\n\n  exportGeoJSON() {\n    return this.getState().serializeGeoJSON();\n  }\n\n  /**\n   * This function creates Geovisto map - it creates map container, leaflet map and tools.\n   */\n  create() {\n    // create new map container (DOM element)\n    this.createMapContainer();\n\n    // create Leaflet map\n    this.createMap();\n\n    // create tools\n    this.createTools();\n  }\n\n  /**\n   * This function creates the map container.\n   */\n  createMapContainer() {\n    let mapContainer = document\n      .getElementById(this.getState().getId())\n      .appendChild(document.createElement('div'));\n    mapContainer.setAttribute('id', this.getContainerId());\n    mapContainer.setAttribute('class', this.getContainerClass());\n\n    return mapContainer;\n  }\n\n  /**\n   * The type of the object.\n   */\n  static TYPE() {\n    // important! CSS styles use this name!\n    return 'geovisto-map';\n  }\n\n  /**\n   * It returns ID of the map container.\n   */\n  getContainerId() {\n    return this.getId() + '-container';\n  }\n\n  /**\n   * It returns class of the map container.\n   */\n  getContainerClass() {\n    return this.getType() + '-container';\n  }\n\n  /**\n   * Creates the leaflet-based map with respect to the configuration.\n   */\n  createMap() {\n    let state = this.getState();\n    let map = L.map(this.getContainerId(), state.getInitialMapStructure()).setView(\n      state.getInitialMapCenter(),\n      state.getInitialZoom(),\n    );\n\n    // add attribution\n    map.attributionControl.addAttribution(this.getMapAttribution());\n\n    this.getState().setLeafletMap(map);\n    window.map = map;\n\n    return this.map;\n  }\n\n  /**\n   * It returns the map attribution.\n   *\n   * This function can be overriden;\n   */\n  getMapAttribution() {\n    return '<a href=\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson\">GeoJSON</a>';\n  }\n\n  /**\n   * This function creates map tools.\n   */\n  createTools() {\n    // create tools\n    let tools = this.getState().getTools().getObjects();\n    for (let i = 0; i < tools.length; i++) {\n      // create tool\n      tools[i].create();\n    }\n  }\n\n  /**\n   * It updates data and invokes listeners.\n   *\n   * @param {[any]} data\n   * @param {*} source of the change\n   */\n  updateData(data, source) {\n    // update state\n    this.getState().setCurrentData(data);\n\n    // create and dispatch event\n    this.dispatchEvent(new DataChangeEvent(source, data));\n  }\n\n  /**\n   * It sends custom event to all listeners (tools)\n   *\n   * @param {AbstractEvent} event\n   */\n  dispatchEvent(event) {\n    console.log('event: ' + event.getType(), event);\n    // notify listeners\n    let tools = this.getState().getTools().getObjects();\n    for (let i = 0; i < tools.length; i++) {\n      tools[i].handleEvent(event);\n    }\n  }\n}\n\nexport default GeovistoMap;\n","import React, { Component } from 'react';\nimport '../styles/common.scss';\nimport GeovistoMap from '../map/GeovistoMap';\n\n/**\n * React component which wraps Geovisto map.\n *\n * @author Jiri Hynek\n */\nclass ReactGeovistoMap extends Component {\n  /**\n   * Initializes object.\n   *\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n\n    if (props.id == undefined) props.id = this.getDefaultId();\n\n    // create new Geovisto map\n    this.m = new GeovistoMap(props);\n  }\n\n  /**\n   * It returns Geovisto map.\n   */\n  getMap() {\n    return this.m;\n  }\n\n  /**\n   * It returns a default id used for Geovisto map container.\n   */\n  getDefaultId() {\n    return 'my-geovisto-map';\n  }\n\n  /**\n   * It returns a default class name used for Geovisto map container.\n   */\n  getDefaultClass() {\n    return 'geovisto-map';\n  }\n\n  /**\n   * Draw map after component is rendered\n   */\n  componentDidMount() {\n    // draw map with the current config\n    this.m.draw(this.props.config, this.props.geojson);\n  }\n\n  /**\n   * Redraw map after component is updated\n   */\n  componentDidUpdate() {\n    // redraw map with a new config and new props\n    this.m.redraw(this.props.config, this.props, this.props.geojson);\n  }\n\n  /**\n   * The render function prepares a wrapper which will be used by Geovisto/Leaflet to render the map.\n   */\n  render() {\n    return <div id={this.props.id} className={this.getDefaultClass()} />;\n  }\n}\n\nexport default ReactGeovistoMap;\n","import AbstractMapDataDomain from '../AbstractMapDataDomain';\n\n/**\n * The class wraps meta data path used to find data.\n * \n * @author Jiri Hynek\n */\nclass FlattenedMapDataDomain extends AbstractMapDataDomain {\n\n    constructor(domainDescription) {\n        super(domainDescription);\n        this.label = domainDescription.join().replace(/,/g, \".\");\n    }\n\n    /**\n     * The function returns the string representation of the map data domain\n     * which is *unique* among the labels of other data domains.\n     * \n     * It is uses dots to delimiter the array items.\n     * \n     * @returns {string}\n     */\n    toString() {\n        return this.label;\n    }\n}\nexport default FlattenedMapDataDomain;","import rfdc from 'rfdc';\nimport FlattenedMapDataDomain from './FlattenedMapDataDomain';\nimport AbstractMapData from '../AbstractMapData';\n\n/**\n * Example of a data wrapper which provides a basic flattening.\n * \n * @author Jiri Hynek\n */\nclass FlattenedMapData extends AbstractMapData {\n\n    constructor(data) {\n        super(data);\n        this.flattenedData = undefined;\n        this.dataDomains = undefined;\n    }\n\n    /**\n     * It returns the original input data.\n     */\n    getOriginalData() {\n        return super.getOriginalData();\n    }\n\n    /**\n     * It returns list of data domains (FlattenedMapDataDomain) representing data dimensions e. g.:\n     * [\n     *   [ 'value' ],\n     *   [ 'source', 'ip' ],\n     *   [ 'source', 'country' ],\n     *   [ 'target', 'ip' ],\n     *   [ 'target', 'country' ]\n     * ]\n     * \n     */\n    getDataDomains() {\n        if(this.dataDomains == undefined) {\n            this.createDataDomains();\n        }\n\n        return this.dataDomains;\n    }\n\n    /**\n     * It returns the data domain which corresponds to the given string.\n     * \n     * @param {string} label \n     */\n    getDataDomain(label) {\n        let dataDomains = this.getDataDomains();\n        for(let i = 0; i < dataDomains.size; i++) {\n            if(dataDomains[i].toString == label) {\n                return dataDomains[i];\n            }\n        }\n        return new FlattenedMapDataDomain(label.split('.'));\n    }\n\n    /**\n     * It returns preprocessed flattened data.\n     */\n    getData() {\n        if(this.flattenedData == undefined) {\n            this.flattenArrays();\n        }\n        return this.flattenedData;\n    }\n\n    /**\n     * It returns list of all values of the selected data domain.\n     * \n     * @param {AbstractMapDataDomain} dataDomain \n     * @returns {[String]}\n     */\n    getValues(dataDomain) {\n        return this.getDataValues(dataDomain, this.getData());\n    }\n\n    /**\n     * It returns list of all values of the selected data domain\n     * for the given subset of data.\n     * \n     * @param {AbstractMapDataDomain} dataDomain \n     * @param {any} data \n     * @returns {[String]}\n     */\n    getDataValues(dataDomain, data) {\n        let result = [];\n\n        if(data != undefined) {\n            for(let i = 0; i < data.length; i++) {\n                let actResult = [];\n                FlattenedMapData.processDataDomainDescription(actResult, data[i], dataDomain.getDomainDescription(), 0);\n                // add only unique results\n                for(let j = 0; j < actResult.length; j++) {\n                    if(!result.includes(actResult[j])) {\n                        result.push(actResult[j]);\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * It returns values stored in the given item of the selected data domain.\n     * \n     * @param {AbstractMapDataDomain} dataDomain \n     * @param {any} item \n     * @returns {[String]}\n     */\n    getItemValues(dataDomain, item) {\n        let result = [];\n\n        if(item != undefined) {\n            FlattenedMapData.processDataDomainDescription(result, item, dataDomain.getDomainDescription(), 0);\n        }\n\n        return result;\n    }\n\n    /**\n     * Help function which analyzes data and creates its metedata description.\n     */\n    createDataDomains() {\n        /*\n         * Tests if an array contains an item\n         */\n        let contains = function(dataDomains, dataDomain) {\n            let dataDomainLabel = dataDomain.toString()\n            for(let i = 0; i < dataDomains.length; i++) {\n                if(dataDomains[i].toString() == dataDomainLabel) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        /*\n         * *Recursive* build of data domains\n         *\n         * TODO: optimize\n         */\n        let processDataDomain = function(dataDomains, dataDomain, actValue) {\n            if(typeof actValue == \"object\" && actValue != null) {\n                // object\n                if(Array.isArray(actValue)) {\n                    // array - in the case that the data are not flattened\n                    dataDomain.push(\"[]\");\n                    for(let i = 0; i < actValue.length; i++) {\n                        processDataDomain(dataDomains, dataDomain, actValue[i]);\n                    }\n                } else {\n                    // structure (key, value)\n                    let actKeys = Object.keys(actValue);\n                    for(let j = 0; j < actKeys.length; j++) {\n                        let dataDomainCopy = [...dataDomain];\n                        dataDomainCopy.push(actKeys[j]);\n                        processDataDomain(dataDomains, dataDomainCopy, actValue[actKeys[j]]);\n                    }\n                }\n            } else {\n                // simple value\n                let newMapDataDomain = new FlattenedMapDataDomain(dataDomain);\n                if(!contains(dataDomains, newMapDataDomain)) {\n                    dataDomains.push(newMapDataDomain);\n                }\n            }\n        }\n\n        // process data -> builing list of data domains (simplified scheme)\n        this.dataDomains = [];\n        let dataDomain;\n        let actKeys;\n        let data = this.getData(); // get flattened data\n        for (var i = 0; i < data.length; i++) {\n            actKeys = Object.keys(data[i]);\n            for(let j = 0; j < actKeys.length; j++) {\n                dataDomain = [ actKeys[j] ];\n                processDataDomain(this.dataDomains, dataDomain, data[i][actKeys[j]]);\n            }\n        }\n        console.log(\"data domains:\", this.dataDomains);\n    }\n\n    /**\n     * Help function which converts data to the flat structure.\n     */\n    flattenArrays() { \n\n        /*\n         * *Recursive* flattening of data\n         *\n         * TODO: optimize\n         */\n        let transformObject = function(actValue) {\n            let result;\n            let clone = new rfdc();\n            if(typeof actValue == \"object\") {\n                // object\n                if(Array.isArray(actValue)) {\n                    // array\n                    let transformedChildren = [];\n                    let transformedChild;\n                    for(let i = 0; i < actValue.length; i++) {\n                        transformedChild = transformObject(actValue[i]);\n                        if(Array.isArray(transformedChild)) {\n                            transformedChildren = transformedChildren.concat(transformedChild);\n                        } else {\n                            transformedChildren.push(transformedChild);\n                        }\n                    }\n                    result = transformedChildren;\n                } else {\n                    // structure (key, value)\n                    let transformedChild;\n                    let actKeys = Object.keys(actValue);\n                    result = [{}];\n                    for(let i = 0; i < actKeys.length; i++) {\n                        transformedChild = transformObject(actValue[actKeys[i]]);\n                        if(Array.isArray(transformedChild)) {\n                            // wee need to duplicate actual results\n                            let newResults = [];\n                            let copy;\n                            for(let j = 0; j < result.length; j++) {\n                                for(let k = 0; k < transformedChild.length; k++) {\n                                    copy = clone(result[j]);\n                                    copy[actKeys[i]] = transformedChild[k];\n                                    newResults.push(copy);\n                                }\n                            }\n                            result = newResults;\n                        } else {\n                            for(let j = 0; j < result.length; j++) {\n                                result[j][actKeys[i]] = transformedChild;\n                            }\n                        }\n                    }\n                }\n\n                // optimization\n                if(result.length == 0) {\n                    result = null;\n                } else if(result.length == 1) {\n                    result = result[0];\n                }\n            } else {\n                 result = actValue;\n            }\n            return result;\n        }\n        \n        this.flattenedData = transformObject(this.data);\n        console.log(\"flattened data: \", this.data);\n    }\n\n    /**\n     * Static help function represenets a step of recursive data processing searching data items.\n     * \n     * @param {*} result \n     * @param {*} actValue \n     * @param {*} dataDomain \n     * @param {*} i \n     */\n    static processDataDomainDescription(result, actValue, domainDescription, i) {\n\n        if(actValue != undefined && actValue != null) {\n            if(i == domainDescription.length) {\n                // reached the value\n                if(typeof actValue != \"object\") {\n                    result.push(actValue);\n                } else {\n                    result.push(null);\n                }\n            } else {\n                // act value needs to be type of object\n                if(typeof actValue == \"object\") {\n                    let dataDomainPart = domainDescription[i];\n                    if(dataDomainPart == \"[]\") {\n                        // act value needs to be type of array\n                        if(Array.isArray(actValue)) {\n                            for(let j = 0; j < actValue.length; j++) {\n                                FlattenedMapData.processDataDomainDescription(result, actValue[j], domainDescription, i+1);\n                            }\n                        }\n                    } else {\n                        // act value is structure\n                        FlattenedMapData.processDataDomainDescription(result, actValue[dataDomainPart], domainDescription, i+1);\n                    }\n                }\n            }\n        }\n    }\n}\nexport default FlattenedMapData\n","import React, { Component } from 'react';\r\nimport ReactGeovistoMap from '../react/ReactGeovistoMap';\r\nimport FlattenedMapData from '../model/data/basic/FlattenedMapData';\r\n\r\nimport SettingsTool from '../tools/settings/SettingsTool';\r\nimport FiltersTool from '../tools/filters/FiltersTool';\r\nimport BasicMapConfig from '../model/config/basic/BasicMapConfig';\r\nimport SidebarTool from '../tools/sidebar/SidebarTool';\r\nimport ToolsManager from '../model/tool/generic/ToolsManager';\r\nimport ThemesManager from '../tools/themes/model/theme/generic/ThemesManager';\r\nimport ThemesTool from '../tools/themes/ThemesTool';\r\nimport SelectionTool from '../tools/selection/SelectionTool';\r\nimport MapLayerTool from '../tools/layers/map/MapLayerTool';\r\nimport ChoroplethLayerTool from '../tools/layers/choropleth/ChoroplethLayerTool';\r\nimport MarkerLayerTool from '../tools/layers/marker/MarkerLayerTool';\r\nimport ConnectionLayerTool from '../tools/layers/connection/ConnectionLayerTool';\r\nimport DrawingLayerTool from '../tools/layers/drawing/DrawingLayerTool';\r\nimport Dark1Theme from '../tools/themes/model/theme/basic/dark1/Dark1Theme';\r\nimport Dark2Theme from '../tools/themes/model/theme/basic/dark2/Dark2Theme';\r\nimport Dark3Theme from '../tools/themes/model/theme/basic/dark3/Dark3Theme';\r\nimport Light1Theme from '../tools/themes/model/theme/basic/light1/Light1Theme';\r\nimport Light2Theme from '../tools/themes/model/theme/basic/light2/Light2Theme';\r\nimport Light3Theme from '../tools/themes/model/theme/basic/light3/Light3Theme';\r\nimport EqFilterOperation from '../tools/filters/model/basic/EqFilterOperation';\r\nimport NeqFilterOperation from '../tools/filters/model/basic/NeqFilterOperation';\r\nimport RegFilterOperation from '../tools/filters/model/basic/RegFilterOperation';\r\nimport FiltersManager from '../tools/filters/model/generic/FiltersManager';\r\n\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './Demo.scss';\r\n\r\nimport Polygons from '../../static/geo/country_polygons.json'\r\nimport Centroids from '../../static/geo/country_centroids.json'\r\nimport JsonData from '../../static/data/demo1.json'\r\nimport JsonConfig from '../../static/config/config.json'\r\nimport GeojsonConfig from '../../static/geo/map.json'\r\n\r\n/* example of screen component with grid layout and card wrapper usage */\r\n\r\nconst C_ID_select_data = 'leaflet-combined-map-select-data';\r\nconst C_ID_check_data = 'leaflet-combined-map-check-data';\r\nconst C_ID_input_data = 'leaflet-combined-map-input-data';\r\nconst C_ID_check_config = 'leaflet-combined-map-check-config';\r\nconst C_ID_input_config = 'leaflet-combined-map-input-config';\r\nconst C_ID_check_geojson = 'leaflet-combined-map-check-geojson';\r\nconst C_ID_input_geojson = 'leaflet-combined-map-input-geojson';\r\nconst C_ID_input_import = 'leaflet-combined-map-input-import';\r\nconst C_ID_input_export = 'leaflet-combined-map-input-export';\r\n\r\nconst PREFIX = '../..'\r\n\r\nclass Demo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // initialize geo objects\r\n    this.polygons = Polygons;\r\n    this.centroids = Centroids;\r\n\r\n    // // implicit file\r\n    const jsonData = JsonData;\r\n\r\n    // // implicit config\r\n    const jsonConfig = JsonConfig;\r\n\r\n    // // implicitgeojson\r\n    const geojsonConfig = GeojsonConfig;\r\n\r\n    // reference to the rendered map\r\n    this.map = React.createRef();\r\n\r\n    // data and config can be changed\r\n    this.state = {\r\n      data: jsonData,\r\n      config: jsonConfig,\r\n      geo: geojsonConfig,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const _this = this;\r\n\r\n    // ------ enable check boxes ------ //\r\n\r\n    const enableInput = function (checked, id) {\r\n      if (checked) {\r\n        document.getElementById(id).removeAttribute('disabled');\r\n      } else {\r\n        document.getElementById(id).setAttribute('disabled', 'disabled');\r\n      }\r\n    };\r\n\r\n    // enable data check box\r\n    const enableDataInput = function (e) {\r\n      enableInput(e.target.checked, C_ID_input_data);\r\n    };\r\n    document.getElementById(C_ID_input_data).setAttribute('disabled', 'disabled');\r\n    document.getElementById(C_ID_check_data).onchange = enableDataInput;\r\n\r\n    // enable config check box\r\n    const enableConfigInput = function (e) {\r\n      enableInput(e.target.checked, C_ID_input_config);\r\n    };\r\n    document.getElementById(C_ID_input_config).setAttribute('disabled', 'disabled');\r\n    document.getElementById(C_ID_check_config).onchange = enableConfigInput;\r\n\r\n    // enable geojson check box\r\n    const enableGeojsonInput = function (e) {\r\n      enableInput(e.target.checked, C_ID_input_geojson);\r\n    };\r\n    document.getElementById(C_ID_input_geojson).setAttribute('disabled', 'disabled');\r\n    document.getElementById(C_ID_check_geojson).onchange = enableGeojsonInput;\r\n\r\n    // ------ process files ------ //\r\n\r\n    // process path\r\n    const pathSubmitted = function (file, result) {\r\n      const reader = new FileReader();\r\n      const onLoadAction = function (e) {\r\n        try {\r\n          console.log(e);\r\n          //console.log(reader.result);\r\n          result.json = JSON.parse(reader.result);\r\n        } catch (ex) {\r\n          console.log('unable to read file');\r\n          // TODO: notify user\r\n        }\r\n      };\r\n      reader.onload = onLoadAction;\r\n      reader.readAsText(file);\r\n    };\r\n\r\n    // process data path\r\n    const data = {\r\n      json: undefined,\r\n    };\r\n    const dataPathSubmitted = function (e) {\r\n      console.log(this.files);\r\n      pathSubmitted(this.files[0], data);\r\n    };\r\n    document.getElementById(C_ID_input_data).addEventListener('change', dataPathSubmitted, false);\r\n\r\n    // process config path\r\n    const config = {\r\n      json: undefined,\r\n    };\r\n    const configPathSubmitted = function (e) {\r\n      console.log(this.files);\r\n      pathSubmitted(this.files[0], config);\r\n    };\r\n    document\r\n      .getElementById(C_ID_input_config)\r\n      .addEventListener('change', configPathSubmitted, false);\r\n\r\n    // process geojson path\r\n    const geo = {\r\n      json: undefined,\r\n    };\r\n    const geoPathSubmitted = function (e) {\r\n      console.log(this.files);\r\n      pathSubmitted(this.files[0], geo);\r\n    };\r\n    document.getElementById(C_ID_input_geojson).addEventListener('change', geoPathSubmitted, false);\r\n\r\n    // ------ import ------ //\r\n\r\n    // import action\r\n    const importAction = function (e) {\r\n      console.log(e);\r\n      console.log('data: ', data);\r\n      console.log('config: ', config);\r\n      console.log('geo: ', geo);\r\n\r\n      // process data json\r\n      if (!document.getElementById(C_ID_check_data).checked || data.json == undefined) {\r\n        const fileName = document.getElementById(C_ID_select_data).value;\r\n        console.log(fileName);\r\n        data.json = React.lazy(() => import(PREFIX + '/static/data/' + fileName));\r\n      }\r\n\r\n      // process config json\r\n      if (!document.getElementById(C_ID_check_config).checked || config.json == undefined) {\r\n        config.json = React.lazy(() => import(PREFIX + '/static/config/config.json'));\r\n      }\r\n\r\n      // process geojson\r\n      if (!document.getElementById(C_ID_check_geojson).checked || geo.json == undefined) {\r\n        geo.json = React.lazy(() => import(PREFIX + '/static/geo/map.json'));\r\n      }\r\n\r\n      // update state\r\n      _this.setState({\r\n        data: data.json,\r\n        config: config.json,\r\n        geo: geo.json,\r\n      });\r\n    };\r\n    document.getElementById(C_ID_input_import).addEventListener('click', importAction);\r\n\r\n    // ------ export ------ //\r\n\r\n    // export action\r\n    const exportAction = function (e) {\r\n      console.log(e);\r\n\r\n      // expert map configuration\r\n      const config = JSON.stringify(_this.map.current.getMap().export(), null, 2);\r\n\r\n      // download file\r\n      const element = document.createElement('a');\r\n      element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(config));\r\n      element.setAttribute('download', 'config.json');\r\n      element.style.display = 'none';\r\n      document.body.appendChild(element);\r\n      element.click();\r\n      document.body.removeChild(element);\r\n\r\n      console.log('rendered map:');\r\n    };\r\n    document.getElementById(C_ID_input_export).addEventListener('click', exportAction);\r\n  }\r\n\r\n  exportGeoJSON = (evt) => {\r\n    const config = JSON.stringify(this.map.current.getMap().exportGeoJSON(), null, 2);\r\n    // download file\r\n    const element = document.createElement('a');\r\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(config));\r\n    element.setAttribute('download', 'map.json');\r\n    element.style.display = 'none';\r\n    document.body.appendChild(element);\r\n    element.click();\r\n    document.body.removeChild(element);\r\n  };\r\n\r\n  render() {\r\n    console.log('rendering...');\r\n    return (\r\n      <div className=\"demo-container\">\r\n        <div className=\"demo-toolbar\">\r\n          <span>Data file: </span>\r\n          <select id={C_ID_select_data}>\r\n            <option value=\"demo1.json\">demo1.json</option>\r\n            <option value=\"demo2.json\">demo2.json</option>\r\n            <option disabled></option>\r\n          </select>\r\n\r\n          <span>\r\n            {' '}\r\n            or <input id={C_ID_check_data} type=\"checkbox\" /> custom file:{' '}\r\n          </span>\r\n          <input id={C_ID_input_data} type=\"file\" accept=\".json\" size=\"3\" />\r\n\r\n          <input id={C_ID_check_config} type=\"checkbox\" />\r\n          <span> Configuration file: </span>\r\n          <input id={C_ID_input_config} type=\"file\" accept=\".json\" size=\"3\" />\r\n\r\n          <input id={C_ID_check_geojson} type=\"checkbox\" />\r\n          <span> GeoJSON file: </span>\r\n          <input id={C_ID_input_geojson} type=\"file\" accept=\".json\" size=\"3\" />\r\n\r\n          <input id={C_ID_input_import} type=\"submit\" value=\"import\" />\r\n          <input id={C_ID_input_export} type=\"submit\" value=\"export\" />\r\n\r\n          <input type=\"submit\" value=\"geoExport\" onClick={this.exportGeoJSON} />\r\n        </div>\r\n        <div className=\"demo-map\">\r\n          <ReactGeovistoMap\r\n            ref={this.map}\r\n            id=\"my-geovisto-map\"\r\n            polygons={this.polygons}\r\n            centroids={this.centroids}\r\n            data={new FlattenedMapData(this.state.data)}\r\n            config={new BasicMapConfig(this.state.config)}\r\n            geojson={this.state.geo}\r\n            globals={undefined}\r\n            tools={\r\n              new ToolsManager([\r\n                new SidebarTool({ id: 'geovisto-tool-sidebar' }),\r\n                new SettingsTool({ id: 'geovisto-tool-settings' }),\r\n                new FiltersTool({\r\n                  // filter operations\r\n                  id: 'geovisto-tool-filters',\r\n                  manager: new FiltersManager([\r\n                    new EqFilterOperation(),\r\n                    new NeqFilterOperation(),\r\n                    new RegFilterOperation(),\r\n                  ]),\r\n                }),\r\n                new ThemesTool({\r\n                  // style themes\r\n                  id: 'geovisto-tool-themes',\r\n                  manager: new ThemesManager([\r\n                    new Light1Theme(),\r\n                    new Light2Theme(),\r\n                    new Light3Theme(),\r\n                    new Dark1Theme(),\r\n                    new Dark2Theme(),\r\n                    new Dark3Theme(),\r\n                  ]),\r\n                }),\r\n                new SelectionTool({ id: 'geovisto-tool-selection' }),\r\n                new MapLayerTool({ id: 'geovisto-tool-layer-map' }),\r\n                new ChoroplethLayerTool({ id: 'geovisto-tool-layer-choropleth' }),\r\n                new MarkerLayerTool({ id: 'geovisto-tool-layer-marker' }),\r\n                new ConnectionLayerTool({ id: 'geovisto-tool-layer-connection' }),\r\n                new DrawingLayerTool({ id: 'geovisto-tool-layer-drawing' }),\r\n              ])\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Demo;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Demo from './demo/Demo';\r\n\r\nReactDOM.render(<Demo />, document.getElementById('root'));\r\n"],"sourceRoot":""}